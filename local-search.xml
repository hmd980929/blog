<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL-DQL查询数据</title>
    <link href="/blog/2022/08/03/Mysql/mysql_4/"/>
    <url>/blog/2022/08/03/Mysql/mysql_4/</url>
    
    <content type="html"><![CDATA[<h1 id="DQL查询数据"><a href="#DQL查询数据" class="headerlink" title="DQL查询数据"></a>DQL查询数据</h1><h2 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h2><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><p>SELECT语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">ALL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DISTINCT</span>]<br>&#123;<span class="hljs-operator">*</span> <span class="hljs-operator">|</span> table.<span class="hljs-operator">*</span> <span class="hljs-operator">|</span> [table.field1[<span class="hljs-keyword">as</span> alias1][,table.field2[<span class="hljs-keyword">as</span> alias2]][,...]]&#125;<br><span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">as</span> table_alias]<br>  [<span class="hljs-keyword">left</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">right</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> table_name2]  <span class="hljs-comment">-- 联合查询</span><br>  [<span class="hljs-keyword">WHERE</span> ...]  <span class="hljs-comment">-- 指定结果需满足的条件</span><br>  [<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> ...]  <span class="hljs-comment">-- 指定结果按照哪几个字段来分组</span><br>  [<span class="hljs-keyword">HAVING</span>]  <span class="hljs-comment">-- 过滤分组的记录必须满足的次要条件</span><br>  [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...]  <span class="hljs-comment">-- 指定查询记录按一个或多个条件排序</span><br>  [LIMIT &#123;[<span class="hljs-keyword">offset</span>,]row_count <span class="hljs-operator">|</span> row_countOFFSET <span class="hljs-keyword">offset</span>&#125;];<br>   <span class="hljs-comment">-- 指定查询的记录从哪条至哪条</span><br></code></pre></td></tr></table></figure><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h2 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询表中所有的数据列结果 , 采用 **&quot; \* &quot;** 符号; 但是效率低，不推荐 .</span><br><br><span class="hljs-comment">-- 查询所有学生信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 查询指定列(学号 , 姓名)</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><p>AS 子句作为别名<br>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 这里是为列取别名(当然as关键词可以省略)</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">AS</span> 学号,studentname <span class="hljs-keyword">AS</span> 姓名 <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 使用as也可以为表取别名</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">AS</span> 学号,studentname <span class="hljs-keyword">AS</span> 姓名 <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s;<br><br><span class="hljs-comment">-- 使用as,为查询结果取一个新名字</span><br><span class="hljs-comment">-- CONCAT()函数拼接字符串</span><br><span class="hljs-keyword">SELECT</span> CONCAT(<span class="hljs-string">&#x27;姓名:&#x27;</span>,studentname) <span class="hljs-keyword">AS</span> 新姓名 <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure></li></ul><p>DISTINCT关键字的使用<br>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- # 查看哪些同学参加了考试(学号) 去除重复项</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>; <span class="hljs-comment">-- 查看考试成绩</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>; <span class="hljs-comment">-- 查看哪些同学参加了考试</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> studentno <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>; <span class="hljs-comment">-- 了解:DISTINCT 去除重复项 , (默认是ALL)</span><br></code></pre></td></tr></table></figure><p>使用表达式的列<br>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成<br>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式– selcet查询中可以使用表达式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@auto</span>_increment_increment; <span class="hljs-comment">-- 查询自增步长</span><br><span class="hljs-keyword">SELECT</span> VERSION(); <span class="hljs-comment">-- 查询版本号</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-number">3</span><span class="hljs-number">-1</span> <span class="hljs-keyword">AS</span> 计算结果; <span class="hljs-comment">-- 表达式</span><br><br><span class="hljs-comment">-- 学员考试成绩集体提分一分查看</span><br><span class="hljs-keyword">SELECT</span> studentno,StudentResult<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;提分后&#x27;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br></code></pre></td></tr></table></figure></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h2 id="where条件语句"><a href="#where条件语句" class="headerlink" title="where条件语句"></a>where条件语句</h2><p>作用：用于检索数据表中 符合条件 的记录<br>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.<br>逻辑操作符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql">测试<br><span class="hljs-comment">-- 满足条件的查询(where)</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><br><span class="hljs-comment">-- 查询考试成绩在95-100之间的</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> StudentResult<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- AND也可以写成 &amp;&amp;</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span> <span class="hljs-operator">&amp;&amp;</span> StudentResult<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 模糊查询(对应的词:精确查询)</span><br><span class="hljs-keyword">SELECT</span> Studentno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> StudentResult <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 除了1000号同学,要其他同学的成绩</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> studentno<span class="hljs-operator">!=</span><span class="hljs-number">1000</span>;<br><br><span class="hljs-comment">-- 使用NOT</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> studentno<span class="hljs-operator">=</span><span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p>模糊查询 ：比较操作符</p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 模糊查询 between and \ like \ in \ null</span><br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- LIKE</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询姓刘的同学的学号及姓名</span><br><span class="hljs-comment">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓刘的同学,后面只有一个字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘_&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓刘的同学,后面只有两个字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘__&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓名中含有 嘉 字的</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%嘉%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询姓名中含有特殊字符的需要使用转义符号 &#x27;\&#x27;</span><br><span class="hljs-comment">-- 自定义转义符关键字: ESCAPE &#x27;:&#x27;</span><br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- IN</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询学号为1000,1001,1002的学生姓名</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> studentno <span class="hljs-keyword">IN</span> (<span class="hljs-number">1000</span>,<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>);<br><br><span class="hljs-comment">-- 查询地址在北京,南京,河南洛阳的学生</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname,address <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> address <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;南京&#x27;</span>,<span class="hljs-string">&#x27;河南洛阳&#x27;</span>);<br><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- NULL 空</span><br><span class="hljs-comment">-- =============================================</span><br><span class="hljs-comment">-- 查询出生日期没有填写的同学</span><br><span class="hljs-comment">-- 不能直接写=NULL , 这是代表错误的 , 用 is null</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> BornDate <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 查询出生日期填写的同学</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> BornDate <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 查询没有写家庭住址的同学(空字符串不等于null)</span><br><span class="hljs-keyword">SELECT</span> studentname <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> Address<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">OR</span> Address <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>JOIN 对比<br><img src="/blog/img/mysql/13.png" alt="13"><br>七种Join：<br><img src="/blog/img/mysql/14.png" alt="14"><br>测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">连接查询</span><br><span class="hljs-comment">   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span><br><span class="hljs-comment">内连接 inner join</span><br><span class="hljs-comment">   查询两个表中的结果集中的交集</span><br><span class="hljs-comment">外连接 outer join</span><br><span class="hljs-comment">   左外连接 left join</span><br><span class="hljs-comment">       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span><br><span class="hljs-comment">   右外连接 right join</span><br><span class="hljs-comment">       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">等值连接和非等值连接</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">自连接</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br><br><span class="hljs-comment">/*思路:</span><br><span class="hljs-comment">(1):分析需求,确定查询的列来源于两个类,student result,连接查询</span><br><span class="hljs-comment">(2):确定使用哪种连接查询?(内连接)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 右连接(也可实现)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 等值连接</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s , <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">WHERE</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 左连接 (查询了所有同学,不考试的也会查出来)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><br><span class="hljs-comment">-- 查一下缺考的同学(左连接应用场景)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">WHERE</span> StudentResult <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><br><span class="hljs-comment">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> sub.subjectno <span class="hljs-operator">=</span> r.subjectno<br>自连接<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">自连接</span><br><span class="hljs-comment">   数据表与自身进行连接</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中</span><br><span class="hljs-comment">    查询父栏目名称和其他子栏目名称</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 创建一个表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `category` (<br>`categoryid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主题id&#x27;</span>,<br>`pid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;父id&#x27;</span>,<br>`categoryName` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;主题名字&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`categoryid`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">9</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-comment">-- 插入数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `category` (`categoryid`, `pid`, `categoryName`)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;信息技术&#x27;</span>),<br>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;软件开发&#x27;</span>),<br>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;数据库&#x27;</span>),<br>(<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;美术设计&#x27;</span>),<br>(<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;web开发&#x27;</span>),<br>(<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;ps技术&#x27;</span>),<br>(<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;办公信息&#x27;</span>);<br><br><span class="hljs-comment">-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)</span><br><span class="hljs-comment">-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</span><br><span class="hljs-keyword">SELECT</span> a.categoryName <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;父栏目&#x27;</span>,b.categoryName <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;子栏目&#x27;</span><br><span class="hljs-keyword">FROM</span> category <span class="hljs-keyword">AS</span> a,category <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">WHERE</span> a.`categoryid`<span class="hljs-operator">=</span>b.`pid`<br><br><span class="hljs-comment">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> sub.subjectno <span class="hljs-operator">=</span> r.subjectno<br><br><span class="hljs-comment">-- 查询学员及所属的年级(学号,学生姓名,年级名)</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">AS</span> 学号,studentname <span class="hljs-keyword">AS</span> 学生姓名,gradename <span class="hljs-keyword">AS</span> 年级名称<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> grade g<br><span class="hljs-keyword">ON</span> s.`GradeId` <span class="hljs-operator">=</span> g.`GradeID`<br><br><span class="hljs-comment">-- 查询科目及所属的年级(科目名称,年级名称)</span><br><span class="hljs-keyword">SELECT</span> subjectname <span class="hljs-keyword">AS</span> 科目名称,gradename <span class="hljs-keyword">AS</span> 年级名称<br><span class="hljs-keyword">FROM</span> SUBJECT sub<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> grade g<br><span class="hljs-keyword">ON</span> sub.gradeid <span class="hljs-operator">=</span> g.gradeid<br><br><span class="hljs-comment">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h2><p>测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*============== 排序 ================</span><br><span class="hljs-comment">语法 : ORDER BY</span><br><span class="hljs-comment">   ORDER BY 语句用于根据指定的列对结果集进行排序。</span><br><span class="hljs-comment">   ORDER BY 语句默认按照ASC升序对记录进行排序。</span><br><span class="hljs-comment">   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="hljs-comment">-- 按成绩降序排序</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">/*============== 分页 ================</span><br><span class="hljs-comment">语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span><br><span class="hljs-comment">好处 : (用户体验,网络传输,查询压力)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">推导:</span><br><span class="hljs-comment">   第一页 : limit 0,5</span><br><span class="hljs-comment">   第二页 : limit 5,5</span><br><span class="hljs-comment">   第三页 : limit 10,5</span><br><span class="hljs-comment">   ......</span><br><span class="hljs-comment">   第N页 : limit (pageNo-1)*pageSzie,pageSzie</span><br><span class="hljs-comment">   [pageNo:页码,pageSize:单页面显示条数]</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 每页显示5条数据</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span> , studentno<br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">5</span><br><br><span class="hljs-comment">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> sub.subjectno<br><span class="hljs-keyword">WHERE</span> subjectname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;JAVA第一学年&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentResult <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*============== 子查询 ================</span><br><span class="hljs-comment">什么是子查询?</span><br><span class="hljs-comment">   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句</span><br><span class="hljs-comment">   嵌套查询可由多个子查询组成,求解的方式是由里及外;</span><br><span class="hljs-comment">   子查询返回的结果一般都是集合,故而建议使用IN关键字;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span><br><span class="hljs-comment">-- 方法一:使用连接查询</span><br><span class="hljs-keyword">SELECT</span> studentno,r.subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> r.`SubjectNo`<span class="hljs-operator">=</span>sub.`SubjectNo`<br><span class="hljs-keyword">WHERE</span> subjectname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> studentresult <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 方法二:使用子查询(执行顺序:由里及外)</span><br><span class="hljs-keyword">SELECT</span> studentno,subjectno,StudentResult<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span> subjectno<span class="hljs-operator">=</span>(<br>   <span class="hljs-keyword">SELECT</span> subjectno <span class="hljs-keyword">FROM</span> `subject`<br>   <span class="hljs-keyword">WHERE</span> subjectname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数据库结构-1&#x27;</span><br>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> studentresult <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span><br><span class="hljs-comment">-- 方法一:使用连接查询</span><br><span class="hljs-keyword">SELECT</span> s.studentno,studentname<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r<br><span class="hljs-keyword">ON</span> s.`StudentNo` <span class="hljs-operator">=</span> r.`StudentNo`<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sub<br><span class="hljs-keyword">ON</span> sub.`SubjectNo` <span class="hljs-operator">=</span> r.`SubjectNo`<br><span class="hljs-keyword">WHERE</span> subjectname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;高等数学-2&#x27;</span> <span class="hljs-keyword">AND</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span><br><br><span class="hljs-comment">-- 方法二:使用连接查询+子查询</span><br><span class="hljs-comment">-- 分数不小于80分的学生的学号和姓名</span><br><span class="hljs-keyword">SELECT</span> r.studentno,studentname <span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r <span class="hljs-keyword">ON</span> s.`StudentNo`<span class="hljs-operator">=</span>r.`StudentNo`<br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span><br><br><span class="hljs-comment">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span><br><span class="hljs-keyword">SELECT</span> r.studentno,studentname <span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> r <span class="hljs-keyword">ON</span> s.`StudentNo`<span class="hljs-operator">=</span>r.`StudentNo`<br><span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> subjectno<span class="hljs-operator">=</span>(<br>   <span class="hljs-keyword">SELECT</span> subjectno <span class="hljs-keyword">FROM</span> `subject`<br>   <span class="hljs-keyword">WHERE</span> subjectname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;高等数学-2&#x27;</span><br>)<br><br><span class="hljs-comment">-- 方法三:使用子查询</span><br><span class="hljs-comment">-- 分步写简单sql语句,然后将其嵌套起来</span><br><span class="hljs-keyword">SELECT</span> studentno,studentname <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentno <span class="hljs-keyword">IN</span>(<br>   <span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">WHERE</span> StudentResult<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> subjectno<span class="hljs-operator">=</span>(<br>       <span class="hljs-keyword">SELECT</span> subjectno <span class="hljs-keyword">FROM</span> `subject` <span class="hljs-keyword">WHERE</span> subjectname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;高等数学-2&#x27;</span><br>  )<br>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">练习题目:</span><br><span class="hljs-comment">   查 C语言-1 的前5名学生的成绩信息(学号,姓名,分数)</span><br><span class="hljs-comment">   使用子查询,查询郭靖同学所在的年级名称</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-数据管理</title>
    <link href="/blog/2022/08/03/Mysql/mysql_3/"/>
    <url>/blog/2022/08/03/Mysql/mysql_3/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据管理"><a href="#MySQL数据管理" class="headerlink" title="MySQL数据管理"></a>MySQL数据管理</h1><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>外键概念<br>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。<br>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。<br><strong>外键作用</strong><br>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。<br>创建外键<br>建表时指定外键约束<br>– 创建外键的方式一 : 创建子表同时创建外键</p><p>– 年级表 (id\年级名称)<br>CREATE TABLE <code>grade</code> (<br><code>gradeid</code> INT(10) NOT NULL AUTO_INCREMENT COMMENT ‘年级ID’,<br><code>gradename</code> VARCHAR(50) NOT NULL COMMENT ‘年级名称’,<br>PRIMARY KEY (<code>gradeid</code>)<br>) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</p><p>– 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)<br>CREATE TABLE <code>student</code> (<br><code>studentno</code> INT(4) NOT NULL COMMENT ‘学号’,<br><code>studentname</code> VARCHAR(20) NOT NULL DEFAULT ‘匿名’ COMMENT ‘姓名’,<br><code>sex</code> TINYINT(1) DEFAULT ‘1’ COMMENT ‘性别’,<br><code>gradeid</code> INT(10) DEFAULT NULL COMMENT ‘年级’,<br><code>phoneNum</code> VARCHAR(50) NOT NULL COMMENT ‘手机’,<br><code>address</code> VARCHAR(255) DEFAULT NULL COMMENT ‘地址’,<br><code>borndate</code> DATETIME DEFAULT NULL COMMENT ‘生日’,<br><code>email</code> VARCHAR(50) DEFAULT NULL COMMENT ‘邮箱’,<br><code>idCard</code> VARCHAR(18) DEFAULT NULL COMMENT ‘身份证号’,<br>PRIMARY KEY (<code>studentno</code>),<br>KEY <code>FK_gradeid</code> (<code>gradeid</code>),<br>CONSTRAINT <code>FK_gradeid</code> FOREIGN KEY (<code>gradeid</code>) REFERENCES <code>grade</code> (<code>gradeid</code>)<br>) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8<br>建表后修改<br>– 创建外键方式二 : 创建子表完毕后,修改子表添加外键<br>ALTER TABLE <code>student</code><br>ADD CONSTRAINT <code>FK_gradeid</code> FOREIGN KEY (<code>gradeid</code>) REFERENCES <code>grade</code> (<code>gradeid</code>);<br>删除外键<br>操作：删除 grade 表，发现报错<br><img src="/blog/img/mysql/11.png" alt="11"><br><strong>注意</strong> : 删除具有主外键关系的表时 , 要先删子表 , 后删主表<br>– 删除外键<br>ALTER TABLE student DROP FOREIGN KEY FK_gradeid;<br>– 发现执行完上面的,索引还在,所以还要删除索引<br>– 注:这个索引是建立外键的时候默认生成的<br>ALTER TABLE student DROP INDEX FK_gradeid;</p><h2 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h2><p><strong>数据库意义</strong> ： 数据存储、数据管理<br><strong>管理数据库数据方法：</strong></p><ul><li>通过SQLyog等管理工具管理数据库数据</li><li>通过<strong>DML语句</strong>管理数据库数据</li></ul><p><strong>DML语言</strong> ：数据操作语言</p><ul><li>用于操作数据库对象中所包含的数据</li><li>包括 :<ul><li>INSERT (添加数据语句)</li><li>UPDATE (更新数据语句)</li><li>DELETE (删除数据语句)</li></ul></li></ul><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>INSERT命令<br><strong>语法：</strong><br>INSERT INTO 表名[(字段1,字段2,字段3,…)] VALUES(‘值1’,’值2’,’值3’)<br><strong>注意 :</strong></p><ul><li>字段或值之间用英文逗号隔开 .</li><li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li><li>可同时插入多条数据 , values 后用英文逗号隔开 .</li></ul><p>– 使用语句如何增加语句?<br>– 语法 : INSERT INTO 表名[(字段1,字段2,字段3,…)] VALUES(‘值1’,’值2’,’值3’)<br>INSERT INTO grade(gradename) VALUES (‘大一’);</p><p>– 主键自增,那能否省略呢?<br>INSERT INTO grade VALUES (‘大二’);</p><p>– 查询:INSERT INTO grade VALUE (‘大二’)错误代码：1136<br>Column count doesn&#96;t match value count at row 1</p><p>– 结论:’字段1,字段2…’该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.</p><p>– 一次插入多条数据<br>INSERT INTO grade(gradename) VALUES (‘大三’),(‘大四’);<br><strong>练习题目</strong><br>自己使用INSERT语句为课程表subject添加数据 . 使用到外键.</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>update命令<br>语法：<br>UPDATE 表名 SET column_name&#x3D;value [,column_name2&#x3D;value2,…] [WHERE condition];<br><strong>注意 :</strong></p><ul><li>column_name 为要更改的数据列</li><li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li><li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li></ul><p>where条件子句<br>可以简单的理解为 : 有条件地从表中筛选数据<br><img src="/blog/img/mysql/12.png" alt="12"><br>测试：<br>– 修改年级信息<br>UPDATE grade SET gradename &#x3D; ‘高中’ WHERE gradeid &#x3D; 1;</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>DELETE命令<br>语法：<br>DELETE FROM 表名 [WHERE condition];<br>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据<br>– 删除最后一个数据<br>DELETE FROM grade WHERE gradeid &#x3D; 5<br>TRUNCATE命令<br>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;<br>语法：<br>TRUNCATE [TABLE] table_name;</p><p>– 清空年级表<br>TRUNCATE grade<br><strong>注意：区别于DELETE命令</strong></p><ul><li>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</li><li>不同 :<ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li><li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li></ul></li></ul><p>测试：<br>– 创建一个测试表<br>CREATE TABLE <code>test</code> (<br><code>id</code> INT(4) NOT NULL AUTO_INCREMENT,<br><code>coll</code> VARCHAR(20) NOT NULL,<br>PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</p><p>– 插入几个测试数据<br>INSERT INTO test(coll) VALUES(‘row1’),(‘row2’),(‘row3’);</p><p>– 删除表数据(不带where条件的delete)<br>DELETE FROM test;<br>– 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</p><p>– 删除表数据(truncate)<br>TRUNCATE TABLE test;<br>– 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</p><p>– 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后<br>– InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)<br>– MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-数据库操作</title>
    <link href="/blog/2022/08/03/Mysql/mysql_2/"/>
    <url>/blog/2022/08/03/Mysql/mysql_2/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="结构化查询语句分类"><a href="#结构化查询语句分类" class="headerlink" title="结构化查询语句分类"></a>结构化查询语句分类</h2><p><img src="/blog/img/mysql/4.png" alt="4"></p><h2 id="数据库操作-1"><a href="#数据库操作-1" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>命令行操作数据库<br>创建数据库 : create database [if not exists] 数据库名;<br>删除数据库 : drop database [if exists] 数据库名;<br>查看数据库 : show databases;<br>使用数据库 : use 数据库名;<br>对比工具操作数据库<br><strong>学习方法：</strong></p><ul><li>对照SQLyog工具自动生成的语句学习</li><li>固定语法中的单词需要记忆</li><li><img src="/blog/img/mysql/5.png" alt="5"></li></ul><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>属于DDL的一种，语法 :<br>create table [if not exists] <code>表名</code>(<br>   ‘字段名1’ 列类型 [属性][索引][注释],<br>   ‘字段名2’ 列类型 [属性][索引][注释],<br>  #…<br>   ‘字段名n’ 列类型 [属性][索引][注释]<br>)[表类型][表字符集][注释];<br><strong>说明 :</strong> 反引号用于区别MySQL保留字与普通字符而引入的 (键盘esc下面的键).</p><h2 id="数据值和列类型"><a href="#数据值和列类型" class="headerlink" title="数据值和列类型"></a>数据值和列类型</h2><p>列类型 : 规定数据库中该列存放的数据类型<br>数值类型<br><img src="/blog/img/mysql/6.png" alt="6"><br>字符串类型<br><img src="/blog/img/mysql/7.png" alt="7"><br>日期和时间型数值类型<br><img src="/blog/img/mysql/8.png" alt="8"><br>NULL值</p><ul><li>理解为 “没有值” 或 “未知值”</li><li>不要用NULL进行算术运算 , 结果仍为NULL</li></ul><h2 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h2><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</li><li>通常用于设置<strong>主键</strong> , 且为整数类型</li><li>可定义起始值和步长<ul><li>当前表设置步长(AUTO_INCREMENT&#x3D;100) : 只影响当前表</li><li>SET @@auto_increment_increment&#x3D;5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li></ul><p>– 目标 : 创建一个school数据库<br>– 创建学生表(列,字段)<br>– 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email<br>– 创建表之前 , 一定要先选择数据库</p><p>CREATE TABLE IF NOT EXISTS <code>student</code> (<br><code>id</code> int(4) NOT NULL AUTO_INCREMENT COMMENT ‘学号’,<br><code>name</code> varchar(30) NOT NULL DEFAULT ‘匿名’ COMMENT ‘姓名’,<br><code>pwd</code> varchar(20) NOT NULL DEFAULT ‘123456’ COMMENT ‘密码’,<br><code>sex</code> varchar(2) NOT NULL DEFAULT ‘男’ COMMENT ‘性别’,<br><code>birthday</code> datetime DEFAULT NULL COMMENT ‘生日’,<br><code>address</code> varchar(100) DEFAULT NULL COMMENT ‘地址’,<br><code>email</code> varchar(50) DEFAULT NULL COMMENT ‘邮箱’,<br>PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</p><p>– 查看数据库的定义<br>SHOW CREATE DATABASE school;<br>– 查看数据表的定义<br>SHOW CREATE TABLE student;<br>– 显示表结构<br>DESC student;  – 设置严格检查模式(不能容错了)SET sql_mode&#x3D;’STRICT_TRANS_TABLES’;</p><h2 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h2><p>设置数据表的类型<br>CREATE TABLE 表名(<br>   – 省略一些代码<br>   – Mysql注释<br>   – 1. # 单行注释<br>   – 2. &#x2F;<em>…</em>&#x2F; 多行注释<br>)ENGINE &#x3D; MyISAM (or InnoDB)</p><p>– 查看mysql所支持的引擎类型 (表类型)<br>SHOW ENGINES;<br>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…<br>常见的 MyISAM 与 InnoDB 类型：<br><img src="/blog/img/mysql/9.png" alt="9"><br>经验 ( 适用场合 ) :</p><ul><li>适用 MyISAM : 节约空间及相应速度</li><li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li></ul><p>数据表的存储位置</p><ul><li>MySQL数据表以文件方式存放在磁盘中<ul><li>包括表文件 , 数据文件 , 以及数据库的选项文件</li><li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 .</li></ul></li><li>注意 :<ul><li><ul><li>. frm – 表结构定义文件</li></ul></li><li><ul><li>. MYD – 数据文件 ( data )</li></ul></li><li><ul><li>. MYI – 索引文件 ( index )</li></ul></li><li>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</li><li>MyISAM类型数据表对应三个文件 :<img src="/blog/img/mysql/10.png" alt="10"></li></ul></li></ul><p>设置数据表字符集<br>我们可为数据库,数据表,数据列设定不同的字符集，设定方法 :</p><ul><li>创建时通过命令来设置 , 如 : CREATE TABLE 表名()CHARSET &#x3D; utf8;</li><li>如无设定 , 则根据MySQL数据库配置文件 my.ini 中的参数设定</li></ul><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p>修改表 ( ALTER TABLE )<br>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名<br>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]<br>修改字段 :</p><ul><li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li><li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li></ul><p>删除字段 : ALTER TABLE 表名 DROP 字段名<br>删除数据表<br>语法：DROP TABLE [IF EXISTS] 表名</p><ul><li>IF EXISTS为可选 , 判断是否存在该数据表</li><li>如删除不存在的数据表会抛出错误</li></ul><p>其他</p><ol><li><p>可用反引号（&#96;）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</p></li><li><p>每个库目录存在一个保存当前数据库的选项文件db.opt。</p></li><li><p>注释：<br>  单行注释 # 注释内容<br>  多行注释 &#x2F;* 注释内容 *&#x2F;<br>  单行注释 – 注释内容       (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</p></li><li><p>模式通配符：<br>  _   任意单个字符<br>  %   任意多个字符，甚至包括零字符<br>  单引号需要进行转义 &#39;</p></li><li><p>CMD命令行内的语句结束符可以为 “;”, “\G”, “\g”，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</p></li><li><p>SQL对大小写不敏感 （关键字）</p></li><li><p>清除已有语句：\c</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-初识MySQL</title>
    <link href="/blog/2022/08/03/Mysql/mysql_1/"/>
    <url>/blog/2022/08/03/Mysql/mysql_1/</url>
    
    <content type="html"><![CDATA[<h1 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h1><h2 id="为什么学习数据库"><a href="#为什么学习数据库" class="headerlink" title="为什么学习数据库"></a>为什么学习数据库</h2><p>1、岗位技能需求<br>2、现在的世界,得数据者得天下<br>3、存储数据的方法<br>4、程序,网站中,大量数据如何长久保存?<br>5、<strong>数据库是几乎软件体系中最核心的一个存在。</strong></p><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>数据库 ( <strong>DataBase</strong> , 简称<strong>DB</strong> )<br><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”<br><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…<br><strong>数据库总览 :</strong></p><ul><li>关系型数据库 ( SQL )<ul><li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li><li>关系型数据库通过外键关联来建立表与表之间的关系</li></ul></li><li>非关系型数据库 ( NOSQL )<ul><li>Redis , MongoDB , …</li><li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li></ul></li></ul><h2 id="什么是DBMS"><a href="#什么是DBMS" class="headerlink" title="什么是DBMS"></a>什么是DBMS</h2><p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )<br>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据<br><img src="/blog/img/mysql/1.png" alt="1"></p><h2 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h2><p><img src="/blog/img/mysql/2.png" alt="2"><br><strong>概念 :</strong> 是现在<strong>流行</strong>的<strong>开源</strong>的,<strong>免费</strong>的 <strong>关系型</strong>数据库<br><strong>历史 :</strong> 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。<br><strong>特点 :</strong></p><ul><li>免费 , 开源数据库</li><li>小巧 , 功能齐全</li><li>使用便捷</li><li>可运行于Windows或Linux操作系统</li><li>可适用于中小型甚至大型网站应用</li></ul><p><strong>官网 :</strong><a href="https://www.mysql.com/">https://www.mysql.com/</a></p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p><strong>这里建议大家使用压缩版,安装快,方便.不复杂.</strong><br><strong>软件下载</strong><br>mysql5.7 64位下载地址:<br><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</a><br>电脑是64位的就下载使用64位版本的！</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>1、下载后得到zip压缩包.<br>2、解压到自己想要安装到的目录，本人解压到的是D:\Environment\mysql-5.7.19<br>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量<br>选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹<br>4、编辑 my.ini 文件 ,注意替换路径位置<br>[mysqld]<br>basedir&#x3D;D:\Program Files\mysql-5.7<br>datadir&#x3D;D:\Program Files\mysql-5.7\data<br>port&#x3D;3306<br>skip-grant-tables<br>5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql)<br>6、再输入 mysqld –initialize-insecure –user&#x3D;mysql 初始化数据文件<br>7、然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空）<br>8、进入界面后更改root密码<br>update mysql.user set authentication_string&#x3D;password(‘123456’) where user&#x3D;’root’ and Host &#x3D; ‘localhost’;<br>9、刷新权限<br>flush privileges;<br>10、修改 my.ini文件删除最后一句skip-grant-tables<br>11、重启mysql即可正常使用<br>net stop mysql<br>net start mysql<br>12、连接上测试出现以下结果就安装好了<br><img src="/blog/img/mysql/3.png" alt="3"><br>一步步去做 , 理论上是没有任何问题的 .</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>打开MySQL命令窗口</p><ul><li>在DOS命令行窗口进入 <strong>安装目录\mysql\bin</strong></li><li>可设置环境变量，设置了环境变量，可以在任意目录打开！</li></ul><p><strong>连接数据库语句 :</strong> mysql -h 服务器主机地址 -u 用户名 -p 用户密码<br>注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 !<br><strong>几个基本的数据库操作命令 :</strong><br>update user set password&#x3D;password(‘123456’)where user&#x3D;’root’; 修改密码<br>flush privileges; 刷新数据库<br>show databases; 显示所有数据库<br>use dbname；打开某个数据库<br>show tables; 显示数据库mysql中所有的表<br>describe user; 显示表mysql数据库中user表的列信息<br>create database name; 创建数据库<br>use databasename; 选择数据库</p><p>exit; 退出Mysql<br>? 命令关键词 : 寻求帮助<br>– 表示注释</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java异常</title>
    <link href="/blog/2022/08/03/Java/Java_6/"/>
    <url>/blog/2022/08/03/Java/Java_6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h1><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能满了。。。</li><li>软件程序在运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些例外情况（异常），让我们写的程序做出合理的处理，而不至于程序崩溃。</li><li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。</li><li>异常发生在程序运行期间，它影响了正常的程序执行流畅。</li></ul><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><ul><li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法遇见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性相反，运行时异常可以在编译时被忽略。</li><li>错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到。</li></ul><h2 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h2><ul><li>Java把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类。</li><li>在Java API中已经定义了许多异常类，这些异常类分为两大类，错误Error和异常Exception。</li></ul><p><img src="/blog/img/java/11.png" alt="11"></p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><ul><li>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</li><li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><ul><li>在Exception分支中有一个重要的子类RuntimeException（运行时异常） <ul><li>ArrayIndexOutOfBoundsException（数组下标越界）</li><li>NullPointerException（空指针异常）</li><li>ArithmeticException（算术异常）</li><li>MissingResourceException（丢失资源）</li><li>ClassNotFoundException（找不到类）</li><li>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理</li></ul></li><li>异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生</li><li>Error和Exception的区别 <ul><li>Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些错误时，Java虚拟机（JVM）一般会选择终止线程</li><li>Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常</li></ul></li></ul><h2 id="Java异常处理机制"><a href="#Java异常处理机制" class="headerlink" title="Java异常处理机制"></a>Java异常处理机制</h2><ul><li>抛出异常</li><li>捕获异常</li><li>异常处理的五个关键字 <ul><li>try</li><li>catch</li><li>finally</li><li>throw</li><li>throws</li></ul></li><li>demo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">// try监控区域</span><br>    System.out.println(a/b);<br>&#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123; <span class="hljs-comment">// catch(想要捕获的异常类型) 捕获异常</span><br>    System.out.println(<span class="hljs-string">&quot;程序出现异常，变量b不能为0&quot;</span>);<br>&#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">// 处理善后工作</span><br>    System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();<br><br>程序出现异常，变量b不能为<span class="hljs-number">0</span><br><span class="hljs-keyword">finally</span><br></code></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承Exception类即可。</li><li>在程序中使用自定义异常类，大体可分为以下几个步骤： <ol><li>创建自定义异常类</li><li>在方法中通过throw关键字抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理，否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</li><li>在出现异常方法的调用者中捕获并处理异常</li></ol></li></ul><h2 id="实际应用中的经验总结"><a href="#实际应用中的经验总结" class="headerlink" title="实际应用中的经验总结"></a>实际应用中的经验总结</h2><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li><li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被遗漏的异常</li><li>对于不确定的代码，也可以加上try-catch，处理潜在的异常</li><li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加finally语句块去释放占用的资源</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象</title>
    <link href="/blog/2022/08/03/Java/Java_5/"/>
    <url>/blog/2022/08/03/Java/Java_5/</url>
    
    <content type="html"><![CDATA[<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><h4 id="面向对象编程的本质就是"><a href="#面向对象编程的本质就是" class="headerlink" title="面向对象编程的本质就是:"></a>面向对象编程的本质就是:</h4><ul><li><strong>以类的方式组织代码，以对象的的形式组织(封装)数据。</strong></li><li>static方法是与类一同加载的，非静态方法是类实例化后才存在的。</li><li>所以静态方法无法调用非静态方法，因为此时不存在。</li></ul><p>类是一个模板，对象是一个具体实例。</p><h4 id="类与对象的创建"><a href="#类与对象的创建" class="headerlink" title="类与对象的创建"></a>类与对象的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.oop.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//类实例化后会返回一个自己的对象</span><br>        <span class="hljs-comment">//xiaoming对象是Student类的一个具体实例</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">//实例化学生类,创建对象xiaoming</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xh</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">//实例化学生类,创建对象xh</span><br>        xiaoming.name=<span class="hljs-string">&quot;小明&quot;</span>;<br>        xiaoming.age=<span class="hljs-number">20</span>;<br>        xiaoming.study();<br><br>        xh.name=<span class="hljs-string">&quot;小红&quot;</span>;<br>        xh.age=<span class="hljs-number">21</span>;<br>        xh.study();<br>    &#125;<br>&#125;<br>运行结果：<br>小明在学习！他的年龄为<span class="hljs-number">20</span><br>小红在学习！他的年龄为<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.oop.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//属性：字段</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;在学习！他的年龄为&quot;</span>+<span class="hljs-built_in">this</span>.age);<span class="hljs-comment">//this指这个类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><p>快捷键：alt+insert<br><strong>构造器:</strong><br>1.和类名相同<br>2.没有返回值<br><strong>作用:</strong></p><ol><li>使用new关键字本质在调用构造方法</li><li>初始化对象的值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.oop.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">//类与对象的创建</span><br>       <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//调用无参构造方法</span><br>       System.out.println(person.name);<br>       Person person1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;hsms&quot;</span>);<span class="hljs-comment">//调用有参构造方法</span><br>       System.out.println(person1.name);<br>   &#125;<br>&#125;<br>运行结果：<br>幻世蛮殇<br>hsms<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.oop.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=<span class="hljs-string">&quot;幻世蛮殇&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><strong>注意点:</strong><br>1.定义有参构造之后，如果想使用无参构造，就一定要显示无参构造方法。<br>2.一个类即使什么也不写，也会有构造方法。<br><img src="/blog/img/java/10.png" alt="10"></li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>1.属性:字段FieLd 成员变量<br>默认初始化:<br>数字:0.0 char : u0000<br>booLean : false 引用: null<br>修饰符属性类型属性名&#x3D;属性值!<br>2．对象的创建和使用</p><ul><li>必须使用new关键字创造对象，构造器Person kuangshen &#x3D; new Person()</li><li>对象的属性kuangshen. name</li><li>对象的方法kuangshen.sleep()</li></ul><p>3.类:<br>静态的属性属性 动态的行为方法。</p><h2 id="面向过程-amp-面向对象"><a href="#面向过程-amp-面向对象" class="headerlink" title="面向过程&amp;面向对象"></a>面向过程&amp;面向对象</h2><ul><li><p>面向过程思想 </p><ul><li>步骤清晰简单，第一步做什么，第二步做什么。。。</li><li>面对过程适合处理一些较为简单的问题</li></ul></li><li><p>面向对象思想 </p><ul><li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考，最后，才对某个分类下的细节进行面向过程的思索</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题</li></ul></li><li><p>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</p></li></ul><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><ul><li><p>面向对象编程（Object-Oriented Programming， OOP）</p></li><li><p>面向对象编程的本质就是：以类的方式组织代码，以对象的组织（封装）数据</p></li><li><p>抽象</p></li><li><p>三大特性： </p><ul><li>封装</li><li>继承</li><li>多态</li></ul></li><li><p>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</p></li><li><p>从代码运行角度考虑是先有类后有对象。类是对象的模板</p></li></ul><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ul><li><p>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物 </p><ul><li>动物、植物、手机、电脑…</li><li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li></ul></li><li><p>对象是抽象概念的具体实例 </p><ul><li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体实例</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念</li></ul></li></ul><h2 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h2><ul><li>使用new关键字创建对象</li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进项默认的初始化以及对类中构造器的调用</li><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的，并且构造器有一下两个特点 <ul><li>1、必须和类的名字相同</li><li>2、必须没有返回类型，也不能写void</li></ul></li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><p>该露的露，该藏的藏 </p><ul><li>我们程序设计要追求“高内聚，低耦合”，高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合就是暴露少量方法给外部使用</li></ul></li><li><p>封装（数据的隐藏） </p><ul><li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</li></ul></li><li><p>属性私有：get&#x2F;set</p></li><li><p>优点 </p><ol><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>增加系统的可维护性</li></ol></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</p></li><li><p>extends的意思是“扩展”，子类是父类的扩展</p></li><li><p>Java中类只有单继承，没有多继承</p></li><li><p>继承是类和类之间的一种关系，除此之外，类和类之前的关系还有依赖、组合、聚合等</p></li><li><p>继承关系的两个类，一个为子类（派生类），一个为父类（基类），子类继承父类，使用关键字extends来表示</p></li><li><p>子类和父类之间，从意义上讲应该具有“is a”的关系</p></li><li><p>object类</p></li><li><p>super </p><ul><li><p>注意点 </p><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或构造方法中</li><li>super和this不能同时调用构造方法</li></ol></li><li><p>super和this的区别 </p><ol><li><p>代表的对象不同 </p><ul><li>this：本身调用者这个对象</li><li>super：代表父类对象的引用</li></ul></li><li><p>前提 </p><ul><li>没有继承也可以使用</li><li>只能在继承条件下才可以使用</li></ul></li><li><p>构造方法 </p><ul><li>this()：本类的构造</li><li>super()：父类的构造</li></ul></li></ol></li></ul></li><li><p>方法重写：需要有继承关系，子类重写父类的方法 </p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大，不能缩小  public&gt;protected&gt;default&gt;private</li><li>抛出的异常：范围可以被缩小，不能扩大</li><li>子类的方法和父类必须要一致，方法体不同</li></ol></li><li><p>为什么要重写 </p><ul><li>父类的功能，子类不一定需要，或者不一定满足</li></ul></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式</p></li><li><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</p></li><li><p>多态存在的条件 </p><ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li><li><p>注意：多态是方法的多态，属性没有多态性</p></li><li><p>instanceof</p></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类</li><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类</li><li>抽象类，不能使用new关键字来创建对象，它是用来让子类继承的</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的</li><li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>普通类：只有具体实现 </li><li>抽象类：具体实现和规范（抽象方法）都有 </li><li>接口：只有规范，自己无法写方法 </li><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…则必须能…”的思想。如果你是天使，则必须能飞。如果你是汽车，则必须能跑 </li><li>接口的本质是契约，就像我们人间的法律一样。制定后大家都遵守 </li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。 </li><li>声明类的关键字是class，声明接口的关键字是interface</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了 </li><li>成员内部类 </li><li>静态内部类 </li><li>局部内部类 </li><li>匿名内部类</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数组</title>
    <link href="/blog/2022/08/03/Java/Java_4/"/>
    <url>/blog/2022/08/03/Java/Java_4/</url>
    
    <content type="html"><![CDATA[<h1 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h1><h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><ul><li>数组是相同类型数据的有序集合</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次数排列组合而成</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们</li></ul><h2 id="数组声明创建"><a href="#数组声明创建" class="headerlink" title="数组声明创建"></a>数组声明创建</h2><ul><li>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar; <span class="hljs-comment">// 首选的方法</span><br>或<br>dataType arrayRefVar[]; <span class="hljs-comment">// 效果相同，但不是首选方法</span><br></code></pre></td></tr></table></figure><ul><li>Java语言使用new操作符来创建数组，语法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];<br><br><span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><ul><li>数组的元素是通过索引访问的，数组索引从0开始。</li><li>获取数组长度：arrays.length</li></ul><h2 id="初始化状态"><a href="#初始化状态" class="headerlink" title="初始化状态"></a>初始化状态</h2><ul><li>静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">3</span> &#125;;<br>Man[] mans = &#123; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>) &#125;<br></code></pre></td></tr></table></figure><ul><li>动态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>a[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><ul><li>数组的默认初始化 <ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方法被隐式初始化。</li></ul></li></ul><h2 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h2><ul><li>其长度是确定的。数组一但被创建，它的大小就是不可以改变的</li><li>其元素必须的相同类型，不允许出现混合类型</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型</li><li>数组变量属于引用类型，数组也可以看出对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的</li></ul><h2 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h2><ul><li>下标的合法区间：[0, length - 1]，如果越界就回报错 </li><li>ArrayIndexOutOfBoundsException：数组下标越界异常 </li><li>小结 <ul><li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li><li>数组也是对象。数组元素相当于对象的成员变量</li><li>数组长度是确定的，不可变的。如果越界，就会报错</li></ul></li></ul><h2 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h2><ul><li>For-Each循环</li><li>数组作方法入参</li><li>数组作返回值</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><ul><li>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一堆数组，其每一个元素都是一个一维数组</li><li>二维数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul><li>数组的工具类java.util.Arrays</li><li>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作</li><li>查看JDK帮助文档</li><li>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而“不用”使用对象来调用（注意：是“不用” 而不是“不能”）</li><li>具有以下常用功能： <ul><li>给数组赋值：通过fill方法</li><li>对数组排序：通过sort方法，按升序</li><li>比较数组：通过equals方法比较数组中元素值是否相等</li><li>查看数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作</li></ul></li></ul><h2 id="冒号排序"><a href="#冒号排序" class="headerlink" title="冒号排序"></a>冒号排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">2</span>,<span class="hljs-number">456</span>,<span class="hljs-number">234</span>,<span class="hljs-number">6</span>,<span class="hljs-number">19</span>,<span class="hljs-number">134</span>,<span class="hljs-number">98</span>,<span class="hljs-number">321</span>,<span class="hljs-number">468</span>,<span class="hljs-number">312</span>,<span class="hljs-number">4</span>,<span class="hljs-number">61</span>,<span class="hljs-number">34</span>,<span class="hljs-number">683</span>,<span class="hljs-number">21</span>,<span class="hljs-number">666</span> &#125;;<br>        System.out.println(Arrays.toString(sort(arr)));<br>    &#125;<br><br>    <span class="hljs-comment">// 冒泡排序</span><br>    <span class="hljs-comment">// 1.比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span><br>    <span class="hljs-comment">// 2.每一次比较，都会产生处一个最大或者最小的数组</span><br>    <span class="hljs-comment">// 3.下一轮则可以少一次排序</span><br>    <span class="hljs-comment">// 4.依次循环，直到结束</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span>[] array) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array[j+<span class="hljs-number">1</span>] &lt; array[j]) &#123;<br>                    temp = array[j];<br>                    array[j] = array[j+<span class="hljs-number">1</span>];<br>                    array[j+<span class="hljs-number">1</span>] = temp;<br>                    flag = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><ul><li>当一个数组中大部分元素为0，或者为同一数组时，可以使用稀疏数组来保存该数组</li><li>稀疏数组的处理方式是： <ul><li>记录数组一共有几行几列，有多少个不同值</li><li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDemo8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//黑棋 1；白棋 2 没有棋子 0</span><br>        <span class="hljs-type">int</span>[][] arrays=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<span class="hljs-comment">//初始11*11的原始数组</span><br>        arrays[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br>        arrays[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">2</span>;<br>        System.out.println(<span class="hljs-string">&quot;原始数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] array : arrays) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array) &#123;<br>                System.out.print(i+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <span class="hljs-comment">//稀疏数组</span><br>        <span class="hljs-comment">//1.首先获取数组中的有效值</span><br>        <span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-comment">//有效值的个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;<span class="hljs-number">11</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arrays[i][j]!=<span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;有效值的个数：&quot;</span>+sum);<br>        <span class="hljs-comment">//2.定义稀疏数组</span><br>        <span class="hljs-comment">//  行 为有效个数+1：指原始数组信息的那一行；列 为固定值：为行、列、值这3个；</span><br>        <span class="hljs-type">int</span>[][] array1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        <span class="hljs-comment">//3.定义稀疏数组第一行</span><br>        array1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<br>        array1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">11</span>;<br>        array1[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=sum;<br>        <span class="hljs-comment">//4.遍历二维数组，将非零值存放到稀疏数组</span><br>        <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;arrays.length ; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arrays[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arrays[i][j]!=<span class="hljs-number">0</span>)&#123;<br>                    count++;<span class="hljs-comment">//count作用控制稀疏数组的行数</span><br>                    array1[count][<span class="hljs-number">0</span>]=i;<span class="hljs-comment">//i为有效值在初始数组中的行数</span><br>                    array1[count][<span class="hljs-number">1</span>]=j;<span class="hljs-comment">//j为有效值在初始数组的列数</span><br>                    array1[count][<span class="hljs-number">2</span>]=arrays[i][j];<span class="hljs-comment">//有效值</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;稀疏数组为：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array1.length ; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;array1[i].length; j++) &#123;<br>                System.out.print(array1[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;还原：&quot;</span>);<br>        <span class="hljs-comment">//1.定义还原数组</span><br>        <span class="hljs-type">int</span>[][] array2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][array1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-comment">//2.给其中元素还原它的值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; array1.length; i++) &#123;<br>            array2[array1[i][<span class="hljs-number">0</span>]][array1[i][<span class="hljs-number">1</span>]]=array1[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;输出还原数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : array2) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) &#123;<br>                System.out.print(anInt+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br><br>运行结果：<br>原始数组：<br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">2</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br>有效值的个数：<span class="hljs-number">2</span><br>稀疏数组为：<br><span class="hljs-number">11</span><span class="hljs-number">11</span><span class="hljs-number">2</span><br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">1</span><br><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">2</span><br>==========<br>还原：<br>输出还原数组：<br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">1</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">2</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="Java内存"><a href="#Java内存" class="headerlink" title="Java内存"></a>Java内存</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul><li>存放new的对象和数组</li><li>可以被所有的线程共享，不会存放别的对象引用</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>存放基本变量类型（会包含这个基本类型的具体数值）</li><li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li>可以被所有的线程共享</li><li>包含了所有的class和static变量</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java方法</title>
    <link href="/blog/2022/08/03/Java/Java_3/"/>
    <url>/blog/2022/08/03/Java/Java_3/</url>
    
    <content type="html"><![CDATA[<h1 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h1><h2 id="何谓方法"><a href="#何谓方法" class="headerlink" title="何谓方法"></a>何谓方法</h2><ul><li><p>Java方法是语句的集合，他们在一起执行一个功能 </p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li><li><p>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成1个功能，这样利于我们后期的扩展。</p></li></ul><h2 id="方法的定义与调用"><a href="#方法的定义与调用" class="headerlink" title="方法的定义与调用"></a>方法的定义与调用</h2><ul><li>Java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法： <ul><li>方法包含一个方法头和一个方法体。 <ul><li><p>修饰符：修饰符是可选的，告诉编译器如何调用该方法，定义了该方法的访问类型。</p></li><li><p>返回值类型：方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValue Type是关键字void.</p></li><li><p>方法名：是方法的实际名称。方法名和参数表共同构成方法签名。</p></li><li><p>参数类型：参数像是一个占位符。当方法被调用时,传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。 </p><ul><li>形式参数：在方法被调用时用于接收外界输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li><p>方法体：方法体包含具体的语句,定义该方法的功能。</p></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 返回值类型 方法名(参数类型 参数名) &#123;<br>  ...<br>  方法体<br>  ...<br>  <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p></li><li><p>方法的重载的规则： </p><ul><li>方法名称必须相同。</li><li>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul></li><li><p>实现理论： </p><ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/11 17:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">1000</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">10.1</span>, <span class="hljs-number">20.1</span>);<br>        System.out.println(num);<br><br>        System.out.println(num2);<br>    &#125;<br><br>    <span class="hljs-comment">// 比大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (num1 == num2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;num1 = num2&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (num1 &gt; num2) &#123;<br>            result = num1;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result = num2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 比大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> num1, <span class="hljs-type">double</span> num2)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (num1 == num2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;num1 = num2&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (num1 &gt; num2) &#123;<br>            result = num1;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result = num2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><ul><li>有时候你希望运行一个程序的时候再给它消息。这要靠传递命令行参数给main()函数实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/11 18:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span> + i + <span class="hljs-string">&quot;]&quot;</span> + args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blog/img/java/8.png" alt="8"></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后加一个省略号(…)。</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/11 18:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo04</span> <span class="hljs-variable">demo04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo04</span>();<br>        demo04.test(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span>... i)</span> &#123;<br>        System.out.println(i[<span class="hljs-number">0</span>]);<br>        System.out.println(i[<span class="hljs-number">1</span>]);<br>        System.out.println(i[<span class="hljs-number">2</span>]);<br>        System.out.println(i[<span class="hljs-number">3</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blog/img/java/9.png" alt="9"></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>递归就是自己调用自己。</li><li>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</li><li>递归结构包括两个部分： <ul><li>递归头：什么时候不调用自身方法。如果没有头,将陷入死循环。</li><li>递归体：什么时候需要调用自身方法。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/11 18:42</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-comment">// 阶乘</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(f(<span class="hljs-number">5</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 1!  1</span><br>    <span class="hljs-comment">// 2!  2*1</span><br>    <span class="hljs-comment">// 5!  5*4*3*2*1</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> n * f(n - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java流程控制</title>
    <link href="/blog/2022/08/03/Java/Java_2/"/>
    <url>/blog/2022/08/03/Java/Java_2/</url>
    
    <content type="html"><![CDATA[<h1 id="Java流程控制"><a href="#Java流程控制" class="headerlink" title="Java流程控制"></a>Java流程控制</h1><h2 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h2><p>Java.util.Scanner是Java5的新特征，我们可以通过Scanner类来获取用户的输入</p><ul><li>基本语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)<br></code></pre></td></tr></table></figure><ul><li>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据 <ul><li>next() <ul><li>一定要读取到有效的字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</li><li>next()不能得到带有空格的字符串</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> scanner;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/8 20:31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个扫描器对象，用于接收键盘数据</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;使用next方式接收：&quot;</span>);<br><br>        <span class="hljs-comment">// 判断用户有没有输入字符串</span><br>        <span class="hljs-keyword">if</span>(scanner.hasNext()) &#123;<br>            <span class="hljs-comment">// 使用next方式接收</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.next();<br>            System.out.println(<span class="hljs-string">&quot;输出的内容为&quot;</span> + str);<br><br>        &#125;<br><br>        <span class="hljs-comment">// 凡是属于IO流的类如果不关闭会一直占用资源，要养成良好习惯用完就关掉</span><br>        scanner.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> <img src="/blog/img/java/4.png" alt="4"></p><ul><li>nextLine() <ul><li>以Enter作为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符</li><li>可以获得空白</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> scanner;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/8 20:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;使用nextLine接收：&quot;</span>);<br><br>        <span class="hljs-comment">// if(scanner.hasNextLine()) &#123;  // 可以不用判断</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br>            System.out.println(<span class="hljs-string">&quot;输出的内容为：&quot;</span> + str);<br>        <span class="hljs-comment">// &#125;</span><br><br>        scanner.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <img src="/blog/img/java/5.png" alt="5"></p><ul><li>练习</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> scanner;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/8 21:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 我们可以输入多个数字，并求其总和与平均数，没输入一个数字用回车确认，通过输入非数字来结束输入并输出结果</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 定义和</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 定义次数 输入多少个数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 通过循环判断是否还有输入，并在里面对每一次进行求和和统计</span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextDouble())&#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br>            m++;<br>            sum = sum + x;<br>            System.out.println(<span class="hljs-string">&quot;你输入了第&quot;</span>+m+<span class="hljs-string">&quot;个数据，当前结果为sum=&quot;</span>+ sum);<br><br>        &#125;<br><br>        System.out.println(m+ <span class="hljs-string">&quot;个数的和为&quot;</span> + sum);<br>        System.out.println(m+<span class="hljs-string">&quot;个数的平均值为&quot;</span>+ (sum / m));<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blog/img/java/6.png" alt="6"></p><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul><li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行</li><li>顺序结构是最简单的算法结构</li><li>语句与语句之间，框与框之间是按照从上到下的顺序进行的，它是由若干个依次执行的处理步骤组成的，是任何一个算法都离不开的一种基本算法结构</li></ul><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ul><li>if单选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> () &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>if双选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> () &#123;<br>  <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>if多选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> () &#123;<br>  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> () &#123;<br>  <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>嵌套的if结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> () &#123;<br>  <span class="hljs-keyword">if</span> () &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>switch多选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expressin) &#123;  <span class="hljs-comment">// 不写break会case穿透</span><br>  <span class="hljs-keyword">case</span> value:<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> value:<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">default</span>:<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul><li>while循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式) &#123;<br>  <span class="hljs-comment">// 循环内容</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>do…while循环 <ul><li>对于while语句而言，如果不满足条件，不能进入循环</li><li>do…while至少会执行一次</li><li>do…while和while的区别 <ul><li>while是先判断后执行，do…while是先执行后判断</li><li>do…while总是保证循环体会被至少执行一次</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>  <span class="hljs-comment">// 代码语句</span><br>&#125; <span class="hljs-keyword">while</span> (布尔表达式);<br></code></pre></td></tr></table></figure><ul><li>for循环 <ul><li>for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构</li><li>for循环执行的次数是在执行前就确定的</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化; 布尔表达式; 更新) &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// println输出完会换行</span><br>System.out.print(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// print输出完不会换行</span><br></code></pre></td></tr></table></figure><p>九九乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/8 21:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(j + <span class="hljs-string">&quot;*&quot;</span> + i + <span class="hljs-string">&quot;=&quot;</span> + (i * j) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blog/img/java/7.png" alt="7"></p><ul><li>在Java中引入了一种用于数组的增强型for循环 <ul><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等</li><li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(声明语句 : 表达式)<br>&#123;<br>  <span class="hljs-comment">// 代码句子</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForDemo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] numbers = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;; <span class="hljs-comment">//定义一个数组</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>            System.out.println(numbers[i]);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=====================================&quot;</span>);<br><br>        <span class="hljs-comment">// 遍历数组的元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x:numbers) &#123; <br>            System.out.println(x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break&amp;continue"></a>break&amp;continue</h2><ul><li>break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强制退出循环，不执行循环中剩余的语句。（break语句也在switch语句中使用）</li><li>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判断</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li>打印三角形</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: hanmingda</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/6/11 17:02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 打印三角形 n行</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> n; j &gt;= i; j--) &#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/blog/2022/08/03/Java/Java_1/"/>
    <url>/blog/2022/08/03/Java/Java_1/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>1、新建code文件夹存放代码<br>2、新建一个java文件</p><ul><li>文件后缀名为java</li><li>Hello.java</li></ul><p>3、编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、编译javac java文件，会生成一个class文件<br>5、运行class文件，java class文件</p><h2 id="Java程序运行机制"><a href="#Java程序运行机制" class="headerlink" title="Java程序运行机制"></a>Java程序运行机制</h2><p><img src="/blog/img/java/1.png" alt="Java程序运行机制"></p><h2 id="IDEA快捷输入"><a href="#IDEA快捷输入" class="headerlink" title="IDEA快捷输入"></a>IDEA快捷输入</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">psvm  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;&#125;<br>sout  <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>();<br></code></pre></td></tr></table></figure><h2 id="注释、标识符、关键字"><a href="#注释、标识符、关键字" class="headerlink" title="注释、标识符、关键字"></a>注释、标识符、关键字</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单行注释</span><br></code></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 多行注释 */</span><br></code></pre></td></tr></table></figure></li><li><p>文档注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 文档注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。<br><img src="/blog/img/java/2.png" alt="关键字"></p><h4 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h4><ul><li>所有的标识符都以字母、$、_开始</li><li>首字符之后可以是字符、$、_或数字的任意组合</li><li>不能使用关键字作为变量名或方法名</li><li>标识符是大小写敏感的</li><li>可以使用中文，但是不好，不建议用拼音，很low</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java是一种强类型语言：要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><ul><li><p>整数类型 </p><ul><li>byte  占1字节  范围：-128-127</li><li>short  占2字节  范围：-32768-32767</li><li>int  占4字节</li><li>long  占8字节<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 整数扩展</span><br>        <span class="hljs-comment">// 进制</span><br>        <span class="hljs-comment">// 二进制 0b</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b10</span>;<br>        <span class="hljs-comment">// 八进制 0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">010</span>;<br>        <span class="hljs-comment">// 十进制</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 十六进制 0x</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x10</span>;<br><br>        System.out.println(i);<br>        System.out.println(i2);<br>        System.out.println(i3);<br>        System.out.println(i4);<br>        System.out.println(<span class="hljs-string">&quot;=============================================================&quot;</span>);<br><br>        <span class="hljs-comment">// =============================================================</span><br><br>        <span class="hljs-comment">// 浮点数扩展</span><br>        <span class="hljs-comment">// BigDecimal 数学工具类</span><br>        <span class="hljs-comment">// 最好完全使用浮点数进行比较</span><br>        <span class="hljs-comment">// float  有限  离散  舍入误差  大约  接近但不等于</span><br>        <span class="hljs-comment">// double</span><br><br>        <span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1f</span>; <span class="hljs-comment">// 0.1</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>/<span class="hljs-number">10</span>; <span class="hljs-comment">// 0.1</span><br><br>        System.out.println(f==d); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">121312313212313f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> f2 + <span class="hljs-number">1</span>;<br><br>        System.out.println(f2 == f3); <span class="hljs-comment">// true</span><br><br>        System.out.println(<span class="hljs-string">&quot;=============================================================&quot;</span>);<br><br>        <span class="hljs-comment">// =============================================================</span><br>        <span class="hljs-comment">// 字符扩展</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中&#x27;</span>;<br><br>        System.out.println(c1);<br>        System.out.println((<span class="hljs-type">int</span>) c1); <span class="hljs-comment">// (int) 强制转换</span><br>        System.out.println(c2);<br>        System.out.println((<span class="hljs-type">int</span>) c2);<br><br>        <span class="hljs-comment">// 所有的字符本质还是数字</span><br>        <span class="hljs-comment">// 编码 Unicode</span><br><br><br>        <span class="hljs-comment">// 转义字符</span><br>        <span class="hljs-comment">// \t 制表符</span><br>        <span class="hljs-comment">// \n 换行符</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>浮点类型 </p><ul><li>float  占4字节</li><li>double  占8字节</li></ul></li><li><p>字符类型 </p><ul><li>char  占2字节</li></ul></li></ul><h4 id="boolean类型（占1位）"><a href="#boolean类型（占1位）" class="headerlink" title="boolean类型（占1位）"></a>boolean类型（占1位）</h4><ul><li>true</li><li>false</li></ul><h3 id="引用类型（待补充）"><a href="#引用类型（待补充）" class="headerlink" title="引用类型（待补充）"></a>引用类型（待补充）</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>Java是强类型语言，所以进行某些运算时，需要用到类型转换</li></ul><p><img src="/blog/img/java/3.png" alt="类型转换"></p><ul><li>运算中，不同类型的数据先转化为同一类型，后进行运算</li><li>强制类型转换 高–&gt;低</li><li>自动类型转换 低–&gt;高<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) i;<br><br>        <span class="hljs-comment">// 强制转换 (类型)变量名  高--&gt;低</span><br>        <span class="hljs-comment">// 自动转换  低--&gt;高</span><br><br>        System.out.println(i); <span class="hljs-comment">// 128</span><br>        System.out.println(b); <span class="hljs-comment">// -128  最大为127  内存溢出</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        注意点：</span><br><span class="hljs-comment">        1、不能对布尔值进行转换</span><br><span class="hljs-comment">        2、不能把对象类型转为不相干的类型</span><br><span class="hljs-comment">        3、在把高容量转为低容量时，强制转换</span><br><span class="hljs-comment">        4、转换的时候可能存在内存溢出、精度问题</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Boolean转为数字"><a href="#Boolean转为数字" class="headerlink" title="Boolean转为数字"></a>Boolean转为数字</h3><ul><li>三目运算<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">myInt</span> <span class="hljs-operator">=</span> myBoolean ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br> <span class="hljs-type">boolean</span> <span class="hljs-variable">myBoolean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-type">int</span> <span class="hljs-variable">myInt</span> <span class="hljs-operator">=</span> myBoolean ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br> System.out.println(myInt); <span class="hljs-comment">//输出1</span><br> myBoolean = <span class="hljs-literal">false</span>;<br> myInt = myBoolean ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br> System.out.println(myInt);  <span class="hljs-comment">//输出0</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="数字转化为Boolean——0-为-false；-非-0-为true"><a href="#数字转化为Boolean——0-为-false；-非-0-为true" class="headerlink" title="数字转化为Boolean——0 为 false； 非 0 为true"></a>数字转化为Boolean——0 为 false； 非 0 为true</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一种 </span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">myBoolean</span> <span class="hljs-operator">=</span> myInt != <span class="hljs-number">0</span>;<br><br> <span class="hljs-type">int</span> myInt= <span class="hljs-number">2</span>;<br> <span class="hljs-type">boolean</span> <span class="hljs-variable">myBoolean</span> <span class="hljs-operator">=</span> myInt!= <span class="hljs-number">0</span>;<br> System.out.println(myBoolean); <span class="hljs-comment">//输出为true</span><br> myInt= <span class="hljs-number">0</span>;<br> myBoolean = myInt!= <span class="hljs-number">0</span>;<br> System.out.println(myBoolean); <span class="hljs-comment">//输出为false</span><br><br><br><span class="hljs-comment">// 第二种</span><br> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//带转化int整数</span><br> <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (a==<span class="hljs-number">0</span>)?<span class="hljs-literal">false</span>:<span class="hljs-literal">true</span>; <span class="hljs-comment">//转化语句</span><br><br> <span class="hljs-type">int</span> <span class="hljs-variable">myInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//被转化int整数</span><br> <span class="hljs-type">boolean</span> <span class="hljs-variable">myBoolean</span> <span class="hljs-operator">=</span> (myInt == <span class="hljs-number">0</span>) ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>; <span class="hljs-comment">//转化语句</span><br> System.out.println(myBoolean); <span class="hljs-comment">//输出为true</span><br> myInt = <span class="hljs-number">0</span>; <span class="hljs-comment">//被转化int整数</span><br> myBoolean = (myInt == <span class="hljs-number">0</span>) ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>; <span class="hljs-comment">//转化语句</span><br> System.out.println(myBoolean); <span class="hljs-comment">//输出为true</span><br><br></code></pre></td></tr></table></figure><h2 id="变量、常量"><a href="#变量、常量" class="headerlink" title="变量、常量"></a>变量、常量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明类型</li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域</li><li>注意事项 <ul><li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li></ul></li></ul><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><ul><li><p>类变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li><li><p>实例变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>常量(Constant)：初始化之后不能再改变值。</li><li>常量名一半使用大写字符。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 修饰符</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>所有变量、方法、类名：见名知意</li><li>类成员变量：首字母小写，驼峰</li><li>局部变量：首字母小写，驼峰</li><li>常量：大写字母和下划线</li><li>类名：首字母大写，驼峰</li><li>方法名：首字母小写，驼峰</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>算数运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">+,-,*,/,%,++,--<br></code></pre></td></tr></table></figure></li><li><p>赋值运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">=<br></code></pre></td></tr></table></figure></li><li><p>关系运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;,&lt;,&gt;=,&lt;=,==,!=<span class="hljs-keyword">instanceof</span><br></code></pre></td></tr></table></figure></li><li><p>逻辑运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&amp;&amp;,||,!<br></code></pre></td></tr></table></figure></li><li><p>位运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&amp;,|,^,~,&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;<br></code></pre></td></tr></table></figure></li><li><p>条件运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">?,:<br></code></pre></td></tr></table></figure></li><li><p>扩展赋值运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">+=,-=,*=,/=,%=<br></code></pre></td></tr></table></figure></li></ul><h2 id="包机制、JavaDoc"><a href="#包机制、JavaDoc" class="headerlink" title="包机制、JavaDoc"></a>包机制、JavaDoc</h2><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><ul><li><p>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间</p></li><li><p>包语句的语法格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pkg1[. pkg2[. pkg3]]<br></code></pre></td></tr></table></figure></li><li><p>一般使用公司域名倒置作为包名</p></li><li><p>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用”import”语句可以完成此功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> package1[.package2].(classname|*)<br></code></pre></td></tr></table></figure></li></ul><h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><ul><li>javadoc命令是用来生成自己的API文档的</li><li>参数信息 <ul><li><a href="/author">@author </a> 作者名 </li><li><a href="/version">@version </a> 版本号 </li><li><a href="/since">@since </a> 指明需要最早使用的jdk版本 </li><li><a href="/param">@param </a> 参数名 </li><li><a href="/return">@return </a> 返回值情况 </li><li><a href="/throws">@throws </a> 异常抛出情况</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/blog/2022/08/03/other/webpack/"/>
    <url>/blog/2022/08/03/other/webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="一、什么是webpack"><a href="#一、什么是webpack" class="headerlink" title="一、什么是webpack"></a>一、什么是webpack</h2><ul><li>Webpack是一个模块打包器(bundler)。</li><li>在Webpack看来, 前端的所有资源文件(js&#x2F;json&#x2F;css&#x2F;img&#x2F;less&#x2F;…)都会作为模块处理。</li><li>它将根据模块的依赖关系进行静态分析，生成对应的静态资源。</li></ul><h2 id="二、webpack核心概念"><a href="#二、webpack核心概念" class="headerlink" title="二、webpack核心概念"></a>二、webpack核心概念</h2><p><strong>1、Entry（入口）：</strong> 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p><p><strong>2、Output（出口）：</strong> 告诉 webpack 在哪里输出它所创建的结果文件，以及如何命名这些文件，默认值为.&#x2F;dist。</p><p><strong>3、Loader（模块转换器）：</strong> 将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><p><strong>4、Plugins（插件）：</strong> 在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</p><p><strong>5、Module（模块）：</strong> 开发者将程序分解成离散功能块，并称之为模块_，_在webpack里一个模块对应着一个文件，webpack会从配置的 Entry 开始递归找出所有依赖的模块。</p><h2 id="三、webpack执行流程"><a href="#三、webpack执行流程" class="headerlink" title="三、webpack执行流程"></a>三、webpack执行流程</h2><p>webpack启动后会在<code>entry</code>里配置的<code>module</code>开始递归解析<code>entry</code>所依赖的所有<code>module</code>，每找到一个<code>module</code>, 就会根据配置的<code>loader</code>去找相应的转换规则，对<code>module</code>进行转换后在解析当前<code>module</code>所依赖的<code>module</code>，这些模块会以<code>entry</code>为分组，一个<code>entry</code>和所有相依赖的<code>module</code>也就是一个<code>chunk</code>，最后<code>webpack</code>会把所有<code>chunk</code>转换成文件输出，在整个流程中webpack会在恰当的时机执行<code>plugin</code>的逻辑。</p><h2 id="四、webpack简单打包案例"><a href="#四、webpack简单打包案例" class="headerlink" title="四、webpack简单打包案例"></a>四、webpack简单打包案例</h2><h3 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h3><p>新建一个空文件夹<code>webpack_demo</code>用于创建项目，使用终端进入文件夹， 使用<code>npm init -y</code>命令初始化项目：<br><img src="/blog/img/other/webpack/2.png" alt="2"></p><h3 id="4-2-安装webpack"><a href="#4-2-安装webpack" class="headerlink" title="4.2 安装webpack"></a>4.2 安装webpack</h3><p>接下来在命令行中输入以下命令安装webpack，如果你想一步到位的话，就把全局webpack和本地项目webpack全都先装了，因为后面一些模块会用到。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install webpack <span class="hljs-literal">--global</span>                // 安装全局webpack命令<br>npm install webpack webpack<span class="hljs-literal">-cli</span> <span class="hljs-literal">--save-dev</span>  // 安装本地项目模块<br><br>// install    可简写为i,<br>// <span class="hljs-literal">--global</span>   可简写为<span class="hljs-literal">-g</span><br>// <span class="hljs-literal">--save</span>     可简写为<span class="hljs-literal">-S</span><br>// <span class="hljs-literal">--save-dev</span> 可简写为<span class="hljs-literal">-D</span><br></code></pre></td></tr></table></figure><h3 id="4-3-新建文件"><a href="#4-3-新建文件" class="headerlink" title="4.3 新建文件"></a>4.3 新建文件</h3><p>在webpack_demo文件夹下新建两个文件夹，分别为src文件夹和dist文件夹，接着在src文件夹下新增index.js文件和hello.js文件，在dist文件夹下新增index.html文件。此时项目结构如下：<br><img src="/blog/img/other/webpack/3.png" alt="3"></p><p>在hello.js中导出一个模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// hello.js </span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> hello = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>  hello.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;hello webpack!&quot;</span>;<br>  <span class="hljs-keyword">return</span> hello;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在index.js中引入这个hello.js模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> hello = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./hello.js&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>).<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">hello</span>());<br></code></pre></td></tr></table></figure><p>在index.html下引入打包后的js文件bundle.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>webpack demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-comment">&lt;!--这是打包之后的js文件，我们暂时命名为bundle.js--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-4-进行打包"><a href="#4-4-进行打包" class="headerlink" title="4.4 进行打包"></a>4.4 进行打包</h3><p>在终端输入如下命令进行打包</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// webpack全局安装的情况下，output后面的是打包后的文件路径，bundle.js为打包后的js文件名</span><br>webpack src/index.js --output dist/bundle.js  <br><span class="hljs-comment">// --output可简写为-o</span><br><span class="hljs-comment">// 上述命令相当于把src文件夹下的index.js文件打包到dist文件夹下的bundle.js，这样就生成了打包后的文件供index.html引入</span><br></code></pre></td></tr></table></figure><p>结果如下：<br><img src="/blog/img/other/webpack/4.png" alt="4"></p><p>可以看出webpack同时编译了index.js和hello.js，因为index.js文件引入了hello.js模块，现在打开index.html看看结果：<br><img src="/blog/img/other/webpack/5.png" alt="5"></p><h3 id="4-5-通过配置文件来使用webpack"><a href="#4-5-通过配置文件来使用webpack" class="headerlink" title="4.5 通过配置文件来使用webpack"></a>4.5 通过配置文件来使用webpack</h3><p>在当前项目的根目录下新建一个配置文件webpack.config.js，我们写下如下简单配置代码，目前只涉及入口配置（相当于我们的index.js，从它开始打包）和出口配置（相当于我们打包生成的bundle.js）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>( __dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// path.join的功能是拼接路径片段</span><br><span class="hljs-comment">// __dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录，即D:\webpack_demo</span><br></code></pre></td></tr></table></figure><p>有了这个配置文件，我们只需在终端中运行webpack命令就可进行打包，这条命令会自动引用webpack.config.js文件中的配置选项：<br><img src="/blog/img/other/webpack/6.png" alt="6"></p><h3 id="4-6-package-json文件中自定义脚本命令"><a href="#4-6-package-json文件中自定义脚本命令" class="headerlink" title="4.6 package.json文件中自定义脚本命令"></a>4.6 package.json文件中自定义脚本命令</h3><p>Node项目一般都有一个package.json文件，该文件用于描述当前项目，其中有一个scripts属性，该属性可以自定义脚本命令，例如我们运行的打包命令，那么可以在scripts里添加自定义脚本为：<br><img src="/blog/img/other/webpack/7.png" alt="7"></p><p>可以使用npm run build来运行该脚本命令，这样有什么好处呢？如果命令行很短，好处当然不明显了，但是如何命令行很长呢？那么我们可以在这里添加每次都需要执行的命令，配置了scripts后，npm run key值相当于在终端运行了value值。</p><h2 id="五、构建本地服务"><a href="#五、构建本地服务" class="headerlink" title="五、构建本地服务"></a>五、构建本地服务</h2><h3 id="5-1-webpack-dev-server配置本地服务器"><a href="#5-1-webpack-dev-server配置本地服务器" class="headerlink" title="5.1 webpack-dev-server配置本地服务器"></a>5.1 webpack-dev-server配置本地服务器</h3><p>Webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js构建，它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install webpack<span class="hljs-literal">-dev-server</span> <span class="hljs-literal">-D</span><br></code></pre></td></tr></table></figure><h3 id="5-2-devServer配置项"><a href="#5-2-devServer配置项" class="headerlink" title="5.2 devServer配置项"></a>5.2 devServer配置项</h3><ul><li><strong>contentBase：</strong>该配置项指定了服务器资源的根目录，如果不配置contentBase的话，那么contentBase默认是当前执行的目录，一般是项目的根目录</li><li><strong>post：</strong>指定了开启服务器的端口号，默认为8080</li><li><strong>host：</strong>配置 DevServer的服务器监听地址，默认为 127.0.0.1</li><li><strong>headers：</strong>该配置项可以在HTTP响应中注入一些HTTP响应头。例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">headers: &#123;<br>  <span class="hljs-string">&#x27;X-foo&#x27;</span>: <span class="hljs-string">&#x27;112233&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>historyApiFallback：</strong>该配置项属性是用来应对返回404页面时定向跳转到特定页面的。一般是应用在单页应用，比如在访问路由时候，访问不到该路由的时候，通过该配置项，设置属性值为true的时候，会自动跳转到 index.html下。当然我们也可以手动通过正则来匹配路由：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 跳到index.html页面 </span><br><span class="hljs-attr">historyApiFallback</span>: <span class="hljs-literal">true</span><br><br><span class="hljs-comment">// 使用正则来匹配路由</span><br><span class="hljs-attr">historyApiFallback</span>: &#123;<br>  <span class="hljs-attr">rewrites</span>: [<br>    &#123; <span class="hljs-attr">from</span>: <span class="hljs-regexp">/^\/user/</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">&#x27;/user.html&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">from</span>: <span class="hljs-regexp">/^\/home/</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">&#x27;/home.html&#x27;</span> &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>hot：</strong>该配置项是指模块替换换功能，DevServer 默认行为是在发现源代码被更新后通过自动刷新整个页面来做到实时预览的，但是开启模块热替换功能后，它是通过在不刷新整个页面的情况下通过使用新模块替换旧模块来做到实时预览的。</li><li>**proxy : **有时候我们使用webpack在本地启动服务器的时候，由于我们使用的访问的域名是 <code>http://localhost:8080</code> 这样的，但是我们服务端的接口是其他的，可以通过该配置来解决跨域的问题：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 假设服务端接口域名为：http://news.webpack.com</span><br><span class="hljs-attr">proxy</span>: &#123;<br>  <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>    <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://news.webpack.com&#x27;</span>, <span class="hljs-comment">// 目标接口的域名</span><br>    <span class="hljs-comment">// secure: true,  // https 的时候 使用该参数</span><br>    <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 是否跨域</span><br>    <span class="hljs-attr">pathRewrite</span>: &#123;<br>      <span class="hljs-string">&#x27;^/api&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">// 重写路径</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>inline：</strong>设置为true，当源文件改变时会自动刷新页面</li><li><strong>open：</strong>该属性用于DevServer启动且第一次构建完成时，自动使用我们的系统默认浏览器去打开网页。</li><li><strong>compress：</strong>配置是否启用 gzip 压缩，boolean 类型，默认为 false</li><li><strong>overlay：</strong>该属性是用来在编译出错的时候，在浏览器页面上显示错误。该属性值默认为false，需要的话，设置该参数为true</li></ul><h3 id="5-3-添加配置项到webpack-config-js"><a href="#5-3-添加配置项到webpack-config-js" class="headerlink" title="5.3 添加配置项到webpack.config.js"></a>5.3 添加配置项到webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;&#x27;</span>, <br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,  <br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>  <br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-在package-json文件中添加启动命令"><a href="#5-4-在package-json文件中添加启动命令" class="headerlink" title="5.4 在package.json文件中添加启动命令"></a>5.4 在package.json文件中添加启动命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span>,<br>  <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --open&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>我们用dev来启动本地服务器， webpack-dev-server就是启动服务器的命令，- -open是用于启动完服务器后自动打开浏览器，这时候我们自定义命令方式的便捷性就体现出来了，可以多个命令集成在一起运行，即我们定义了一个dev命令名称就可以同时运行了webpack-dev-server和- -open两个命令。</p><p>现在在终端输入npm run dev 运行服务器：<br><img src="/blog/img/other/webpack/8.png" alt="8"></p><p>这样我们就可以在<code>http://localhost:8080/</code>中查看页面。</p><h3 id="5-5-Source-Maps调试配置"><a href="#5-5-Source-Maps调试配置" class="headerlink" title="5.5 Source Maps调试配置"></a>5.5 Source Maps调试配置</h3><p>作为开发，代码调试当然少不了，那么问题来了，经过打包后的文件，你是不容易找到出错的地方的，<code>Source Map</code>就是用来解决这个问题的。通过如下配置，我们会在打包时生成对应于打包文件的<code>.map</code>文件，使得编译后的代码可读性更高，更易于调试。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = require(<span class="hljs-string">&#x27;path&#x27;</span>);<br>module.exports = &#123;<br>  entry: path.<span class="hljs-keyword">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  output: &#123;<br>    path: path.<span class="hljs-keyword">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    filename: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  devServer: &#123;<br>    contentBase: path.<span class="hljs-keyword">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    hot: <span class="hljs-literal">true</span>,<br>    port: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    inline: <span class="hljs-literal">true</span>,<br>    open: <span class="hljs-literal">true</span>,<br>    overlay: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  devtool: <span class="hljs-string">&#x27;source-map&#x27;</span> <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>&#125;<br></code></pre></td></tr></table></figure><p>配置好后，我们再次运行npm run build进行打包，这时我们会发现在dist文件夹中多出了一个bundle.js.map。如果我们的代码有bug，在浏览器的调试工具中会提示错误出现的位置，这就是devtool：’source-map’ 配置项的作用。</p><h2 id="六、Loaders"><a href="#六、Loaders" class="headerlink" title="六、Loaders"></a>六、Loaders</h2><p>loaders是webpack最强大的功能之一，通过不同的loader，webpack有能力调用外部的脚本或工具，实现对不同格式的文件的处理，例如把scss转为css，将ES66、ES7等语法转化为当前浏览器能识别的语法，将JSX转化为js等多项功能。Loaders需要单独安装并且需要在webpack.comfig.js中的modules配置项下进行配置，Loaders的配置包括以下几方面：</p><ul><li>test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</li><li>loader：loader的名称（必须）</li><li>include&#x2F;exclude： 手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）</li><li>options： 为loaders提供额外的设置选项（可选）</li></ul><h3 id="6-1-配置css-loader"><a href="#6-1-配置css-loader" class="headerlink" title="6.1 配置css-loader"></a>6.1 配置css-loader</h3><p>如果我们要加载一个css文件，需要安装style-loader和css-loadernpm install style-loader css-loader -D</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install style<span class="hljs-literal">-loader</span> css<span class="hljs-literal">-loader</span> <span class="hljs-literal">-D</span><br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>, <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在src文件夹下新建index.css文件，设置body的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* index.css */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: gray;<br>&#125;<br></code></pre></td></tr></table></figure><p>在src文件夹下的index.js引入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span> <span class="hljs-comment">// 导入css</span><br><br><span class="hljs-keyword">const</span> hello = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./hello.js&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>).<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">hello</span>());<br></code></pre></td></tr></table></figure><p>运行npm run dev启动服务器，会发现页面背景颜色变成了灰色。<br><img src="/blog/img/other/webpack/9.png" alt="9"></p><h3 id="6-2-配置sass"><a href="#6-2-配置sass" class="headerlink" title="6.2 配置sass"></a>6.2 配置sass</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install sass<span class="hljs-literal">-loader</span> node<span class="hljs-literal">-sass</span> <span class="hljs-literal">-D</span> // 因为sass<span class="hljs-literal">-loader</span>依赖于node<span class="hljs-literal">-sass</span>，所以还要安装node<span class="hljs-literal">-sass</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>, <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|sass)$/</span>,   <span class="hljs-comment">// 正则匹配以.scss和.sass结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、Plugins（插件）"><a href="#七、Plugins（插件）" class="headerlink" title="七、Plugins（插件）"></a>七、Plugins（插件）</h2><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p><h3 id="7-1-使用插件"><a href="#7-1-使用插件" class="headerlink" title="7.1 使用插件"></a>7.1 使用插件</h3><p>如需使用某个插件，需要通过npm进行安装，然后在webpack.config.js配置文件的plugins配置项中添加该插件的实例，下面我们先来使用一个简单的版权声明插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);  <span class="hljs-comment">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>, <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|sass)$/</span>,   <span class="hljs-comment">// 正则匹配以.scss和.sass结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">BannerPlugin</span>(<span class="hljs-string">&#x27;版权所有，翻版必究&#x27;</span>)  <span class="hljs-comment">// new一个插件的实例 </span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>运行npm run build 打包后，我们查看dist下面的bundle.js文件显示如下：<br><img src="/blog/img/other/webpack/10.png" alt="10"></p><h3 id="7-2-自动生成html文件（HtmlWebpackPlugin）"><a href="#7-2-自动生成html文件（HtmlWebpackPlugin）" class="headerlink" title="7.2 自动生成html文件（HtmlWebpackPlugin）"></a>7.2 自动生成html文件（HtmlWebpackPlugin）</h3><p>到目前为止我们都是使用一开始建好的index.html文件，而且也是手动引入bundle.js，要是以后我们引入不止一个js文件，而且更改js文件名的话，也得手动更改index.html中的js文件名，所以能不能自动生成index.html且自动引用打包后的js呢？可以使用HtmlWebpackPlugin插件来解决这个问题。</p><p>我们对项目结构进行一些更改：</p><ol><li>把整个dist文件夹删除</li><li>在src文件夹下新建一个index.html(名称自定义)文件模板（当然这个是可选的，因为就算不设置模板，HtmlWebpackPlugin插件也会生成默认html文件，这里我们设置模块会让我们的开发更加灵活），如下：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>安装HtmlWebpackPlugin插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm install html-webpack-plugin -D<br></code></pre></td></tr></table></figure><p>引入HtmlWebpackPlugin插件，并配置了引用了我们设置的模板，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);  <span class="hljs-comment">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入HtmlWebpackPlugin插件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>, <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|sass)$/</span>,   <span class="hljs-comment">// 正则匹配以.scss和.sass结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">BannerPlugin</span>(<span class="hljs-string">&#x27;版权所有，翻版必究&#x27;</span>),  <span class="hljs-comment">// new一个插件的实例 </span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.html&quot;</span>)<span class="hljs-comment">// new一个这个插件的实例，并传入相关的参数</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>运行npm run build进行打包，dist文件夹自动生成，包含index.html、bundle.js、bundle.js.map三个文件<br><img src="/blog/img/other/webpack/11.png" alt="11"></p><h3 id="7-3-清理dist文件夹（CleanWebpackPlugin）"><a href="#7-3-清理dist文件夹（CleanWebpackPlugin）" class="headerlink" title="7.3 清理dist文件夹（CleanWebpackPlugin）"></a>7.3 清理dist文件夹（CleanWebpackPlugin）</h3><p>webpack会生成文件，然后将这些文件放置在dist文件夹中，但是webpack无法追踪到哪些文件是实际在项目中用到的。通常，在每次构建前清理dist文件夹，是比较推荐的做法，因此只会生成用到的文件，这时候就用到CleanWebpackPlugin插件了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install clean<span class="hljs-literal">-webpack-plugin</span> <span class="hljs-literal">-D</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);  <span class="hljs-comment">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入HtmlWebpackPlugin插件</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入CleanWebpackPlugin插件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>, <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|sass)$/</span>,   <span class="hljs-comment">// 正则匹配以.scss和.sass结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">BannerPlugin</span>(<span class="hljs-string">&#x27;版权所有，翻版必究&#x27;</span>),  <span class="hljs-comment">// new一个插件的实例 </span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.html&quot;</span>)<span class="hljs-comment">// new一个这个插件的实例，并传入相关的参数</span><br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),  <span class="hljs-comment">// 默认删除output中path对应文件</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们每运行一次npm run build后就会发现，webpack会先将dist文件夹删除，然后再生产新的dist文件夹。</p><h3 id="7-4-热更新（HotModuleReplacementPlugin）"><a href="#7-4-热更新（HotModuleReplacementPlugin）" class="headerlink" title="7.4 热更新（HotModuleReplacementPlugin）"></a>7.4 热更新（HotModuleReplacementPlugin）</h3><p><strong>HotModuleReplacementPlugin</strong>是一个很实用的插件，可以在我们修改代码后自动刷新预览效果。</p><p>设置方法：</p><ol><li>devServer配置项中添加 hot：true 参数。</li><li>因为HotModuleReplacementPlugin是webpack模块自带的，所以引入webpack后，在plugins配置项中直接使用即可。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);  <span class="hljs-comment">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入HtmlWebpackPlugin插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CleanWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入CleanWebpackPlugin插件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>    <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>, <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|sass)$/</span>,   <span class="hljs-comment">// 正则匹配以.scss和.sass结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">BannerPlugin</span>(<span class="hljs-string">&#x27;版权所有，翻版必究&#x27;</span>),  <span class="hljs-comment">// new一个插件的实例 </span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.html&quot;</span>)<span class="hljs-comment">// new一个这个插件的实例，并传入相关的参数</span><br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>([<span class="hljs-string">&#x27;dist&#x27;</span>]),  <span class="hljs-comment">// 所要清理的文件夹名称</span><br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">HotModuleReplacementPlugin</span>() <span class="hljs-comment">// 热更新插件 </span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>npm run dev 启动项目后，我们尝试着修改hello.js的内容，会发现浏览器预览效果会自动刷新。</p><h2 id="八、项目优化及拓展"><a href="#八、项目优化及拓展" class="headerlink" title="八、项目优化及拓展"></a>八、项目优化及拓展</h2><h3 id="8-1-代码分离"><a href="#8-1-代码分离" class="headerlink" title="8.1 代码分离"></a>8.1 代码分离</h3><p>我们的webpack.config.js配置文件，其实也没配置多少东西就这么多了，要是以后增加了更多配置，岂不是看得眼花缭乱，所以最好的方法就是把它拆分，方便管理：</p><p>1、 我们在根目录下新建三个文件，分别为webpack.common.js、webpack.dev.js、webpack.prod.js分别代表公共配置文件、开发环境配置文件、生产环境（指项目上线时的环境）配置文件。</p><p>2、安装一个合并模块插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm install webpack-merge -D<br></code></pre></td></tr></table></figure><p>3、将webpack.config.js的代码拆分到上述新建的三个文件中，然后把将webpack.config.js文件删除，具体如下：</p><p><code>webpack.common.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.common.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);  <span class="hljs-comment">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入HtmlWebpackPlugin插件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>), <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|sass)$/</span>,   <span class="hljs-comment">// 正则匹配以.scss和.sass结尾的文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">BannerPlugin</span>(<span class="hljs-string">&#x27;版权所有，翻版必究&#x27;</span>),  <span class="hljs-comment">// new一个插件的实例 </span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.html&quot;</span>)<span class="hljs-comment">// new一个这个插件的实例，并传入相关的参数</span><br>    &#125;),<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">HotModuleReplacementPlugin</span>() <span class="hljs-comment">// 热更新插件 </span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><code>webpack.dev.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.dev.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);  <span class="hljs-comment">// 引入webpack-merge功能模块</span><br><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.common.js&#x27;</span>); <span class="hljs-comment">// 引入webpack.common.js</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(common, &#123;   <span class="hljs-comment">// 将webpack.common.js合并到当前文件</span><br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">contentBase</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>        <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;8080&#x27;</span>,<br>        <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">overlay</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>webpack.prod.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.prod.js</span><br><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>);<br><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.common.js&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入CleanWebpackPlugin插件</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(common, &#123; <span class="hljs-comment">// 将webpack.common.js合并到当前文件</span><br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>,  <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),  <br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>4、设置package.json的scripts命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --config webpack.prod.js&quot;</span>,<br>  <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --open --config webpack.dev.js&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们把build命令改为了webpack –config webpack.prod.js，意思是把打包配置指向webpack.prod.js配置文件，而之前我们只需要使用一个webpack 命令为什么就可以运行了？因为webpack 命令是默认指向webpack.config.js这个文件名称了，现在我们把文件名称改了，所以就需要自定义指向新的文件，dev命令中的指令也同理。</p><p>然后我们运行npm run build 和npm run dev，效果和我们分离代码前是一样的。</p><h3 id="8-2-多入口-多出口"><a href="#8-2-多入口-多出口" class="headerlink" title="8.2 多入口 多出口"></a>8.2 多入口 多出口</h3><p>到目前为止我们都是一个入口文件和一个出口文件，要是我不止一个入口文件呢？下面我们来试试：</p><p>在webpack.common.js中的entery入口有三种写法，分别为字符串、数组和对象，平时我们用得比较多的是对象，所以我们把它改为对象的写法，首先我们在src文件夹下新建index2.js文件，名称任意。因为有多个入口，所以肯定得多个出口来进行一一对应了，所以entry和output配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">index</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>),<br>    <span class="hljs-attr">index2</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index2.js&quot;</span>)<br>&#125;,<br><span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[name].js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index2.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">page2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    element.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;我是第二个入口文件&#x27;</span>;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>).<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">page2</span>());<br></code></pre></td></tr></table></figure><p>然后我们运行npm run build打包后发现dist文件夹下会多出index2.js文件，同时index.html也会自动将index2.js引入，然后我们运行npm run dev显示如下：<br><img src="/blog/img/other/webpack/1.png" alt="1"></p><h3 id="8-3-分离css"><a href="#8-3-分离css" class="headerlink" title="8.3 分离css"></a>8.3 分离css</h3><p>webpack的理念是把css、js全都打包到一个文件里，但要是我们想把css分离出来该怎么做呢？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">npm install extract-text-webpack-plugin<span class="hljs-meta">@next</span> -D  <span class="hljs-comment">// 加上@next是为了安装最新的，否则会出错</span><br></code></pre></td></tr></table></figure><p>安装完以上插件后在webpack.common.js文件中引入并使用该插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.common.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);  <span class="hljs-comment">// 这个插件不需要安装，是基于webpack的，需要引入webpack模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 引入HtmlWebpackPlugin插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ExtractTextPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;extract-text-webpack-plugin&#x27;</span>) <span class="hljs-comment">//引入分离插件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">index</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.js&quot;</span>),<br>        <span class="hljs-attr">index2</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index2.js&quot;</span>)<br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/dist&quot;</span>), <span class="hljs-comment">// 打包后的文件存放的地方 </span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[name].js&quot;</span> <span class="hljs-comment">// 打包后输出文件的文件名</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,   <span class="hljs-comment">// 正则匹配以.css结尾的文件</span><br>                <span class="hljs-attr">use</span>: <span class="hljs-title class_">ExtractTextPlugin</span>.<span class="hljs-title function_">extract</span>(&#123;  <span class="hljs-comment">// 这里我们需要调用分离插件内的extract方法</span><br>                    <span class="hljs-attr">fallback</span>: <span class="hljs-string">&#x27;style-loader&#x27;</span>,  <span class="hljs-comment">// 相当于回滚，css-loader处理过的css最终再经过style-loader处理</span><br>                    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>                &#125;)<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|sass)$/</span>,   <span class="hljs-comment">// 正则匹配以.scss和.sass结尾的文件</span><br>                <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]  <span class="hljs-comment">// 需要用的loader，一定是这个顺序，因为调用loader是从右往左编译的</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">BannerPlugin</span>(<span class="hljs-string">&#x27;版权所有，翻版必究&#x27;</span>),  <span class="hljs-comment">// new一个插件的实例 </span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;/src/index.html&quot;</span>)<span class="hljs-comment">// new一个这个插件的实例，并传入相关的参数</span><br>        &#125;),<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">HotModuleReplacementPlugin</span>(), <span class="hljs-comment">// 热更新插件</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExtractTextPlugin</span>(<span class="hljs-string">&#x27;css/index.css&#x27;</span>) <span class="hljs-comment">// 将css分离到/dist文件夹下的css文件夹中的index.css </span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>运行npm run build后会发现dist文件夹下多一个css文件。</p><h3 id="8-4-消除冗余的css"><a href="#8-4-消除冗余的css" class="headerlink" title="8.4 消除冗余的css"></a>8.4 消除冗余的css</h3><p>有时候我们css写得多了，可能会不自觉的写重复了一些样式，这就造成了多余的代码，上线前又忘了检查，对于这方面，我们应该尽量去优化它，webpack就有这个功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm install purifycss-webpack purify-css glob -D<br></code></pre></td></tr></table></figure><p>安装完后在webpack.prod.js文件中进行配置，引入purifycss-webpack和glob插件并使用它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.prod.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-merge&quot;</span>);<br><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.common.js&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>); <span class="hljs-comment">// 引入CleanWebpackPlugin插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PurifyCssWebpack</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;purifycss-webpack&quot;</span>); <span class="hljs-comment">// 引入PurifyCssWebpack插件</span><br><span class="hljs-keyword">const</span> glob = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;glob&quot;</span>); <span class="hljs-comment">// 引入glob模块,用于扫描全部html文件中所引用的css</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(common, &#123;<br>  <span class="hljs-comment">// 将webpack.common.js合并到当前文件</span><br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;source-map&quot;</span>, <span class="hljs-comment">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">PurifyCssWebpack</span>(&#123;<br>      <span class="hljs-attr">paths</span>: glob.<span class="hljs-title function_">sync</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;src/*.html&quot;</span>)), <span class="hljs-comment">// 同步扫描所有html文件中所引用的css</span><br>    &#125;),<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们在index.css文件中增加一些多余的代码试试：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* index.css */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background</span>: gray;<br>&#125;<br><br><span class="hljs-comment">/* 冗余css */</span><br><span class="hljs-selector-class">.a</span> &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">background</span>: red;<br>&#125;<br><br><span class="hljs-comment">/* 冗余css */</span><br><span class="hljs-selector-class">.b</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">border</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们运行npm run build后发现打包后的index.css中是没有多余的<code>.a</code>和<code>.b</code>代码的。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodeJs</title>
    <link href="/blog/2022/08/03/other/nodeJs/"/>
    <url>/blog/2022/08/03/other/nodeJs/</url>
    
    <content type="html"><![CDATA[<h1 id="nodeJs"><a href="#nodeJs" class="headerlink" title="nodeJs"></a>nodeJs</h1><p>nodejs 是一个基于 Chrome V8 引擎的<code>JavaScript</code>运行环境。</p><h2 id="一、nodejs的安装"><a href="#一、nodejs的安装" class="headerlink" title="一、nodejs的安装"></a>一、nodejs的安装</h2><h3 id="1-1-下载nodejs"><a href="#1-1-下载nodejs" class="headerlink" title="1.1 下载nodejs"></a>1.1 下载nodejs</h3><p>在官网下载对应版本的nodejs，nodejs官方地址：<a href="https://nodejs.org/zh-cn/download/">nodejs下载地址</a><br><img src="/blog/img/other/nodeJs/1.png" alt="1"></p><p>或者也可以安装以往的版本，点击进入：<br><img src="/blog/img/other/nodeJs/2.png" alt="2"></p><p>可以找到自己需要的版本进行下载：<br><img src="/blog/img/other/nodeJs/3.png" alt="3"></p><h3 id="1-2-安装nodejs"><a href="#1-2-安装nodejs" class="headerlink" title="1.2 安装nodejs"></a>1.2 安装nodejs</h3><p>1.2.1 下载完成后，运行安装包，点击next<br><img src="/blog/img/other/nodeJs/4.png" alt="4"></p><p>1.2.2  勾选接受协议选项，点击next<br><img src="/blog/img/other/nodeJs/5.png" alt="5"></p><p>1.2.3  Node.js默认安装目录为 “C:\Program Files\nodejs”，修改目录，并点击 next<br><img src="/blog/img/other/nodeJs/6.png" alt="6"></p><p>1.2.4  选择最后一项，点击next<br><img src="/blog/img/other/nodeJs/7.png" alt="7"></p><p>1.2.5  点击install，开始安装<br><img src="/blog/img/other/nodeJs/8.png" alt="8"></p><p>1.2.6  完成安装</p><h3 id="1-3-安装检查"><a href="#1-3-安装检查" class="headerlink" title="1.3 安装检查"></a>1.3 安装检查</h3><p>1.3.1  安装完成后nodejs目录如图所示（我的电脑没有重新安装，所以在网上找了一个图片）<br><img src="/blog/img/other/nodeJs/9.png" alt="9"></p><p>1.3.2  新版的node在安装时同时也安装了npm，打开控制台执行以下命令查看nodejs和npm的版本：<br><img src="/blog/img/other/nodeJs/10.png" alt="10"></p><p>1.3.3  npm root -g查看包的默认存放路径位<br><img src="/blog/img/other/nodeJs/11.png" alt="11"></p><h2 id="二、nodejs的测试使用"><a href="#二、nodejs的测试使用" class="headerlink" title="二、nodejs的测试使用"></a>二、nodejs的测试使用</h2><h3 id="2-1-编写代码"><a href="#2-1-编写代码" class="headerlink" title="2.1 编写代码"></a>2.1 编写代码</h3><p>创建test.js文件，编写代码，输出<code>hello world</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-2-运行文件"><a href="#2-2-运行文件" class="headerlink" title="2.2 运行文件"></a>2.2 运行文件</h3><p>在cmd中打开文件所在目录，执行以下代码：<br><img src="/blog/img/other/nodeJs/12.png" alt="12"></p><h2 id="三、npm包管理工具"><a href="#三、npm包管理工具" class="headerlink" title="三、npm包管理工具"></a>三、npm包管理工具</h2><h3 id="3-1-npm测试安装"><a href="#3-1-npm测试安装" class="headerlink" title="3.1 npm测试安装"></a>3.1 npm测试安装</h3><p>执行如下命令，若出现版本信息则说明安装npm成功。默认安装nodejs时会自动安装npm包管理工具。<br><img src="/blog/img/other/nodeJs/13.png" alt="13"></p><h3 id="3-2-npm初始化工作区"><a href="#3-2-npm初始化工作区" class="headerlink" title="3.2 npm初始化工作区"></a>3.2 npm初始化工作区</h3><p>进入指定目录，执行以下命令，则成功将该目录初始化为npm管理的目录。</p><p>执行了npm init之后，会让我们填写一些配置信息，如果还不知道怎么填写的话可以一路回车。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 需要手动设置一些初始化参数</span><br><span class="hljs-comment"># npm init</span><br><span class="hljs-comment"># 直接使用默认参数初始化</span><br><span class="hljs-comment"># npm init -y</span><br></code></pre></td></tr></table></figure><p><img src="/blog/img/other/nodeJs/14.png" alt="14"></p><p>生成的文件内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我的node&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node index.js&quot;</span>  <span class="hljs-comment">// 这是我自己添加的</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在目录下新建一个<code>index.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一个node项目&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在控制台中运行：<br><img src="/blog/img/other/nodeJs/15.png" alt="15"></p><p>也可以运行：<br><img src="/blog/img/other/nodeJs/16.png" alt="16"></p><h3 id="2-3-npm配置镜像"><a href="#2-3-npm配置镜像" class="headerlink" title="2.3 npm配置镜像"></a>2.3 npm配置镜像</h3><p>通常我们要去npm服务器上下载一些.js的组件时，会请求到npm原本的服务器上，而npm是国外的服务器，所以下载速度会很慢，而taobao镜像就相当于把npm服务器上的组件备份了一边，请求下载的速度都会很快。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>如果你想切换回来，就可以运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org/<br></code></pre></td></tr></table></figure><h3 id="2-4-npm安装依赖包与说明"><a href="#2-4-npm安装依赖包与说明" class="headerlink" title="2.4 npm安装依赖包与说明"></a>2.4 npm安装依赖包与说明</h3><h4 id="2-4-1-安装最新版本依赖包"><a href="#2-4-1-安装最新版本依赖包" class="headerlink" title="2.4.1 安装最新版本依赖包"></a>2.4.1 安装最新版本依赖包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 使用npm安装最新版本的依赖包，以jquery为例。安装完成后，发现当前目录会增加新的目录node_modules用于存放jquery的依赖包，以及文件package-lock.json用于锁定版本。</span><br>npm install jquery<br></code></pre></td></tr></table></figure><p><img src="/blog/img/other/nodeJs/17.png" alt="17"></p><h4 id="2-4-2-安装指定版本依赖包"><a href="#2-4-2-安装指定版本依赖包" class="headerlink" title="2.4.2 安装指定版本依赖包"></a>2.4.2 安装指定版本依赖包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#如果安装时想指定jquery的特定版本</span><br>npm install jquery@<span class="hljs-number">3.4</span>.x<br></code></pre></td></tr></table></figure><h4 id="2-4-3-全局安装"><a href="#2-4-3-全局安装" class="headerlink" title="2.4.3 全局安装"></a>2.4.3 全局安装</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#一些命令行工具常使用全局安装的方式</span><br>npm install <span class="hljs-literal">-g</span> webpack<br></code></pre></td></tr></table></figure><h4 id="2-4-4-根据package-json文件的依赖安装依赖包"><a href="#2-4-4-根据package-json文件的依赖安装依赖包" class="headerlink" title="2.4.4 根据package.json文件的依赖安装依赖包"></a>2.4.4 根据package.json文件的依赖安装依赖包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 在当前目标存放 package.json和 package-lock.json两个文件，并执行如下命令，则会根据文件中的依赖下载相关的依赖包</span><br>npm install<br></code></pre></td></tr></table></figure><h4 id="2-4-5-安装开发环境下的依赖包"><a href="#2-4-5-安装开发环境下的依赖包" class="headerlink" title="2.4.5 安装开发环境下的依赖包"></a>2.4.5 安装开发环境下的依赖包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖</span><br><span class="hljs-comment">#使用 -D参数将依赖添加到devDependencies节点</span><br>npm install <span class="hljs-literal">--save-dev</span> eslint<br><span class="hljs-comment">#或</span><br>npm install <span class="hljs-literal">-D</span> eslint<br></code></pre></td></tr></table></figure><h3 id="2-5-其他命令说明"><a href="#2-5-其他命令说明" class="headerlink" title="2.5 其他命令说明"></a>2.5 其他命令说明</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#更新包（更新到最新版本）</span><br>npm update 包名<br><span class="hljs-comment">#全局更新</span><br>npm update <span class="hljs-literal">-g</span> 包名<br><span class="hljs-comment">#卸载包</span><br>npm uninstall 包名<br><span class="hljs-comment">#全局卸载</span><br>npm uninstall <span class="hljs-literal">-g</span> 包名<br></code></pre></td></tr></table></figure><h2 id="四、创建第一个应用"><a href="#四、创建第一个应用" class="headerlink" title="四、创建第一个应用"></a>四、创建第一个应用</h2><h3 id="4-1-引入required模块"><a href="#4-1-引入required模块" class="headerlink" title="4.1 引入required模块"></a>4.1 引入required模块</h3><p>在index.js中我们使用<strong>require</strong>指令来载入http模块，并将实例化的HTTP赋值给变量http，实例如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="4-2-创建服务器"><a href="#4-2-创建服务器" class="headerlink" title="4.2 创建服务器"></a>4.2 创建服务器</h3><p>接下来我们使用http.createServer()方法创建服务器，并使用listen方法绑定8888端口。 函数通过request, response参数来接收和响应数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br><span class="hljs-comment">// 发送 HTTP 头部 </span><br><span class="hljs-comment">// HTTP 状态值: 200 : OK</span><br><span class="hljs-comment">// 内容类型: text/plain</span><br>response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<br><span class="hljs-comment">// 发送响应数据 &quot;Hello World&quot;</span><br>response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello World\n&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-comment">// 终端打印如下信息</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8888/&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="4-3-运行应用"><a href="#4-3-运行应用" class="headerlink" title="4.3 运行应用"></a>4.3 运行应用</h3><p>在控制台中运行以下代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p><img src="/blog/img/other/nodeJs/18.png" alt="18"></p><p>复制<code>[http://127.0.0.1:8888/](http://127.0.0.1:8888/)</code>在浏览器中打开：<br><img src="/blog/img/other/nodeJs/19.png" alt="19"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
      <tag>nodeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sass</title>
    <link href="/blog/2022/08/03/other/sass/"/>
    <url>/blog/2022/08/03/other/sass/</url>
    
    <content type="html"><![CDATA[<h1 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h1><p><strong>Sass</strong>是成熟、稳定、强大的<strong>CSS预处理器</strong>，而SCSS是Sass3版本当中引入的新语法特性，完全兼容CSS3的同时继承了Sass强大的动态功能。</p><h2 id="1、使用变量"><a href="#1、使用变量" class="headerlink" title="1、使用变量"></a>1、使用变量</h2><h3 id="1-1-变量声明"><a href="#1-1-变量声明" class="headerlink" title="1-1 变量声明"></a>1-1 变量声明</h3><p>变量用来存储需要在CSS中复用的信息，例如颜色或字体等。Sass通过**$**符号去声明一个变量，这个变量可以重复使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">$<span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br></code></pre></td></tr></table></figure><h3 id="1-2-变量引用"><a href="#1-2-变量引用" class="headerlink" title="1-2 变量引用"></a>1-2 变量引用</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">// 声明变量<br>$<span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br><br>// 变量引用<br><span class="hljs-selector-class">.background</span> &#123;<br>    <span class="hljs-attribute">background</span>: $color;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-class">.background</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-变量名用中划线还是下划线分隔"><a href="#1-3-变量名用中划线还是下划线分隔" class="headerlink" title="1-3 变量名用中划线还是下划线分隔"></a>1-3 变量名用中划线还是下划线分隔</h3><p><code>sass</code>的变量名可以与<code>css</code>中的属性名和选择器名称相同，包括中划线和下划线。</p><p>在<code>sass</code>中，<code>$link-color</code>和<code>$link_color</code>的含义一样，这两种用法相互兼容。</p><p>如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">$link-<span class="hljs-attribute">color</span>: blue;<br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: $link_color;<br>&#125;<br><br>//编译后<br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、嵌套css规则"><a href="#2、嵌套css规则" class="headerlink" title="2、嵌套css规则"></a>2、嵌套css规则</h2><p><code>css</code>中重复写选择器是非常烦人的，如果要写一大串指向页面中同一块的样式时，往往需要 一遍又一遍地写同一个<code>id</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">// css写法<br><span class="hljs-selector-id">#content</span> <span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span> &#125;<br><span class="hljs-selector-id">#content</span> <span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.4em</span> &#125;<br><span class="hljs-selector-id">#content</span> <span class="hljs-selector-tag">aside</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#EEE</span> &#125;<br></code></pre></td></tr></table></figure><p>在<code>sass</code>中，可以使用嵌套来解决这个问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-id">#content</span> &#123;<br>  <span class="hljs-selector-tag">article</span> &#123;<br>    <span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span> &#125;<br>    <span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.4em</span> &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">aside</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#EEE</span> &#125;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-id">#content</span> <span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span> &#125;<br><span class="hljs-selector-id">#content</span> <span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.4em</span> &#125;<br><span class="hljs-selector-id">#content</span> <span class="hljs-selector-tag">aside</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#EEE</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-父选择器的标识符-amp"><a href="#2-1-父选择器的标识符-amp" class="headerlink" title="2-1 父选择器的标识符&amp;"></a>2-1 父选择器的标识符&amp;</h3><p>有些时候在使用嵌套时会有些问题，例如下面这段代码，我们想实现的是将鼠标移动到<code>a</code>链接上时<code>a</code>会变成红色，但是这段代码实现的效果是<code>article</code>元素内链接的所有子元素在被<code>hover</code>时都会变成红色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>  <span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: red &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候我们就要用到一个特殊的选择器，父选择器<code>$</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: red &#125;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: blue &#125;<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: red &#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-群组选择器的嵌套"><a href="#2-2-群组选择器的嵌套" class="headerlink" title="2-2 群组选择器的嵌套"></a>2-2 群组选择器的嵌套</h3><p>在<code>CSS</code>里边，选择器<code>h1``h2</code>和<code>h3</code>会同时命中h1元素、h2元素和h3元素。与此类似，<code>.button</code> <code>button</code>会命中button元素和类名为.button的元素。这种选择器称为群组选择器。群组选择器的规则会对命中群组中任何一个选择器的元素生效。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span>, <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>css</code>中还会出现这种情况：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">margin-bottom</span>: .<span class="hljs-number">8em</span> &#125;<br></code></pre></td></tr></table></figure><p>其实在<code>sass</code>中可以利用嵌套来解决这个问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">margin-bottom</span>: .<span class="hljs-number">8em</span>&#125;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">margin-bottom</span>: .<span class="hljs-number">8em</span> &#125;<br></code></pre></td></tr></table></figure><p>还有一种情况就是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">nav</span>, <span class="hljs-selector-tag">aside</span> &#123;<br>  <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>: blue&#125;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">aside</span> <span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">color</span>: blue&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-子组合选择器和同层组合选择器：-gt-、-和"><a href="#2-3-子组合选择器和同层组合选择器：-gt-、-和" class="headerlink" title="2-3 子组合选择器和同层组合选择器：&gt;、+和~"></a>2-3 子组合选择器和同层组合选择器：&gt;、+和~</h3><p><code>&gt;</code>、<code>+</code>和<code>~</code>这三个组合选择器必须和其他选择器配合使用，以指定浏览器仅选择某种特定上下文中的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">section</span> &#123; <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> &#125;<br><span class="hljs-selector-tag">article</span> &gt; <span class="hljs-selector-tag">section</span> &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span> &#125;<br></code></pre></td></tr></table></figure><p>你可以用子组合选择器&gt;选择一个元素的直接子元素。上例中，第一个选择器会选择article下的所有命中section选择器的元素。第二个选择器只会选择article下紧跟着的子元素中命中section选择器的元素。</p><p>在下例中，你可以用同层相邻组合选择器<code>+</code>选择<code>header</code>元素后紧跟的<code>p</code>元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">header</span> + <span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.1em</span> &#125;<br></code></pre></td></tr></table></figure><p>你也可以用同层全体组合选择器<code>~</code>，选择所有跟在<code>article</code>后的同层<code>article</code>元素，不管它们之间隔了多少其他元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">article</span> ~ <span class="hljs-selector-tag">article</span> &#123; <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#ccc</span> &#125;<br></code></pre></td></tr></table></figure><p>这些组合选择器可以毫不费力地应用到<code>sass</code>的规则嵌套中。可以把它们放在外层选择器后边，或里层选择器前边：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">article</span> &#123;<br>  ~ <span class="hljs-selector-tag">article</span> &#123; <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#ccc</span> &#125;<br>  &gt; <span class="hljs-selector-tag">section</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span> &#125;<br>  <span class="hljs-selector-tag">dl</span> &gt; &#123;<br>    <span class="hljs-selector-tag">dt</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span> &#125;<br>    <span class="hljs-selector-tag">dd</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#555</span> &#125;<br>  &#125;<br>  <span class="hljs-selector-tag">nav</span> + &amp; &#123; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span> &#125;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-tag">article</span> ~ <span class="hljs-selector-tag">article</span> &#123; <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#ccc</span> &#125;<br><span class="hljs-selector-tag">article</span> &gt; <span class="hljs-selector-tag">footer</span> &#123; <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span> &#125;<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">dl</span> &gt; <span class="hljs-selector-tag">dt</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span> &#125;<br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">dl</span> &gt; <span class="hljs-selector-tag">dd</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#555</span> &#125;<br><span class="hljs-selector-tag">nav</span> + <span class="hljs-selector-tag">article</span> &#123; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-嵌套属性"><a href="#2-4-嵌套属性" class="headerlink" title="2-4 嵌套属性"></a>2-4 嵌套属性</h3><p>在<code>sass</code>中，除了CSS选择器，属性也可以进行嵌套。</p><p>嵌套属性的规则是这样的：把属性名从中划线-的地方断开，在根属性后边添加一个冒号<code>:</code>，紧跟一个<code>&#123; &#125;</code>块，把子属性部分写在这个<code>&#123; &#125;</code>块中。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">nav</span> &#123;<br>  <span class="hljs-attribute">border</span>: &#123;<br>  style: solid;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br>  &#125;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-tag">nav</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#ccc</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于属性的缩写形式，你甚至可以像下边这样来嵌套，指明例外规则：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">nav</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;<br>  &#125;<br>&#125;<br><br>// 编译后<br><span class="hljs-selector-tag">nav</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">0px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、导入SASS文件"><a href="#3、导入SASS文件" class="headerlink" title="3、导入SASS文件"></a>3、导入SASS文件</h2><p><code>css</code>有一个特别不常用的特性，即<code>@import</code>规则，它允许在一个<code>css</code>文件中导入其他<code>css</code>文件。然而，后果是只有执行到<code>@import</code>时，浏览器才会去下载其他<code>css</code>文件，这导致页面加载起来特别慢。</p><p><code>sass</code>也有一个<code>@import</code>规则，但不同的是，<code>sass</code>的<code>@import</code>规则在生成<code>css</code>文件时就把相关文件导入进来。这意味着所有相关的样式被归纳到了同一个<code>css</code>文件中，而无需发起额外的下载请求。</p><p>使用<code>sass</code>的<code>@import</code>规则并不需要指明被导入文件的全名。可以省略<code>.sass</code>或<code>.scss</code>文件后缀。</p><h3 id="3-1-使用SASS部分文件"><a href="#3-1-使用SASS部分文件" class="headerlink" title="3-1 使用SASS部分文件"></a>3-1 使用SASS部分文件</h3><p>当通过<code>@import</code>把<code>sass</code>样式分散到多个文件时，你通常只想生成少数几个<code>css</code>文件。那些专门为<code>@import</code>命令而编写的<code>sass</code>文件，并不需要生成对应的独立<code>css</code>文件，这样的<code>sass</code>文件称为局部文件。对此，<code>sass</code>有一个特殊的约定来命名这些文件。</p><p><code>sass</code>局部文件的文件名以下划线开头。</p><p>引入<code>sass</code>局部文件时，可以省略文件名开头的下划线，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">// _reset<span class="hljs-selector-class">.scss</span><br><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">ol</span> &#123;<br>  <span class="hljs-attribute">margin</span>:  <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br> <br>// base<span class="hljs-selector-class">.scss</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;reset&#x27;</span>;<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">100%</span> Helvetica, sans-serif;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">ol</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>; &#125;<br> <br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">100%</span> Helvetica, sans-serif;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-默认变量值"><a href="#3-2-默认变量值" class="headerlink" title="3-2 默认变量值"></a>3-2 默认变量值</h3><p>一般情况下，反复声明一个变量，只有最后一处声明有效且它会覆盖前边的值。举例说明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br>$link-<span class="hljs-attribute">color</span>: blue;<br>$link-<span class="hljs-attribute">color</span>: red;<br><span class="hljs-selector-tag">a</span> &#123;<br><span class="hljs-attribute">color</span>: $link-color;<br>&#125;<br><br>// 编译为<br><span class="hljs-selector-tag">a</span> &#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>假如你写了一个可被他人通过<code>@import</code>导入的<code>sass</code>库文件，你可能希望导入者可以定制修改<code>sass</code>库文件中的某些值。使用<code>sass</code>的<code>!default</code>标签可以实现这个目的。</p><p>含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">$fancybox-<span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span> !default;<br><span class="hljs-selector-class">.fancybox</span> &#123;<br><span class="hljs-attribute">width</span>: $fancybox-width;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上例中，如果用户在导入你的<code>sass</code>局部文件之前声明了一个<code>$fancybox-width</code>变量，那么你的局部文件中对<code>$fancybox-width</code>赋值<code>400px</code>的操作就无效。如果用户没有做这样的声明，则<code>$fancybox-width</code>将默认为<code>400px</code>。</p><h3 id="3-3-嵌套导入"><a href="#3-3-嵌套导入" class="headerlink" title="3-3 嵌套导入"></a>3-3 嵌套导入</h3><p><code>sass</code>允许<code>@import</code>命令写在<code>css</code>规则内。这种导入方式下，生成对应的<code>css</code>文件时，局部文件会被直接插入到<code>css</code>规则内导入它的地方。</p><p>举例说明，有一个名为<code>_blue-theme.scss</code>的局部文件，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">// _blue-theme<span class="hljs-selector-class">.scss</span><br><span class="hljs-selector-tag">aside</span> &#123;<br>  <span class="hljs-attribute">background</span>: blue;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后把它导入到一个CSS规则内，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">// 引入_blue-theme<span class="hljs-selector-class">.scss</span><br><span class="hljs-selector-class">.blue-theme</span> &#123;<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;blue-theme&quot;</span>&#125;<br><br>// 编译为<br>.blue-theme &#123;<br>  <span class="hljs-selector-tag">aside</span> &#123;<br>    <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-原生的CSS导入"><a href="#3-4-原生的CSS导入" class="headerlink" title="3-4 原生的CSS导入"></a>3-4 原生的CSS导入</h3><p>由于<code>sass</code>兼容原生的<code>css</code>，所以它也支持原生的<code>CSS@import</code>。尽管通常在<code>sass</code>中使用<code>@import</code>时，<code>sass</code>会尝试找到对应的<code>sass</code>文件并导入进来，但在下列三种情况下会生成原生的<code>CSS@import</code>，尽管这会造成浏览器解析<code>css</code>时的额外下载：</p><ul><li>被导入文件的名字以<code>.css</code>结尾；</li><li>被导入文件的名字是一个URL地址（比如<a href="http://www.sass.hk/css/css.css">http://www.sass.hk/css/css.css</a>），由此可用谷歌字体API提供的相应服务；</li><li>被导入文件的名字是<code>CSS</code>的url()值。</li></ul><p>这就是说，你不能用<code>sass</code>的<code>@import</code>直接导入一个原始的<code>css</code>文件，因为<code>sass</code>会认为你想用<code>css</code>原生的<code>@import</code>。但是，因为<code>sass</code>的语法完全兼容<code>css</code>，所以你可以把原始的<code>css</code>文件改名为<code>.scss</code>后缀，即可直接导入了。</p><h2 id="4、静默注释"><a href="#4、静默注释" class="headerlink" title="4、静默注释"></a>4、静默注释</h2><p><code>sass</code>另外提供了一种不同于<code>css</code>标准注释格式<code>/* ... */</code>的注释语法，即静默注释，其内容不会出现在生成的<code>css</code>文件中。静默注释的语法跟<code>JavaScript``Java</code>等类<code>C</code>的语言中单行注释的语法相同，它们以<code>//</code>开头，注释内容直到行末。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>; // 这种注释内容不会出现在生成的css文件中<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 这种注释内容会出现在生成的css文件中 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，<code>css</code>的标准注释格式<code>/* ... */</code>内的注释内容亦可在生成的<code>css</code>文件中抹去。当注释出现在原生<code>css</code>不允许的地方，如在<code>css</code>属性或选择器中，<code>sass</code>将不知如何将其生成到对应<code>css</code>文件中的相应位置，于是这些注释被抹掉。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span> <span class="hljs-comment">/* 这块注释内容不会出现在生成的css中 */</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* 这块注释内容也不会出现在生成的css中 */</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、混合器"><a href="#5、混合器" class="headerlink" title="5、混合器"></a>5、混合器</h2><p>如果项目中只有几处小的样式类似（例如颜色和字体），那么可以使用变量来统一处理。</p><p>但是当需要大段大段的重用样式的代码，独立的变量就没办法应付这种情况了。</p><p>就可以通过<code>sass</code>的混合器实现大段样式的重用。</p><p>混合器使用<code>@mixin</code>标识符定义。</p><p>下边的这段<code>sass</code>代码，定义了一个非常简单的混合器，目的是添加跨浏览器的圆角边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@mixin</span> rounded-corners &#123;<br>  -moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  -webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以在样式表中通过<code>@include</code>来使用这个混合器。<code>@include</code>调用会把混合器中的所有样式提取出来放在<code>@include</code>被调用的地方。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-class">.notice</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#00aa00</span>;<br>  <span class="hljs-keyword">@include</span> rounded-corners;<br>&#125;<br><br>// 编译为<br><span class="hljs-selector-class">.notice</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#00aa00</span>;<br>  -moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  -webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-混合器中的CSS规则"><a href="#5-1-混合器中的CSS规则" class="headerlink" title="5-1 混合器中的CSS规则"></a>5-1 混合器中的CSS规则</h3><p>混合器中不仅可以包含属性，也可以包含<code>css</code>规则，包含选择器和选择器中的属性，如下代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@mixin</span> no-bullets &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">list-style-image</span>: none;<br>    <span class="hljs-attribute">list-style-type</span>: none;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个包含<code>css</code>规则的混合器通过<code>@include</code>包含在一个父规则中时，在混合器中的规则最终会生成父规则中的嵌套规则。</p><p>例如下面这个例子中使用了<code>no-bullets</code>这个混合器，<code>sass</code>的<code>@include</code>指令会将引入混合器的那行代码替换成混合器里边的内容。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.plain</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#444</span>;<br>  <span class="hljs-keyword">@include</span> no-bullets;<br>&#125;<br><br>// 编译为<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.plain</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#444</span>;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.plain</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">list-style-image</span>: none;<br>  <span class="hljs-attribute">list-style-type</span>: none;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>混合器中的规则甚至可以使用<code>sass</code>的父选择器标识符<code>&amp;</code>。使用起来跟不用混合器时一样，<code>sass</code>解开嵌套规则时，用父规则中的选择器替代<code>&amp;</code>。</p><h3 id="5-2-给混合器传参"><a href="#5-2-给混合器传参" class="headerlink" title="5-2 给混合器传参"></a>5-2 给混合器传参</h3><p>混合器并不一定总得生成相同的样式。可以通过在<code>@include</code>混合器时给混合器传参，来定制混合器生成的精确样式。</p><p>当<code>@include</code>混合器时，参数其实就是可以赋值给<code>css</code>属性值的变量。这种方式跟<code>JavaScript</code>的<code>function</code>很像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@mixin</span> link-colors($normal, $<span class="hljs-attribute">hover</span>, $visited) &#123;<br>  <span class="hljs-attribute">color</span>: $normal;<br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: $hover; &#125;<br>  &amp;<span class="hljs-selector-pseudo">:visited</span> &#123; <span class="hljs-attribute">color</span>: $visited; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当混合器被<code>@include</code>时，你可以把它当作一个<code>css</code>函数来传参。如果你像下边这样写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-keyword">@include</span> link-colors(blue, red, green);<br>&#125;<br><br>// 编译为<br><span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: blue; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br></code></pre></td></tr></table></figure><p>当你<code>@include</code>混合器时，有时候可能会很难区分每个参数是什么意思，参数之间是一个什么样的顺序。为了解决这个问题，<code>sass</code>允许通过语法<code>$name: value</code>的形式指定每个参数的值。这种形式的传参，参数顺序就不必再在乎了，只需要保证没有漏掉参数即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-keyword">@include</span> link-colors(<br>      $<span class="hljs-attribute">normal</span>: blue,<br>      $<span class="hljs-attribute">visited</span>: green,<br>      $<span class="hljs-attribute">hover</span>: red<br>  );<br>&#125;<br><br>// 编译为<br><span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: blue; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-默认参数值"><a href="#5-3-默认参数值" class="headerlink" title="5-3 默认参数值"></a>5-3 默认参数值</h3><p>为了在<code>@include</code>混合器时不必传入所有的参数，我们可以给参数指定一个默认值。参数默认值使用<code>$name: default-value</code>的声明形式，默认值可以是任何有效的<code>css</code>属性值，甚至是其他参数的引用，如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@mixin</span> link-colors(<br>    $normal,<br>    $<span class="hljs-attribute">hover</span>: $normal,<br>    $<span class="hljs-attribute">visited</span>: $normal<br>  )<br>&#123;<br>  <span class="hljs-attribute">color</span>: $normal;<br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: $hover; &#125;<br>  &amp;<span class="hljs-selector-pseudo">:visited</span> &#123; <span class="hljs-attribute">color</span>: $visited; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">// sass写法<br><span class="hljs-selector-tag">a</span> &#123;<br>   <span class="hljs-keyword">@include</span> link-colors(red);<br>&#125;<br><br>// 编译为<br><span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>上面在编译时只传入一个参数<code>red</code>，<code>$hover</code>和<code>$visited</code>也会被自动赋值为<code>red</code>。</p><h2 id="6、使用选择器继承来精简CSS"><a href="#6、使用选择器继承来精简CSS" class="headerlink" title="6、使用选择器继承来精简CSS"></a>6、使用选择器继承来精简CSS</h2><p>使用<code>sass</code>的时候，最后一个减少重复的主要特性就是选择器继承。</p><p>通过<code>@extend</code>语法实现，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">//通过选择器继承继承样式<br><span class="hljs-selector-class">.error</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fdd</span>;<br>&#125;<br><span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-keyword">@extend</span> .error;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><br>// 编译为<br><span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fdd</span>;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>.seriousError</code>不仅会继承<code>.error</code>自身的所有样式，任何跟<code>.error</code>有关的组合选择器样式也会被<code>.seriousError</code>以组合选择器的形式继承，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs css">//通过选择器继承继承样式<br><span class="hljs-selector-class">.error</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fdd</span>;<br>&#125;<br><span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-keyword">@extend</span> .error;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><br>//<span class="hljs-selector-class">.seriousError</span>从<span class="hljs-selector-class">.error</span>继承样式<br><span class="hljs-selector-class">.error</span> <span class="hljs-selector-tag">a</span>&#123;  // 应用到<span class="hljs-selector-class">.seriousError</span> <span class="hljs-selector-tag">a</span><br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.error</span> &#123; // 应用到hl<span class="hljs-selector-class">.seriousError</span><br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br><br><br>// 编译为<br><span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fdd</span>;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><span class="hljs-selector-class">.seriousError</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">100</span>;<br>&#125;<br>hl<span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-1-继承的高级用法"><a href="#6-1-继承的高级用法" class="headerlink" title="6-1 继承的高级用法"></a>6-1 继承的高级用法</h3><p>任何<code>css</code>规则都可以继承其他规则，几乎任何<code>css</code>规则也都可以被继承。</p><p>最常用的一种高级用法是继承一个<code>html</code>元素的样式。</p><p>接下来的这段代码定义了一个名为<code>disabled</code>的类，样式修饰使它看上去像一个灰掉的超链接。通过继承a这一超链接元素来实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.disabled</span> &#123;<br>  <span class="hljs-attribute">color</span>: gray;<br>  <span class="hljs-keyword">@extend</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-继承的工作细节"><a href="#6-2-继承的工作细节" class="headerlink" title="6-2 继承的工作细节"></a>6-2 继承的工作细节</h3><p>关于<code>@extend</code>有两个要点应该知道。</p><ul><li>跟混合器相比，继承生成的<code>css</code>代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的<code>css</code>体积更小。如果你非常关心你站点的速度，请牢记这一点。</li><li>继承遵从<code>css</code>层叠的规则。当两个不同的<code>css</code>规则应用到同一个<code>html</code>元素上时，并且这两个不同的<code>css</code>规则对同一属性的修饰存在不同的值，<code>css</code>层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
      <tag>Sass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VueX</title>
    <link href="/blog/2022/08/03/vue/vuex/"/>
    <url>/blog/2022/08/03/vue/vuex/</url>
    
    <content type="html"><![CDATA[<h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><h2 id="一、初识VueX"><a href="#一、初识VueX" class="headerlink" title="一、初识VueX"></a>一、初识VueX</h2><h3 id="1-1-关于VueX"><a href="#1-1-关于VueX" class="headerlink" title="1.1 关于VueX"></a>1.1 关于VueX</h3><p><code>VueX</code>是适用于在<code>Vue</code>项目开发时使用的状态管理工具。</p><p>如果在一个项目开发中频繁的使用组件传参的方式来同步<code>data</code>中的值，一旦项目变得很庞大，管理和维护这些值将是相当棘手的工作。为此，<code>Vue</code>为这些被多个组件频繁使用的值提供了一个统一管理的工具——<code>VueX</code>。</p><p>在具有<code>VueX</code>的Vue项目中，我们只需要把这些值定义在VueX中，即可在整个Vue项目的组件中使用。</p><h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><p>由于<code>VueX</code>是在学习<code>VueCli</code>后进行的，所以在下文出现的项目的目录请参照<code>@vue/cli 4.1.2</code>构建的目录。</p><p>以下步骤的前提是你已经完成了Vue项目构建，并且已转至该项目的文件目录下。</p><ul><li><p>npm安装Vuex</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i vuex -s<br></code></pre></td></tr></table></figure></li><li><p>在项目的根目录下新增一个<code>store</code>文件夹，在该文件夹内创建index.js<br>此时你的项目的<code>src</code>文件夹应当是这样的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">│  App.vue<br>│  main.js<br>│<br>├─assets<br>│      logo.png<br>│<br>├─components<br>│      HelloWorld.vue<br>│<br>├─router<br>│      index.js<br>│<br>├─views<br>│      About.vue<br>│      Home.vue<br>│<br>└─store<br>       index.js<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、VueX中的核心内容"><a href="#二、VueX中的核心内容" class="headerlink" title="二、VueX中的核心内容"></a>二、VueX中的核心内容</h2><p><img src="/blog/img/vue/vuex.png" alt="vuex"></p><p><strong>Vuex 主要有五部分：</strong></p><ol><li>state：包含了<code>store</code>中存储的各个状态。</li><li>getter：类似于 <code>Vue</code>中的计算属性，根据其他<code>getter</code> 或 <code>state</code> 计算返回值。</li><li>mutation：一组方法，是改变<code>store</code>中状态的执行者，<strong>只能是同步操作</strong>。</li><li>action： 一组方法，其中可以<strong>包含异步操作</strong>。</li><li>modules：模块化状态管理</li></ol><h3 id="2-1-State"><a href="#2-1-State" class="headerlink" title="2.1 State"></a>2.1 State</h3><p>Vuex 使用 <code>state</code> 来存储应用中需要共享的状态。为了能让 Vue 组件在 <code>state</code>更改后也随着更改，需要基于<code>state</code> 创建计算属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建一个 Counter 组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Counter</span> = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    count () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>  <span class="hljs-comment">// count 为某个状态</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Getter"><a href="#2-2-Getter" class="headerlink" title="2.2 Getter"></a>2.2 Getter</h3><p>类似于 Vue 中的 计算属性（可以认为是 store 的计算属性），<code>getter</code> 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>Getter 方法接受<code>state</code>作为其第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">todos</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">doneTodos</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-2-1-通过属性访问"><a href="#2-2-1-通过属性访问" class="headerlink" title="2.2.1 通过属性访问"></a>2.2.1 通过属性访问</h4><p>Getter 会暴露为 <code>store.getters</code> 对象，可以以属性的形式访问这些值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodos</span> <span class="hljs-comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span><br></code></pre></td></tr></table></figure><p>Getter 方法也接受 <code>state</code>和其他<code>getters</code>作为前两个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">doneTodosCount</span>: <span class="hljs-function">(<span class="hljs-params">state, getters</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span><br>  &#125;<br>&#125;<br>store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span> <span class="hljs-comment">// -&gt; 1</span><br></code></pre></td></tr></table></figure><p>我们可以很容易地在任何组件中使用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>: &#123;<br>  doneTodosCount () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> <code>getter</code> 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p><h4 id="2-2-2-通过方法访问"><a href="#2-2-2-通过方法访问" class="headerlink" title="2.2.2 通过方法访问"></a>2.2.2 通过方法访问</h4><p>也可以通过让 <code>getter</code>返回一个函数，来实现给 <code>getter</code> 传参。在对<code>store</code> 里的数组进行查询时非常有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)<br>  &#125;<br>&#125;<br>store.<span class="hljs-property">getters</span>.<span class="hljs-title function_">getTodoById</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong> <code>getter</code> 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p><h3 id="2-3-Mutation"><a href="#2-3-Mutation" class="headerlink" title="2.3 Mutation"></a>2.3 Mutation</h3><blockquote><p>更改 Vuex 的 <code>store</code> 中的状态的唯一方法是提交 <code>mutation</code>。也就是说，前面两个都是状态值本身，</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">mutations<br></code></pre></td></tr></table></figure><blockquote><p>才是改变状态的执行者。<br><strong>注意：<code>mutations</code>只能是同步地更改状态。</strong></p></blockquote><p>Vuex 中的 <code>mutation</code> 非常类似于事件：每个 <code>mutation</code> 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 <code>state</code> 作为第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      <span class="hljs-comment">// 变更状态</span><br>      state.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>调用 <code>store.commit</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="提交载荷（Payload）"><a href="#提交载荷（Payload）" class="headerlink" title="提交载荷（Payload）"></a>提交载荷（Payload）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">mutations</span>: &#123;<br>  increment (state, n) &#123;<br>    state.<span class="hljs-property">count</span> += n<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>其中，第一个参数是<code>state</code>，后面的参数是向 <code>store.commit</code> 传入的额外的参数，即 mutation 的 <strong>载荷（payload）</strong>。</p><p><code>store.commit</code>方法的第一个参数是要发起的<code>mutation</code>类型名称，后面的参数均当做额外数据传入<code>mutation</code>定义的方法中。</p><p><strong>规范的发起<code>mutation</code>的方式如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 以载荷形式</span><br>store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>，&#123;<br>  <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span>   <span class="hljs-comment">//这是额外的参数</span><br>&#125;)<br><br><span class="hljs-comment">// 或者使用对象风格的提交方式</span><br>store.<span class="hljs-title function_">commit</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;increment&#x27;</span>,<br>  <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span>   <span class="hljs-comment">//这是额外的参数</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>额外的参数会封装进一个对象，作为第二个参数传入<code>mutation</code>定义的方法中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">mutations</span>: &#123;<br>  increment (state, payload) &#123;<br>    state.<span class="hljs-property">count</span> += payload.<span class="hljs-property">amount</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-Action"><a href="#2-4-Action" class="headerlink" title="2.4 Action"></a>2.4 Action</h3><p>想要<strong>异步地更改状态</strong>，就需要使用<code>action</code>。<code>action</code>并不直接改变<code>state</code>，而是发起<code>mutation</code>。</p><p>注册一个简单的 <code>action</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    increment (context) &#123;<br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>Action 函数接受一个与 <code>store</code> 实例具有相同方法和属性的 <code>context</code> 对象，因此你可以调用 <code>context.commit</code> 提交一个 <code>mutation</code>，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">actions</span>: &#123;<br>  increment (&#123; commit &#125;) &#123;<br>    <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在action内部执行<strong>异步</strong>操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">actions</span>: &#123;<br>  incrementAsync (&#123; commit &#125;) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发起<code>action</code>的方法形式和发起<code>mutation</code>一样，只是换了个名字<code>dispatch</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 以对象形式分发Action</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;incrementAsync&#x27;</span>,<br>  <span class="hljs-attr">amount</span>: <span class="hljs-number">10</span><br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>Actions 支持同样的载荷方式和对象方式进行分发</p></blockquote><h4 id="2-4-1-Action处理异步的正确使用方式"><a href="#2-4-1-Action处理异步的正确使用方式" class="headerlink" title="2.4.1 Action处理异步的正确使用方式"></a>2.4.1 Action处理异步的正确使用方式</h4><p>想要使用<code>action</code>处理异步工作很简单，只需要将异步操作放到<code>action</code>中执行（如上面代码中的<code>setTimeout</code>）。</p><p>要想在异步操作完成后继续进行相应的流程操作，有两种方式:</p><ol><li><p><code>store.dispatch</code>返回相应<code>action</code>的执行结果，而action的处理函数返回的就是Promise，所以<code>store.dispatch</code>仍然返回一个Promise。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">actions</span>: &#123;<br>  actionA (&#123; commit &#125;) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;someMutation&#x27;</span>)<br>        <span class="hljs-title function_">resolve</span>()<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>现在可以写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;actionA&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>在另外一个 action 中也可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">actions</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  actionB (&#123; dispatch, commit &#125;) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;actionA&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;someOtherMutation&#x27;</span>)<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>利用<code>async/await</code> 进行组合action。代码更加简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span><br><br><span class="hljs-attr">actions</span>: &#123;<br>  <span class="hljs-keyword">async</span> actionA (&#123; commit &#125;) &#123;<br>    <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;gotData&#x27;</span>, <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>())<br>  &#125;,<br>  <span class="hljs-keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;actionA&#x27;</span>) <span class="hljs-comment">// 等待 actionA 完成</span><br>    <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;gotOtherData&#x27;</span>, <span class="hljs-keyword">await</span> <span class="hljs-title function_">getOtherData</span>())<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 <code>action</code> 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p></blockquote></li></ol><h4 id="2-4-2-Action与Mutation的区别"><a href="#2-4-2-Action与Mutation的区别" class="headerlink" title="2.4.2 Action与Mutation的区别"></a>2.4.2 Action与Mutation的区别</h4><p>Action 类似于 Mutation，不同在于：</p><ul><li>Action 提交的是 Mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作，而Mutation只能且必须是同步操作。</li></ul><h3 id="2-5-Module"><a href="#2-5-Module" class="headerlink" title="2.5 Module"></a>2.5 Module</h3><blockquote><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。<br>这时我们可以将 store 分割为<strong>模块（module）</strong>，每个模块拥有自己的 <code>state</code> 、 <code>getters</code> 、<code>mutations</code> 、<code>actions</code> 、甚至是嵌套子模块——从上至下进行同样方式的分割。</p></blockquote><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-attr">state</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">a</span>: moduleA,<br>    <span class="hljs-attr">b</span>: moduleB<br>  &#125;<br>&#125;)<br><br>store.<span class="hljs-property">state</span>.<span class="hljs-property">a</span> <span class="hljs-comment">// -&gt; moduleA 的状态</span><br>store.<span class="hljs-property">state</span>.<span class="hljs-property">b</span> <span class="hljs-comment">// -&gt; moduleB 的状态</span><br></code></pre></td></tr></table></figure><h4 id="嵌套子模块"><a href="#嵌套子模块" class="headerlink" title="嵌套子模块"></a>嵌套子模块</h4><p>首先创建子模块的文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// products.js</span><br><br><span class="hljs-comment">// initial state</span><br><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">added</span>: [],<br>  <span class="hljs-attr">checkoutStatus</span>: <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-comment">// getters</span><br><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-attr">checkoutStatus</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">checkoutStatus</span><br>&#125;<br><span class="hljs-comment">// actions</span><br><span class="hljs-keyword">const</span> actions = &#123;<br>  checkout (&#123; commit, state &#125;, products) &#123;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// mutations</span><br><span class="hljs-keyword">const</span> mutations = &#123;<br>  mutation1 (state, &#123; id &#125;) &#123;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  state,<br>  getters,<br>  actions,<br>  mutations<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在总模块中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> products <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/products&#x27;</span> <span class="hljs-comment">//引入子模块</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    products   <span class="hljs-comment">// 添加进模块中</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="三、各个模块与-Vue-组件结合"><a href="#三、各个模块与-Vue-组件结合" class="headerlink" title="三、各个模块与 Vue 组件结合"></a>三、各个模块与 Vue 组件结合</h2><p>将<code>state</code>和<code>getter</code>结合进组件需要使用<strong>计算属性</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>: &#123;<br>    count () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span> <br>      <span class="hljs-comment">// 或者 return this.$store.getter.count</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>将<code>mutation</code>和<code>action</code>结合进组件需要在<code>methods</code>中调用<code>this.$store.commit()</code>或者<code>this.$store.commit()</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>    changeDate () &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;change&#x27;</span>);<br>    &#125;,<br>    changeDateAsync () &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;changeAsync&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了简便起见，Vuex 提供了四个辅助函数方法用来方便的将这些功能结合进组件。</p><ol><li><code>mapState</code></li><li><code>mapGetters</code></li><li><code>mapMutations</code></li><li><code>mapActions</code></li></ol><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">computed</span>: &#123;<br>      localComputed () &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>        <span class="hljs-comment">// 使用对象展开运算符将此对象混入外部对象中</span><br>      ...<span class="hljs-title function_">mapState</span>(&#123;<br>        <span class="hljs-comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span><br>        <span class="hljs-title function_">count</span>(<span class="hljs-params">state</span>) &#123;<br>          <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localCount</span><br>        &#125;<br>      &#125;),<br>      ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>        <span class="hljs-title function_">getterCount</span>(<span class="hljs-params">state, getters</span>) &#123;<br>          <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localCount</span><br>        &#125;<br>      &#125;)<br>    &#125;<br>    <span class="hljs-attr">methods</span>: &#123;<br>      ...<span class="hljs-title function_">mapMutations</span>(&#123;<br>          <span class="hljs-comment">// 如果想将一个属性另取一个名字，使用以下形式。注意这是写在对象中</span><br>           <span class="hljs-attr">add</span>: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-comment">// 将 `this.add()` 映射为`this.$store.commit(&#x27;increment&#x27;)`</span><br>        &#125;),<br>      ...<span class="hljs-title function_">mapActions</span>(&#123;<br>          <span class="hljs-attr">add</span>: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果结合进组件之后不想改变名字，可以直接使用<strong>数组</strong>的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapActions</span>([<br>      <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br><br>      <span class="hljs-comment">// `mapActions` 也支持载荷：</span><br>      <span class="hljs-string">&#x27;incrementBy&#x27;</span> <span class="hljs-comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span><br>    ]),<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、规范目录结构"><a href="#四、规范目录结构" class="headerlink" title="四、规范目录结构"></a>四、规范目录结构</h2><p>如果把整个<code>store</code>都放在<code>index.js</code>中是不合理的，所以需要拆分。比较合适的目录格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">store:.<br>│  actions.js<br>│  getters.js<br>│  index.js<br>│  mutations.js <br>└─ modules<br>    mind.js // 思维导图模块<br>    product.js // 产品模块<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>VueX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue Router</title>
    <link href="/blog/2022/08/03/vue/vueRouter/"/>
    <url>/blog/2022/08/03/vue/vueRouter/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue Router</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/blog/2022/08/03/vue/vue/"/>
    <url>/blog/2022/08/03/vue/vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript-ES6</title>
    <link href="/blog/2022/08/03/JS/ES6/"/>
    <url>/blog/2022/08/03/JS/ES6/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="1-不一样的变量声明：const和let"><a href="#1-不一样的变量声明：const和let" class="headerlink" title="1.不一样的变量声明：const和let"></a>1.不一样的变量声明：const和let</h2><p>ES6推荐使用let声明局部变量，相比之前的var（无论声明在何处，都会被视为声明在函数的最顶部）<br>let和var声明的区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;全局变量&#x27;</span>;<br>&#123;<br>  <span class="hljs-keyword">let</span> x = <span class="hljs-string">&#x27;局部变量&#x27;</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 局部变量</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 全局变量</span><br></code></pre></td></tr></table></figure><p>let表示声明变量，而const表示声明常量，两者都为块级作用域；const 声明的变量都会被认为是常量，意思就是它的值被设置完成后就不能再修改了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br>a = <span class="hljs-number">0</span> <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><p>如果const的是一个对象，对象所包含的值是可以被修改的。抽象一点儿说，就是对象所指向的地址没有变就行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> student = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cc&#x27;</span> &#125;<br><br>student.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;yy&#x27;</span>;<span class="hljs-comment">// 不报错</span><br>student  = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yy&#x27;</span> &#125;;<span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>有几个点需要注意：<br>1、let 关键词声明的变量不具备变量提升（hoisting）特性<br>2、let 和 const 声明只在最靠近的一个块中（花括号内）有效<br>3、当使用常量 const 声明时，请使用大写变量，如：CAPITAL_CASING<br>4、const 在声明时必须被赋值</p><h2 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2.模板字符串"></a>2.模板字符串</h2><p>在ES6之前，我们往往这么处理模板字符串：<br>通过“\”和“+”来构建模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;This demonstrates the output of HTML \</span><br><span class="hljs-string">content to the page, including student&#x27;s\</span><br><span class="hljs-string">&quot;</span> + name + <span class="hljs-string">&quot;, &quot;</span> + seatNumber + <span class="hljs-string">&quot;, &quot;</span> + sex + <span class="hljs-string">&quot; and so on.&quot;</span>);<br></code></pre></td></tr></table></figure><p>而对ES6来说</p><ol><li>基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定；</li><li>ES6反引号(&#96;&#96;)直接搞定；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`This demonstrates the output of HTML content to the page, </span><br><span class="hljs-string">including student&#x27;s <span class="hljs-subst">$&#123;name&#125;</span>, <span class="hljs-subst">$&#123;seatNumber&#125;</span>, <span class="hljs-subst">$&#123;sex&#125;</span> and so on.`</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-箭头函数（Arrow-Functions）"><a href="#3-箭头函数（Arrow-Functions）" class="headerlink" title="3.箭头函数（Arrow Functions）"></a>3.箭头函数（Arrow Functions）</h2><p>ES6 中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 &#x3D;&gt;，紧接着是函数体；<br>箭头函数最直观的三个特点。<br>1、不需要 function 关键字来创建函数<br>2、省略 return 关键字<br>3、继承当前上下文的 this 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES5</span><br><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><span class="hljs-comment">// 使用箭头函数</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b;<br><br><span class="hljs-comment">// ES5</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].<span class="hljs-title function_">map</span>((<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span>;<br>&#125;).<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));<br>    <br><span class="hljs-comment">// 使用箭头函数</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>细节：当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略{} 和 return；</p><h2 id="4-函数的参数默认值"><a href="#4-函数的参数默认值" class="headerlink" title="4. 函数的参数默认值"></a>4. 函数的参数默认值</h2><p>在ES6之前，我们往往这样定义参数的默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6之前，当未传入参数时，text = &#x27;default&#x27;；</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printText</span>(<span class="hljs-params">text</span>) &#123;<br>    text = text || <span class="hljs-string">&#x27;default&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text);<br>&#125;<br><br><span class="hljs-comment">// ES6；</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printText</span>(<span class="hljs-params">text = <span class="hljs-string">&#x27;default&#x27;</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text);<br>&#125;<br><br><span class="hljs-title function_">printText</span>(<span class="hljs-string">&#x27;hello&#x27;</span>); <span class="hljs-comment">// hello</span><br><span class="hljs-title function_">printText</span>();<span class="hljs-comment">// default</span><br></code></pre></td></tr></table></figure><h2 id="5-Spread-x2F-Rest-操作符"><a href="#5-Spread-x2F-Rest-操作符" class="headerlink" title="5.Spread &#x2F; Rest 操作符"></a>5.Spread &#x2F; Rest 操作符</h2><p>Spread &#x2F; Rest 操作符指的是 …，具体是 Spread 还是 Rest 需要看上下文语境。<br>当被用于迭代器中时，它是一个 Spread 操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x,y,z</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x,y,z);<br>&#125;<br> <br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-title function_">foo</span>(...arr); <span class="hljs-comment">// 1 2 3</span><br></code></pre></td></tr></table></figure><p>当被用于函数传参时，是一个 Rest 操作符：当被用于函数传参时，是一个 Rest 操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args);<br>&#125;<br><span class="hljs-title function_">foo</span>( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h2 id="6-二进制和八进制字面量"><a href="#6-二进制和八进制字面量" class="headerlink" title="6.二进制和八进制字面量"></a>6.二进制和八进制字面量</h2><p>ES6 支持二进制和八进制的字面量，通过在数字前面添加 0o 或者0O 即可将其转换为八进制值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> oValue = <span class="hljs-number">0o10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oValue); <span class="hljs-comment">// 8</span><br> <br><span class="hljs-keyword">let</span> bValue = <span class="hljs-number">0b10</span>; <span class="hljs-comment">// 二进制使用 `0b` 或者 `0B`</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bValue); <span class="hljs-comment">// 2</span><br><br></code></pre></td></tr></table></figure><h2 id="7-对象和数组解构"><a href="#7-对象和数组解构" class="headerlink" title="7.对象和数组解构"></a>7.对象和数组解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 对象</span><br><span class="hljs-keyword">const</span> student = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Sam&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-comment">// 数组</span><br><span class="hljs-comment">// const student = [&#x27;Sam&#x27;, 22, &#x27;男&#x27;];</span><br><br><span class="hljs-comment">// ES5；</span><br><span class="hljs-keyword">const</span> name = student.<span class="hljs-property">name</span>;<br><span class="hljs-keyword">const</span> age = student.<span class="hljs-property">age</span>;<br><span class="hljs-keyword">const</span> sex = student.<span class="hljs-property">sex</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name + <span class="hljs-string">&#x27; --- &#x27;</span> + age + <span class="hljs-string">&#x27; --- &#x27;</span> + sex);<br><br><span class="hljs-comment">// ES6</span><br><span class="hljs-keyword">const</span> &#123; name, age, sex &#125; = student;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name + <span class="hljs-string">&#x27; --- &#x27;</span> + age + <span class="hljs-string">&#x27; --- &#x27;</span> + sex);<br></code></pre></td></tr></table></figure><h2 id="8-对象超类"><a href="#8-对象超类" class="headerlink" title="8.对象超类"></a>8.对象超类</h2><p>ES6 允许在对象中使用 super 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> parent = &#123;<br>  <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello from the Parent&quot;</span>);<br>  &#125;<br>&#125;<br> <br><span class="hljs-keyword">var</span> child = &#123;<br>  <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">foo</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello from the Child&quot;</span>);<br>  &#125;<br>&#125;<br> <br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(child, parent);<br>child.<span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// Hello from the Parent</span><br>             <span class="hljs-comment">// Hello from the Child</span><br></code></pre></td></tr></table></figure><h2 id="9-for…of-和-for…in"><a href="#9-for…of-和-for…in" class="headerlink" title="9.for…of 和 for…in"></a>9.for…of 和 for…in</h2><p>for…of 用于遍历一个迭代器，如数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> letters = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br>letters.<span class="hljs-property">size</span> = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> letter <span class="hljs-keyword">of</span> letters) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(letter);<br>&#125;<br><span class="hljs-comment">// 结果: a, b, c</span><br></code></pre></td></tr></table></figure><p>for…in 用来遍历对象中的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> stus = [<span class="hljs-string">&quot;Sam&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>];<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> stu <span class="hljs-keyword">in</span> stus) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stus[stu]);<br>  &#125;<br><span class="hljs-comment">// 结果: Sam, 22, 男</span><br></code></pre></td></tr></table></figure><h2 id="10-ES6中的类"><a href="#10-ES6中的类" class="headerlink" title="10.ES6中的类"></a>10.ES6中的类</h2><p>ES6 中支持 class 语法，不过，ES6的class不是新的对象继承模型，它只是原型链的语法糖表现形式。<br>函数中使用 static 关键词定义构造函数的的方法和属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I&#x27;m a student.&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;study!&#x27;</span>);<br>  &#125;<br> <br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">read</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Reading Now.&quot;</span>);<br>  &#125;<br>&#125;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Student</span>); <span class="hljs-comment">// function</span><br><span class="hljs-keyword">let</span> stu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(); <span class="hljs-comment">// &quot;I&#x27;m a student.&quot;</span><br>stu.<span class="hljs-title function_">study</span>(); <span class="hljs-comment">// &quot;study!&quot;</span><br>stu.<span class="hljs-title function_">read</span>(); <span class="hljs-comment">// &quot;Reading Now.&quot;</span><br></code></pre></td></tr></table></figure><p>类中的继承和超集：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I&#x27;m a phone.&quot;</span>);<br>  &#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MI</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Phone</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I&#x27;m a phone designed by xiaomi&quot;</span>);<br>  &#125;<br>&#125;<br> <br><span class="hljs-keyword">let</span> mi8 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">MI</span>();<br></code></pre></td></tr></table></figure><p>extends 允许一个子类继承父类，需要注意的是，子类的constructor 函数中需要执行 super() 函数。<br>有几点值得注意的是：</p><ul><li>类的声明不会提升（hoisting)，如果你要使用某个 Class，那你必须在使用之前定义它，否则会抛出一个 ReferenceError 的错误</li><li>在类中定义函数不需要使用 function 关键词</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript-Symbol</title>
    <link href="/blog/2022/08/03/JS/Symbol/"/>
    <url>/blog/2022/08/03/JS/Symbol/</url>
    
    <content type="html"><![CDATA[<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。</p><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><p>Symbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-keyword">typeof</span> s <span class="hljs-comment">// &quot;symbol&quot; </span><br></code></pre></td></tr></table></figure><p>上面代码中，变量s就是一个独一无二的值。typeof运算符的结果，表明变量s是 Symbol 数据类型，而不是字符串之类的其他类型。</p><p>注意，Symbol函数前不能使用new命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。<br>Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;bar&#x27;</span>); <br><br>s1 <span class="hljs-comment">// Symbol(foo) </span><br>s2 <span class="hljs-comment">// Symbol(bar)  </span><br><br>s1.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(foo)&quot; </span><br>s2.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(bar)&quot; </span><br></code></pre></td></tr></table></figure><p>上面代码中，s1和s2是两个 Symbol 值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</p><p>如果 Symbol 的参数是一个对象，就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;abc&#x27;</span>;<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> sym = <span class="hljs-title class_">Symbol</span>(obj);<br>sym <span class="hljs-comment">// Symbol(abc)</span><br></code></pre></td></tr></table></figure><p>注意，Symbol函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的Symbol函数的返回值是不相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 没有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>();<br><br>s1 === s2 <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 有参数的情况</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><br>s1 === s2 <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上面代码中，s1和s2都是Symbol函数的返回值，而且参数相同，但是它们是不相等的。</p><p>Symbol 值不能与其他类型的值进行运算，会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> sym = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;My symbol&#x27;</span>);<br><br><span class="hljs-string">&quot;your symbol is &quot;</span> + sym<br><span class="hljs-comment">// TypeError: can&#x27;t convert symbol to string</span><br><span class="hljs-string">`your symbol is <span class="hljs-subst">$&#123;sym&#125;</span>`</span><br><span class="hljs-comment">// TypeError: can&#x27;t convert symbol to string</span><br></code></pre></td></tr></table></figure><p>但是，Symbol 值可以显式转为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> sym = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;My symbol&#x27;</span>);<br><br><span class="hljs-title class_">String</span>(sym) <span class="hljs-comment">// &#x27;Symbol(My symbol)&#x27;</span><br>sym.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &#x27;Symbol(My symbol)&#x27;</span><br></code></pre></td></tr></table></figure><p>另外，Symbol 值也可以转为布尔值，但是不能转为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> sym = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-title class_">Boolean</span>(sym) <span class="hljs-comment">// true</span><br>!sym  <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">if</span> (sym) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-title class_">Number</span>(sym) <span class="hljs-comment">// TypeError</span><br>sym + <span class="hljs-number">2</span> <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure><h2 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h2><p>创建 Symbol 的时候，可以添加一个描述。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sym = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <br></code></pre></td></tr></table></figure><p>上面代码中，sym的描述就是字符串foo。<br>但是，读取这个描述需要将 Symbol 显式转为字符串，即下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sym = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <br><br><span class="hljs-title class_">String</span>(sym) <span class="hljs-comment">// &quot;Symbol(foo)&quot; </span><br>sym.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(foo)&quot; </span><br></code></pre></td></tr></table></figure><p>上面的用法不是很方便。<a href="https://github.com/tc39/proposal-Symbol-description">ES2019</a> 提供了一个实例属性description，直接返回 Symbol 的描述。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sym = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <br><br>sym.<span class="hljs-property">description</span> <span class="hljs-comment">// &quot;foo&quot; </span><br></code></pre></td></tr></table></figure><h2 id="作为属性名的-Symbol"><a href="#作为属性名的-Symbol" class="headerlink" title="作为属性名的 Symbol"></a>作为属性名的 Symbol</h2><p>由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br>a[mySymbol] = <span class="hljs-string">&#x27;Hello!&#x27;</span>;<br><br><span class="hljs-comment">// 第二种写法</span><br><span class="hljs-keyword">let</span> a = &#123;<br>  [mySymbol]: <span class="hljs-string">&#x27;Hello!&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// 第三种写法</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(a, mySymbol, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello!&#x27;</span> &#125;);<br><br><span class="hljs-comment">// 以上写法都得到同样结果</span><br>a[mySymbol] <span class="hljs-comment">// &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><p>上面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个 Symbol 值。<br>注意，Symbol 值作为对象属性名时，不能用点运算符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">const</span> a = &#123;&#125;;<br><br>a.<span class="hljs-property">mySymbol</span> = <span class="hljs-string">&#x27;Hello!&#x27;</span>;<br>a[mySymbol] <span class="hljs-comment">// undefined</span><br>a[<span class="hljs-string">&#x27;mySymbol&#x27;</span>] <span class="hljs-comment">// &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><p>上面代码中，因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个 Symbol 值。<br>同理，在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  [s]: <span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) &#123; ... &#125;<br>&#125;;<br><br>obj[s](<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>上面代码中，如果s不放在方括号中，该属性的键名就是字符串s，而不是s所代表的那个 Symbol 值。<br>采用增强的对象写法，上面代码的obj对象可以写得更简洁一些。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  [s](arg) &#123; ... &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p> Symbol 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> log = &#123;&#125;;<br><br>log.<span class="hljs-property">levels</span> = &#123;<br>  <span class="hljs-attr">DEBUG</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;debug&#x27;</span>),<br>  <span class="hljs-attr">INFO</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;info&#x27;</span>),<br>  <span class="hljs-attr">WARN</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;warn&#x27;</span>)<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(log.<span class="hljs-property">levels</span>.<span class="hljs-property">DEBUG</span>, <span class="hljs-string">&#x27;debug message&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(log.<span class="hljs-property">levels</span>.<span class="hljs-property">INFO</span>, <span class="hljs-string">&#x27;info message&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 常量使用 Symbol 值最大的好处，就是其他任何值都不可能有相同的值了，因此可以保证上面的switch语句会按设计的方式工作。<br>还有一点需要注意，Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。</p><h2 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h2><p>Symbol 作为属性名，遍历对象的时候，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。<br>但是，它也不是私有属性，有一个Object.getOwnPropertySymbols()方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><br>obj[a] = <span class="hljs-string">&#x27;Hello&#x27;</span>;<br>obj[b] = <span class="hljs-string">&#x27;World&#x27;</span>;<br><br><span class="hljs-keyword">const</span> objectSymbols = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj);<br><br>objectSymbols<br><span class="hljs-comment">// [Symbol(a), Symbol(b)]</span><br></code></pre></td></tr></table></figure><p>上面代码是Object.getOwnPropertySymbols()方法的示例，可以获取所有 Symbol 属性名。<br>下面是另一个例子，Object.getOwnPropertySymbols()方法与for…in循环、Object.getOwnPropertyNames方法进行对比的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br><span class="hljs-keyword">const</span> foo = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><br>obj[foo] = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 无输出</span><br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj) <span class="hljs-comment">// []</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj) <span class="hljs-comment">// [Symbol(foo)]</span><br></code></pre></td></tr></table></figure><p>上面代码中，使用for…in循环和Object.getOwnPropertyNames()方法都得不到 Symbol 键名，需要使用Object.getOwnPropertySymbols()方法。<br>另一个新的 API，Reflect.ownKeys()方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  [<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;my_key&#x27;</span>)]: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">enum</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">nonEnum</span>: <span class="hljs-number">3</span><br>&#125;;<br><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(obj)<br><span class="hljs-comment">//  [&quot;enum&quot;, &quot;nonEnum&quot;, Symbol(my_key)]</span><br></code></pre></td></tr></table></figure><p>由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> size = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;size&#x27;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>[size] = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">add</span>(<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-variable language_">this</span>[<span class="hljs-variable language_">this</span>[size]] = item;<br>    <span class="hljs-variable language_">this</span>[size]++;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">sizeOf</span>(<span class="hljs-params">instance</span>) &#123;<br>    <span class="hljs-keyword">return</span> instance[size];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collection</span>();<br><span class="hljs-title class_">Collection</span>.<span class="hljs-title function_">sizeOf</span>(x) <span class="hljs-comment">// 0</span><br><br>x.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-title class_">Collection</span>.<span class="hljs-title function_">sizeOf</span>(x) <span class="hljs-comment">// 1</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(x) <span class="hljs-comment">// [&#x27;0&#x27;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(x) <span class="hljs-comment">// [&#x27;0&#x27;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(x) <span class="hljs-comment">// [Symbol(size)]</span><br></code></pre></td></tr></table></figure><p>上面代码中，对象x的size属性是一个 Symbol 值，所以Object.keys(x)、Object.getOwnPropertyNames(x)都无法获取它。这就造成了一种非私有的内部方法的效果。</p><h2 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h2><p>有时，我们希望重新使用同一个 Symbol 值，Symbol.for()方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><br>s1 === s2 <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上面代码中，s1和s2都是 Symbol 值，但是它们都是由同样参数的Symbol.for方法生成的，所以实际上是同一个值。<br>Symbol.for()与Symbol()这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30 次，每次都会返回同一个 Symbol 值，但是调用Symbol(“cat”)30 次，会返回 30 个不同的 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;bar&quot;</span>) === <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;bar&quot;</span>)<br><span class="hljs-comment">// true</span><br><br><span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;bar&quot;</span>) === <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;bar&quot;</span>)<br><span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上面代码中，由于Symbol()写法没有登记机制，所以每次调用都会返回一个不同的值。<br>Symbol.keyFor()方法返回一个已登记的 Symbol 类型值的key。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s1) <span class="hljs-comment">// &quot;foo&quot;</span><br><br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s2) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>上面代码中，变量s2属于未登记的 Symbol 值，所以返回undefined。<br>注意，Symbol.for()为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> x = <span class="hljs-title function_">foo</span>();<br><span class="hljs-keyword">const</span> y = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x === y); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上面代码中，Symbol.for(‘bar’)是函数内部运行的，但是生成的 Symbol 值是登记在全局环境的。所以，第二次运行Symbol.for(‘bar’)可以取到这个 Symbol 值。<br>Symbol.for()的这个全局登记特性，可以用在不同的 iframe 或 service worker 中取到同一个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>);<br>iframe.<span class="hljs-property">src</span> = <span class="hljs-title class_">String</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(iframe);<br><br>iframe.<span class="hljs-property">contentWindow</span>.<span class="hljs-property">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>) === <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="内置的-Symbol-值"><a href="#内置的-Symbol-值" class="headerlink" title="内置的 Symbol 值"></a>内置的 Symbol 值</h2><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。</p><h3 id="Symbol-hasInstance"><a href="#Symbol-hasInstance" class="headerlink" title="Symbol.hasInstance"></a>Symbol.hasInstance</h3><p>对象的Symbol.hasInstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。比如，foo instanceof Foo在语言内部，实际调用的是Foo<a href="foo">Symbol.hasInstance</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">hasInstance</span>](foo) &#123;<br>    <span class="hljs-keyword">return</span> foo <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>;<br>  &#125;<br>&#125;<br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>() <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上面代码中，MyClass是一个类，new MyClass()会返回一个实例。该实例的Symbol.hasInstance方法，会在进行instanceof运算时自动调用，判断左侧的运算子是否为Array的实例。<br>下面是另一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Even</span> &#123;<br>  <span class="hljs-keyword">static</span> [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">hasInstance</span>](obj) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Number</span>(obj) % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Even</span> = &#123;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">hasInstance</span>](obj) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Number</span>(obj) % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-number">1</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Even</span> <span class="hljs-comment">// false</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Even</span> <span class="hljs-comment">// true</span><br><span class="hljs-number">12345</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Even</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a>Symbol.isConcatSpreadable</h3><p>对象的Symbol.isConcatSpreadable属性等于一个布尔值，表示该对象用于Array.prototype.concat()时，是否可以展开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>];<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">concat</span>(arr1, <span class="hljs-string">&#x27;e&#x27;</span>) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br>arr1[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>];<br>arr2[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] = <span class="hljs-literal">false</span>;<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">concat</span>(arr2, <span class="hljs-string">&#x27;e&#x27;</span>) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;c&#x27;,&#x27;d&#x27;], &#x27;e&#x27;]</span><br></code></pre></td></tr></table></figure><p>上面代码说明，数组的默认行为是可以展开，Symbol.isConcatSpreadable默认等于undefined。该属性等于true时，也有展开的效果。<br>类似数组的对象正好相反，默认不展开。它的Symbol.isConcatSpreadable属性设为true，才可以展开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">length</span>: <span class="hljs-number">2</span>, <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">concat</span>(obj, <span class="hljs-string">&#x27;e&#x27;</span>) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, obj, &#x27;e&#x27;]</span><br><br>obj[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] = <span class="hljs-literal">true</span>;<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">concat</span>(obj, <span class="hljs-string">&#x27;e&#x27;</span>) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></code></pre></td></tr></table></figure><p>Symbol.isConcatSpreadable属性也可以定义在类里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Array</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">args</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(args);<br>    <span class="hljs-variable language_">this</span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] = <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Array</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">args</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(args);<br>  &#125;<br>  get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A1</span>();<br>a1[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>;<br>a1[<span class="hljs-number">1</span>] = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A2</span>();<br>a2[<span class="hljs-number">0</span>] = <span class="hljs-number">5</span>;<br>a2[<span class="hljs-number">1</span>] = <span class="hljs-number">6</span>;<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">concat</span>(a1).<span class="hljs-title function_">concat</span>(a2)<br><span class="hljs-comment">// [1, 2, 3, 4, [5, 6]]</span><br></code></pre></td></tr></table></figure><p>上面代码中，类A1是可展开的，类A2是不可展开的，所以使用concat时有不一样的结果。<br>注意，Symbol.isConcatSpreadable的位置差异，A1是定义在实例上，A2是定义在类本身，效果相同。</p><h3 id="Symbol-species"><a href="#Symbol-species" class="headerlink" title="Symbol.species"></a>Symbol.species</h3><p>对象的Symbol.species属性，指向一个构造函数。创建衍生对象时，会使用该属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Array</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyArray</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">const</span> b = a.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x);<br><span class="hljs-keyword">const</span> c = a.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x &gt; <span class="hljs-number">1</span>);<br><br>b <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">MyArray</span> <span class="hljs-comment">// true</span><br>c <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">MyArray</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上面代码中，子类MyArray继承了父类Array，a是MyArray的实例，b和c是a的衍生对象。你可能会认为，b和c都是调用数组方法生成的，所以应该是数组（Array的实例），但实际上它们也是MyArray的实例。<br>Symbol.species属性就是为了解决这个问题而提供的。现在，我们可以为MyArray设置Symbol.species属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Array</span> &#123;<br>  <span class="hljs-keyword">static</span> get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">species</span>]() &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，由于定义了Symbol.species属性，创建衍生对象时就会使用这个属性返回的函数，作为构造函数。这个例子也说明，定义Symbol.species属性要采用get取值器。默认的Symbol.species属性等同于下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">species</span>]() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，再来看前面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Array</span> &#123;<br>  <span class="hljs-keyword">static</span> get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">species</span>]() &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>; &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyArray</span>();<br><span class="hljs-keyword">const</span> b = a.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x);<br><br>b <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">MyArray</span> <span class="hljs-comment">// false</span><br>b <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上面代码中，a.map(x &#x3D;&gt; x)生成的衍生对象，就不是MyArray的实例，而直接就是Array的实例。<br>再看一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Promise</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Promise</span> &#123;<br>  <span class="hljs-keyword">static</span> get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">species</span>]() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">T1</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> <span class="hljs-title function_">r</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v) <span class="hljs-keyword">instanceof</span> <span class="hljs-variable constant_">T1</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">T2</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> <span class="hljs-title function_">r</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v) <span class="hljs-keyword">instanceof</span> <span class="hljs-variable constant_">T2</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上面代码中，T2定义了Symbol.species属性，T1没有。结果就导致了创建衍生对象时（then方法），T1调用的是自身的构造方法，而T2调用的是Promise的构造方法。<br>总之，Symbol.species的作用在于，实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。它主要的用途是，有些类库是在基类的基础上修改的，那么子类使用继承的方法时，作者可能希望返回基类的实例，而不是子类的实例。</p><h3 id="Symbol-match"><a href="#Symbol-match" class="headerlink" title="Symbol.match"></a>Symbol.match</h3><p>对象的Symbol.match属性，指向一个函数。当执行str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">match</span>(regexp)<br><span class="hljs-comment">// 等同于</span><br>regexp[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">match</span>](<span class="hljs-variable language_">this</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMatcher</span> &#123;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">match</span>](string) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span>.<span class="hljs-title function_">indexOf</span>(string);<br>  &#125;<br>&#125;<br><br><span class="hljs-string">&#x27;e&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMatcher</span>()) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-replace"><a href="#Symbol-replace" class="headerlink" title="Symbol.replace"></a>Symbol.replace</h3><p>对象的Symbol.replace属性，指向一个方法，当该对象被String.prototype.replace方法调用时，会返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">replace</span>(searchValue, replaceValue)<br><span class="hljs-comment">// 等同于</span><br>searchValue[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">replace</span>](<span class="hljs-variable language_">this</span>, replaceValue)<br></code></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> x = &#123;&#125;;<br>x[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">replace</span>] = <span class="hljs-function">(<span class="hljs-params">...s</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br><br><span class="hljs-string">&#x27;Hello&#x27;</span>.<span class="hljs-title function_">replace</span>(x, <span class="hljs-string">&#x27;World&#x27;</span>) <span class="hljs-comment">// [&quot;Hello&quot;, &quot;World&quot;]</span><br></code></pre></td></tr></table></figure><p>Symbol.replace方法会收到两个参数，第一个参数是replace方法正在作用的对象，上面例子是Hello，第二个参数是替换后的值，上面例子是World。</p><h3 id="Symbol-search"><a href="#Symbol-search" class="headerlink" title="Symbol.search"></a>Symbol.search</h3><p>对象的Symbol.search属性，指向一个方法，当该对象被String.prototype.search方法调用时，会返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">search</span>(regexp)<br><span class="hljs-comment">// 等同于</span><br>regexp[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">search</span>](<span class="hljs-variable language_">this</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySearch</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>  &#125;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">search</span>](string) &#123;<br>    <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>  &#125;<br>&#125;<br><span class="hljs-string">&#x27;foobar&#x27;</span>.<span class="hljs-title function_">search</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MySearch</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-split"><a href="#Symbol-split" class="headerlink" title="Symbol.split"></a>Symbol.split</h3><p>对象的Symbol.split属性，指向一个方法，当该对象被String.prototype.split方法调用时，会返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">split</span>(separator, limit)<br><span class="hljs-comment">// 等同于</span><br>separator[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">split</span>](<span class="hljs-variable language_">this</span>, limit)<br></code></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySplitter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>  &#125;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">split</span>](string) &#123;<br>    <span class="hljs-keyword">let</span> index = string.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>    <span class="hljs-keyword">if</span> (index === -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> string;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [<br>      string.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, index),<br>      string.<span class="hljs-title function_">substr</span>(index + <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>.<span class="hljs-property">length</span>)<br>    ];<br>  &#125;<br>&#125;<br><br><span class="hljs-string">&#x27;foobar&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MySplitter</span>(<span class="hljs-string">&#x27;foo&#x27;</span>))<br><span class="hljs-comment">// [&#x27;&#x27;, &#x27;bar&#x27;]</span><br><br><span class="hljs-string">&#x27;foobar&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MySplitter</span>(<span class="hljs-string">&#x27;bar&#x27;</span>))<br><span class="hljs-comment">// [&#x27;foo&#x27;, &#x27;&#x27;]</span><br><br><span class="hljs-string">&#x27;foobar&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MySplitter</span>(<span class="hljs-string">&#x27;baz&#x27;</span>))<br><span class="hljs-comment">// &#x27;foobar&#x27;</span><br></code></pre></td></tr></table></figure><p>上面方法使用Symbol.split方法，重新定义了字符串对象的split方法的行为，</p><h3 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h3><p>对象的Symbol.iterator属性，指向该对象的默认遍历器方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myIterable = &#123;&#125;;<br>myIterable[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span>* () &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;;<br><br>[...myIterable] <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><p>对象进行for…of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器，详细介绍参见《Iterator 和 for…of 循环》一章。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection</span> &#123;<br>  *[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable language_">this</span>[i] !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">this</span>[i];<br>      ++i;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> myCollection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collection</span>();<br>myCollection[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>myCollection[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> myCollection) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h3><p>对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。<br>Symbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。</p><ul><li>Number：该场合需要转成数值</li><li>String：该场合需要转成字符串</li><li>Default：该场合可以转成数值，也可以转成字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toPrimitive</span>](hint) &#123;<br>    <span class="hljs-keyword">switch</span> (hint) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;number&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;string&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;str&#x27;</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;default&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;default&#x27;</span>;<br>      <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();<br>     &#125;<br>   &#125;<br>&#125;;<br><br><span class="hljs-number">2</span> * obj <span class="hljs-comment">// 246</span><br><span class="hljs-number">3</span> + obj <span class="hljs-comment">// &#x27;3default&#x27;</span><br>obj == <span class="hljs-string">&#x27;default&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">String</span>(obj) <span class="hljs-comment">// &#x27;str&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h3><p>对象的Symbol.toStringTag属性，指向一个方法。在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例一</span><br>(&#123;[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]: <span class="hljs-string">&#x27;Foo&#x27;</span>&#125;.<span class="hljs-title function_">toString</span>())<br><span class="hljs-comment">// &quot;[object Foo]&quot;</span><br><br><span class="hljs-comment">// 例二</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection</span> &#123;<br>  get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;xxx&#x27;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collection</span>();<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(x) <span class="hljs-comment">// &quot;[object xxx]&quot;</span><br></code></pre></td></tr></table></figure><p>ES6 新增内置对象的Symbol.toStringTag属性值如下。</p><ul><li>JSON[Symbol.toStringTag]：’JSON’</li><li>Math[Symbol.toStringTag]：’Math’</li><li>Module 对象M[Symbol.toStringTag]：’Module’</li><li>ArrayBuffer.prototype[Symbol.toStringTag]：’ArrayBuffer’</li><li>DataView.prototype[Symbol.toStringTag]：’DataView’</li><li>Map.prototype[Symbol.toStringTag]：’Map’</li><li>Promise.prototype[Symbol.toStringTag]：’Promise’</li><li>Set.prototype[Symbol.toStringTag]：’Set’</li><li>%TypedArray%.prototype[Symbol.toStringTag]：’Uint8Array’等</li><li>WeakMap.prototype[Symbol.toStringTag]：’WeakMap’</li><li>WeakSet.prototype[Symbol.toStringTag]：’WeakSet’</li><li>%MapIteratorPrototype%[Symbol.toStringTag]：’Map Iterator’</li><li>%SetIteratorPrototype%[Symbol.toStringTag]：’Set Iterator’</li><li>%StringIteratorPrototype%[Symbol.toStringTag]：’String Iterator’</li><li>Symbol.prototype[Symbol.toStringTag]：’Symbol’</li><li>Generator.prototype[Symbol.toStringTag]：’Generator’</li><li>GeneratorFunction.prototype[Symbol.toStringTag]：’GeneratorFunction’</li></ul><h3 id="Symbol-unscopables"><a href="#Symbol-unscopables" class="headerlink" title="Symbol.unscopables"></a>Symbol.unscopables</h3><p>对象的Symbol.unscopables属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">unscopables</span>]<br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//   copyWithin: true,</span><br><span class="hljs-comment">//   entries: true,</span><br><span class="hljs-comment">//   fill: true,</span><br><span class="hljs-comment">//   find: true,</span><br><span class="hljs-comment">//   findIndex: true,</span><br><span class="hljs-comment">//   includes: true,</span><br><span class="hljs-comment">//   keys: true</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">unscopables</span>])<br><span class="hljs-comment">// [&#x27;copyWithin&#x27;, &#x27;entries&#x27;, &#x27;fill&#x27;, &#x27;find&#x27;, &#x27;findIndex&#x27;, &#x27;includes&#x27;, &#x27;keys&#x27;]</span><br></code></pre></td></tr></table></figure><p>上面代码说明，数组有 7 个属性，会被with命令排除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 没有 unscopables 时</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; &#125;;<br><br><span class="hljs-keyword">with</span> (<span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>  <span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// 1</span><br>&#125;<br><br><span class="hljs-comment">// 有 unscopables 时</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<br>  get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">unscopables</span>]() &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">foo</span>: <span class="hljs-literal">true</span> &#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; &#125;;<br><br><span class="hljs-keyword">with</span> (<span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>  <span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// 2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码通过指定Symbol.unscopables属性，使得with语法块不会在当前作用域寻找foo属性，即foo将指向外层作用域的变量。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://es6.ruanyifeng.com/#docs/symbol">https://es6.ruanyifeng.com/#docs/symbol</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript-Object</title>
    <link href="/blog/2022/08/03/JS/Object/"/>
    <url>/blog/2022/08/03/JS/Object/</url>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Object-prototype-constructor"><a href="#Object-prototype-constructor" class="headerlink" title="Object.prototype.constructor"></a>Object.prototype.constructor</h3><p>返回创建实例对象的 <code>[Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)</code> 构造函数的引用。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。对原始类型来说，如<code>1</code>，<code>true</code>和<code>&quot;test&quot;</code>，该值只可读。</p><ul><li>语法 <ul><li>obj.constructor</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = &#123;&#125;;<br>o.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>;<br>o.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> a = [];<br>a.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>;<br>a.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">3</span>);<br>n.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Number</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p><code>**Object.assign()**</code> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p><ul><li>语法 <ul><li><p>Object.assign(target, …sources)</p></li><li><p>参数 </p><ul><li><p><strong>target</strong> </p><ul><li>目标对象。</li></ul></li><li><p><strong>sources</strong> </p><ul><li>源对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>目标对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> source = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">5</span> &#125;;<br><br><span class="hljs-keyword">const</span> returnedTarget = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<br><span class="hljs-comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(returnedTarget);<br><span class="hljs-comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span><br></code></pre></td></tr></table></figure><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p><code>**Object.create()**</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。 （请打开浏览器控制台以查看运行结果。）</p><ul><li>语法 <ul><li><p>Object.create(proto，[propertiesObject])</p></li><li><p>参数 </p><ul><li><p><strong>proto</strong> </p><ul><li>新创建对象的原型对象。</li></ul></li><li><p><strong>propertiesObject</strong> </p><ul><li>可选。需要传入一个对象，该对象的属性类型参照<code>[Object.defineProperties()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)</code>的第二个参数。如果该参数被指定且不为 <code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code>，该传入对象的自有可枚举属性(即其自身定义的属性，而不是其原型链上的枚举属性)将为新创建的对象添加指定的属性值和对应的属性描述符。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个新对象，带着指定的原型对象和属性。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">isHuman</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">printIntroduction</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`My name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>. Am I human? <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.isHuman&#125;</span>`</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> me = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person);<br><br>me.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Matthew&#x27;</span>; <span class="hljs-comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br>me.<span class="hljs-property">isHuman</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// inherited properties can be overwritten</span><br><br>me.<span class="hljs-title function_">printIntroduction</span>();<br><span class="hljs-comment">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties()"></a>Object.defineProperties()</h3><p><code>**Object.defineProperties()**</code> 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</p><ul><li>语法 <ul><li>Object.defineProperties(obj, props)</li><li>参数 <ul><li><p><strong>obj</strong> </p><ul><li>在其上定义或修改属性的对象。</li></ul></li><li><p><strong>props</strong> </p><ul><li>要定义其可枚举属性或修改的属性描述符的对象。对象中存在的属性描述符主要有两种：数据描述符和访问器描述符（更多详情，请参阅<code>[Object.defineProperty()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)</code>）。描述符具有以下键： <ul><li><strong>configurable</strong> <ul><li><code>true</code> 只有该属性描述符的类型可以被改变并且该属性可以从对应对象中删除。</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>**默认为 **<code>**false**</code></p><pre><code class="hljs">        - **enumerable**            - `true` 只有在枚举相应对象上的属性时该属性显现。</code></pre><p>**默认为 **<code>**false**</code></p><pre><code class="hljs">        - **value**            - 与属性关联的值。可以是任何有效的JavaScript值（数字，对象，函数等）。</code></pre><p><strong>默认为 <strong><code>[**undefined**](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code></strong>.</strong></p><pre><code class="hljs">        - **writable**            - `true`只有与该属性相关联的值被[assignment operator](https://developer.mozilla.org/zh-CN/docs/conflicting/Web/JavaScript/Reference/Operators_8d54701de06af40a7c984517cbe87b3e)改变时。</code></pre><p>**默认为 **<code>**false**</code></p><pre><code class="hljs">        - **get**            - 作为该属性的 getter 函数，如果没有 getter 则为`[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)`。函数返回值将被用作属性的值。</code></pre><p>**默认为 **<code>[**undefined**](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code></p><pre><code class="hljs">        - **set**            - 作为属性的 setter 函数，如果没有 setter 则为`[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)`。函数将仅接受参数赋值给该属性的新值。</code></pre><p>**默认为 **<code>[**undefined**](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code></p><ul><li>返回值 <ul><li>传递给函数的对象。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(obj, &#123;<br>  <span class="hljs-string">&#x27;property1&#x27;</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-string">&#x27;property2&#x27;</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-comment">// etc. etc.</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p><code>**Object.defineProperty()**</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><ul><li>语法 <ul><li><p>Object.defineProperty(obj, prop, descriptor)</p></li><li><p>参数 </p><ul><li><p><strong>obj</strong> </p><ul><li>要定义属性的对象。</li></ul></li><li><p><strong>prop</strong> </p><ul><li>要定义或修改的属性的名称或 <code>[Symbol](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)</code> 。</li></ul></li><li><p><strong>descriptor</strong> </p><ul><li>要定义或修改的属性描述符。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>被传递给函数的对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> object1 = &#123;&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(object1, <span class="hljs-string">&#x27;property1&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">42</span>,<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span><br>&#125;);<br><br>object1.<span class="hljs-property">property1</span> = <span class="hljs-number">77</span>;<br><span class="hljs-comment">// throws an error in strict mode</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-property">property1</span>);<br><span class="hljs-comment">// expected output: 42</span><br></code></pre></td></tr></table></figure><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p><code>**Object.entries()**</code>方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <code>[for...in](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in)</code> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。</p><ul><li>语法 <ul><li><p>Object.entries(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>可以返回其可枚举属性的键值对的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>给定对象自身可枚举属性的键值对数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">democonst obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)); <span class="hljs-comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;], [&#x27;baz&#x27;, 42] ]</span><br><br><span class="hljs-comment">// array like object</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)); <span class="hljs-comment">// [ [&#x27;0&#x27;, &#x27;a&#x27;], [&#x27;1&#x27;, &#x27;b&#x27;], [&#x27;2&#x27;, &#x27;c&#x27;] ]</span><br><br><span class="hljs-comment">// array like object with random key ordering</span><br><span class="hljs-keyword">const</span> anObj = &#123; <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(anObj)); <span class="hljs-comment">// [ [&#x27;2&#x27;, &#x27;b&#x27;], [&#x27;7&#x27;, &#x27;c&#x27;], [&#x27;100&#x27;, &#x27;a&#x27;] ]</span><br><br><span class="hljs-comment">// getFoo is property which isn&#x27;t enumerable</span><br><span class="hljs-keyword">const</span> myObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(&#123;&#125;, &#123; <span class="hljs-attr">getFoo</span>: &#123; <span class="hljs-title function_">value</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>; &#125; &#125; &#125;);<br>myObj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(myObj)); <span class="hljs-comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;] ]</span><br><br><span class="hljs-comment">// non-object argument will be coerced to an object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)); <span class="hljs-comment">// [ [&#x27;0&#x27;, &#x27;f&#x27;], [&#x27;1&#x27;, &#x27;o&#x27;], [&#x27;2&#x27;, &#x27;o&#x27;] ]</span><br><br><span class="hljs-comment">// iterate through key-value gracefully</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">9</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> <span class="hljs-subst">$&#123;value&#125;</span>`</span>); <span class="hljs-comment">// &quot;a 5&quot;, &quot;b 7&quot;, &quot;c 9&quot;</span><br>&#125;<br><br><span class="hljs-comment">// Or, using array extras</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> <span class="hljs-subst">$&#123;value&#125;</span>`</span>); <span class="hljs-comment">// &quot;a 5&quot;, &quot;b 7&quot;, &quot;c 9&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h3><p><code>**Object.freeze()**</code> 方法可以<strong>冻结</strong>一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。<code>freeze()</code> 返回和传入的参数相同的对象。</p><ul><li>语法 <ul><li><p>Object.freeze(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>要被冻结的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>被冻结的对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">prop</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// 新的属性会被添加, 已存在的属性可能</span><br><span class="hljs-comment">// 会被修改或移除</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;baz&#x27;</span>;<br>obj.<span class="hljs-property">lumpy</span> = <span class="hljs-string">&#x27;woof&#x27;</span>;<br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">prop</span>;<br><br><span class="hljs-comment">// 作为参数传递的对象与返回的对象都被冻结</span><br><span class="hljs-comment">// 所以不必保存返回的对象（因为两个对象全等）</span><br><span class="hljs-keyword">var</span> o = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj);<br><br>o === obj; <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(obj); <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// 现在任何改变都会失效</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;quux&#x27;</span>; <span class="hljs-comment">// 静默地不做任何事</span><br><span class="hljs-comment">// 静默地不添加此属性</span><br>obj.<span class="hljs-property">quaxxor</span> = <span class="hljs-string">&#x27;the friendly duck&#x27;</span>;<br><br><span class="hljs-comment">// 在严格模式，如此行为将抛出 TypeErrors</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>  obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;sparky&#x27;</span>; <span class="hljs-comment">// throws a TypeError</span><br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">quaxxor</span>; <span class="hljs-comment">// 返回true，因为quaxxor属性从来未被添加</span><br>  obj.<span class="hljs-property">sparky</span> = <span class="hljs-string">&#x27;arf&#x27;</span>; <span class="hljs-comment">// throws a TypeError</span><br>&#125;<br><br><span class="hljs-title function_">fail</span>();<br><br><span class="hljs-comment">// 试图通过 Object.defineProperty 更改属性</span><br><span class="hljs-comment">// 下面两个语句都会抛出 TypeError.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;ohai&#x27;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">17</span> &#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;foo&#x27;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;eit&#x27;</span> &#125;);<br><br><span class="hljs-comment">// 也不能更改原型</span><br><span class="hljs-comment">// 下面两个语句都会抛出 TypeError.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">20</span> &#125;)<br>obj.<span class="hljs-property">__proto__</span> = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">20</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h3><p><code>**Object.fromEntries()**</code> 方法把键值对列表转换为一个对象。</p><ul><li>语法 <ul><li><p>Object.fromEntries(iterable);</p></li><li><p>参数 </p><ul><li><strong>iterable</strong> <ul><li>类似 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> 、 <code>[Map](https://developer.mozilla.org/zh-CN/docs/orphaned/Web/JavaScript/Reference/Global_Objects/Map)</code> 或者其它实现了<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol">可迭代协议</a>的可迭代对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个由该迭代对象条目提供对应属性的新对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> entries = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>],<br>  [<span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-number">42</span>]<br>]);<br><br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(entries);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br><span class="hljs-comment">// expected output: Object &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span><br></code></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h3><p><code>**Object.getOwnPropertyDescriptor()**</code> 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</p><ul><li>语法 <ul><li><p>Object.getOwnPropertyDescriptor(obj, prop)</p></li><li><p>参数 </p><ul><li><p><strong>obj</strong> </p><ul><li>需要查找的目标对象</li></ul></li><li><p><strong>prop</strong> </p><ul><li>目标对象内属性名称</li></ul></li></ul></li><li><p>返回值 </p><ul><li>如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 <code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code>。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o, d;<br><br>o = &#123; <span class="hljs-keyword">get</span> <span class="hljs-title function_">foo</span>() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">17</span>; &#125; &#125;;<br>d = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(o, <span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-comment">// d &#123;</span><br><span class="hljs-comment">//   configurable: true,</span><br><span class="hljs-comment">//   enumerable: true,</span><br><span class="hljs-comment">//   get: /*the getter function*/,</span><br><span class="hljs-comment">//   set: undefined</span><br><span class="hljs-comment">// &#125;</span><br><br>o = &#123; <span class="hljs-attr">bar</span>: <span class="hljs-number">42</span> &#125;;<br>d = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(o, <span class="hljs-string">&quot;bar&quot;</span>);<br><span class="hljs-comment">// d &#123;</span><br><span class="hljs-comment">//   configurable: true,</span><br><span class="hljs-comment">//   enumerable: true,</span><br><span class="hljs-comment">//   value: 42,</span><br><span class="hljs-comment">//   writable: true</span><br><span class="hljs-comment">// &#125;</span><br><br>o = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(o, <span class="hljs-string">&quot;baz&quot;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">8675309</span>,<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br>&#125;);<br>d = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(o, <span class="hljs-string">&quot;baz&quot;</span>);<br><span class="hljs-comment">// d &#123;</span><br><span class="hljs-comment">//   value: 8675309,</span><br><span class="hljs-comment">//   writable: false,</span><br><span class="hljs-comment">//   enumerable: false,</span><br><span class="hljs-comment">//   configurable: false</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h3><p><code>**Object.getOwnPropertyDescriptors()**</code> 方法用来获取一个对象的所有自身属性的描述符。</p><ul><li>语法 <ul><li><p>Object.getOwnPropertyDescriptors(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>任意对象</li></ul></li></ul></li><li><p>返回值 </p><ul><li>所指定对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(obj),<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj)<br>);<br></code></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h3><p><code>**Object.getOwnPropertyNames()**</code>方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p><ul><li>语法 <ul><li><p>Object.getOwnPropertyNames(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>一个对象，其自身的可枚举和不可枚举属性的名称被返回。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>在给定对象上找到的自身属性对应的字符串数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(arr).<span class="hljs-title function_">sort</span>()); <span class="hljs-comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]</span><br><br><span class="hljs-comment">// 类数组对象</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;c&quot;</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj).<span class="hljs-title function_">sort</span>()); <span class="hljs-comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span><br><br><span class="hljs-comment">// 使用Array.forEach输出属性名和属性值</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">val, idx, array</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val + <span class="hljs-string">&quot; -&gt; &quot;</span> + obj[val]);<br>&#125;);<br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 0 -&gt; a</span><br><span class="hljs-comment">// 1 -&gt; b</span><br><span class="hljs-comment">// 2 -&gt; c</span><br><br><span class="hljs-comment">//不可枚举属性</span><br><span class="hljs-keyword">var</span> my_obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(&#123;&#125;, &#123;<br>  <span class="hljs-attr">getFoo</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>; &#125;,<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;);<br>my_obj.<span class="hljs-property">foo</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(my_obj).<span class="hljs-title function_">sort</span>()); <span class="hljs-comment">// [&quot;foo&quot;, &quot;getFoo&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols()"></a>Object.getOwnPropertySymbols()</h3><p><code>**Object.getOwnPropertySymbols()**</code> 方法返回一个给定对象自身的所有 Symbol 属性的数组。</p><ul><li>语法 <ul><li><p>Object.getOwnPropertySymbols(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>要返回 Symbol 属性的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>在给定对象自身上找到的所有 Symbol 属性的数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><br>obj[a] = <span class="hljs-string">&quot;localSymbol&quot;</span>;<br>obj[b] = <span class="hljs-string">&quot;globalSymbol&quot;</span>;<br><br><span class="hljs-keyword">var</span> objectSymbols = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objectSymbols.<span class="hljs-property">length</span>); <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objectSymbols)         <span class="hljs-comment">// [Symbol(a), Symbol(b)]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objectSymbols[<span class="hljs-number">0</span>])      <span class="hljs-comment">// Symbol(a)</span><br></code></pre></td></tr></table></figure><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p><code>**Object.getPrototypeOf()**</code> 方法返回指定对象的原型（内部<code>[[Prototype]]</code>属性的值）。</p><ul><li>语法 <ul><li><p>Object.getPrototypeOf(object)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>要返回其原型的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>给定对象的原型。如果没有继承属性，则返回 <code>[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)</code> 。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proto = &#123;&#125;;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(proto);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(obj) === proto; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/</span>;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(reg) === <span class="hljs-title class_">RegExp</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h3><p><code>**hasOwnProperty()**</code> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p><ul><li>语法 <ul><li><p>obj.hasOwnProperty(prop)</p></li><li><p>参数 </p><ul><li><strong>prop</strong> <ul><li>要检测的属性的 <code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> 字符串形式表示的名称，或者 <code>[Symbol](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)</code>。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>用来判断某个对象是否含有指定的属性的布尔值 <code>[Boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)</code>。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>o.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;prop&#x27;</span>); <span class="hljs-comment">// 返回 false</span><br>o.<span class="hljs-property">prop</span> = <span class="hljs-string">&#x27;exists&#x27;</span>;<br>o.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;prop&#x27;</span>); <span class="hljs-comment">// 返回 true</span><br><span class="hljs-keyword">delete</span> o.<span class="hljs-property">prop</span>;<br>o.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;prop&#x27;</span>); <span class="hljs-comment">// 返回 false</span><br></code></pre></td></tr></table></figure><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p><code>**Object.is()**</code> 方法判断两个值是否为<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">同一个值</a>。</p><ul><li>语法 <ul><li><p>Object.is(value1, value2);</p></li><li><p>参数 </p><ul><li><p><strong>value1</strong> </p><ul><li>被比较的第一个值。</li></ul></li><li><p><strong>value2</strong> </p><ul><li>被比较的第二个值。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个 <code>[Boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)</code> 类型标示两个参数是否是同一个值。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>);     <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">window</span>);   <span class="hljs-comment">// true</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>);     <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>([], []);           <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">var</span> foo = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">var</span> bar = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(foo, foo);         <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(foo, bar);         <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);       <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 特例</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>);            <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-number">0</span>, +<span class="hljs-number">0</span>);            <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(-<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>);           <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Object-isExtensible"><a href="#Object-isExtensible" class="headerlink" title="Object.isExtensible()"></a>Object.isExtensible()</h3><p><code>**Object.isExtensible()**</code> 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</p><ul><li>语法 <ul><li><p>Object.isExtensible(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>需要检测的对象</li></ul></li></ul></li><li><p>返回值 </p><ul><li>表示给定对象是否可扩展的一个<code>[Boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Boolean)</code> 。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 新对象默认是可扩展的.</span><br><span class="hljs-keyword">var</span> empty = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(empty); <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// ...可以变的不可扩展.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(empty);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(empty); <span class="hljs-comment">// === false</span><br><br><span class="hljs-comment">// 密封对象是不可扩展的.</span><br><span class="hljs-keyword">var</span> sealed = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(&#123;&#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(sealed); <span class="hljs-comment">// === false</span><br><br><span class="hljs-comment">// 冻结对象也是不可扩展.</span><br><span class="hljs-keyword">var</span> frozen = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(&#123;&#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(frozen); <span class="hljs-comment">// === false</span><br></code></pre></td></tr></table></figure><h3 id="Object-isFrozen"><a href="#Object-isFrozen" class="headerlink" title="Object.isFrozen()"></a>Object.isFrozen()</h3><p><code>**Object.isFrozen()**</code>方法判断一个对象是否被<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">冻结</a>。</p><ul><li>语法 <ul><li><p>Object.isFrozen(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>被检测的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>表示给定对象是否被冻结的<code>[Boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)</code>。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 一个对象默认是可扩展的,所以它也是非冻结的.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(&#123;&#125;); <span class="hljs-comment">// === false</span><br><br><span class="hljs-comment">// 一个不可扩展的空对象同时也是一个冻结对象.</span><br><span class="hljs-keyword">var</span> vacuouslyFrozen = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(&#123;&#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(vacuouslyFrozen) <span class="hljs-comment">//=== true;</span><br><br><span class="hljs-comment">// 一个非空对象默认也是非冻结的.</span><br><span class="hljs-keyword">var</span> oneProp = &#123; <span class="hljs-attr">p</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(oneProp) <span class="hljs-comment">//=== false</span><br><br><span class="hljs-comment">// 让这个对象变的不可扩展,并不意味着这个对象变成了冻结对象,</span><br><span class="hljs-comment">// 因为p属性仍然是可以配置的(而且可写的).</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(oneProp);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(oneProp) <span class="hljs-comment">//=== false</span><br><br><span class="hljs-comment">// 此时,如果删除了这个属性,则它会成为一个冻结对象.</span><br><span class="hljs-keyword">delete</span> oneProp.<span class="hljs-property">p</span>;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(oneProp) <span class="hljs-comment">//=== true</span><br><br><span class="hljs-comment">// 一个不可扩展的对象,拥有一个不可写但可配置的属性,则它仍然是非冻结的.</span><br><span class="hljs-keyword">var</span> nonWritable = &#123; <span class="hljs-attr">e</span>: <span class="hljs-string">&quot;plep&quot;</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(nonWritable);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(nonWritable, <span class="hljs-string">&quot;e&quot;</span>, &#123; <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span> &#125;); <span class="hljs-comment">// 变得不可写</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(nonWritable) <span class="hljs-comment">//=== false</span><br><br><span class="hljs-comment">// 把这个属性改为不可配置,会让这个对象成为冻结对象.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(nonWritable, <span class="hljs-string">&quot;e&quot;</span>, &#123; <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span> &#125;); <span class="hljs-comment">// 变得不可配置</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(nonWritable) <span class="hljs-comment">//=== true</span><br><br><span class="hljs-comment">// 一个不可扩展的对象,拥有一个不可配置但可写的属性,则它仍然是非冻结的.</span><br><span class="hljs-keyword">var</span> nonConfigurable = &#123; <span class="hljs-attr">release</span>: <span class="hljs-string">&quot;the kraken!&quot;</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(nonConfigurable);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(nonConfigurable, <span class="hljs-string">&quot;release&quot;</span>, &#123; <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(nonConfigurable) <span class="hljs-comment">//=== false</span><br><br><span class="hljs-comment">// 把这个属性改为不可写,会让这个对象成为冻结对象.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(nonConfigurable, <span class="hljs-string">&quot;release&quot;</span>, &#123; <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(nonConfigurable) <span class="hljs-comment">//=== true</span><br><br><span class="hljs-comment">// 一个不可扩展的对象,值拥有一个访问器属性,则它仍然是非冻结的.</span><br><span class="hljs-keyword">var</span> accessor = &#123; <span class="hljs-keyword">get</span> <span class="hljs-title function_">food</span>() &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;yum&quot;</span>; &#125; &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(accessor);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(accessor) <span class="hljs-comment">//=== false</span><br><br><span class="hljs-comment">// ...但把这个属性改为不可配置,会让这个对象成为冻结对象.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(accessor, <span class="hljs-string">&quot;food&quot;</span>, &#123; <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span> &#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(accessor) <span class="hljs-comment">//=== true</span><br><br><span class="hljs-comment">// 使用Object.freeze是冻结一个对象最方便的方法.</span><br><span class="hljs-keyword">var</span> frozen = &#123; <span class="hljs-number">1</span>: <span class="hljs-number">81</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(frozen) <span class="hljs-comment">//=== false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(frozen);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(frozen) <span class="hljs-comment">//=== true</span><br><br><span class="hljs-comment">// 一个冻结对象也是一个密封对象.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(frozen) <span class="hljs-comment">//=== true</span><br><br><span class="hljs-comment">// 当然,更是一个不可扩展的对象.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(frozen) <span class="hljs-comment">//=== false</span><br></code></pre></td></tr></table></figure><h3 id="Object-prototype-isPrototypeOf"><a href="#Object-prototype-isPrototypeOf" class="headerlink" title="Object.prototype.isPrototypeOf()"></a>Object.prototype.isPrototypeOf()</h3><p><code>**isPrototypeOf()**</code> 方法用于测试一个对象是否存在于另一个对象的原型链上。</p><ul><li>语法 <ul><li><p>prototypeObj.isPrototypeOf(object)</p></li><li><p>参数 </p><ul><li><strong>object</strong> <ul><li>在该对象的原型链上搜寻</li></ul></li></ul></li><li><p>返回值 </p><ul><li><code>[Boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)</code>，表示调用对象是否在另一个对象的原型链上。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bar</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Baz</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">Baz</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-keyword">var</span> baz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Baz</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Baz</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(baz)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Bar</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(baz)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(baz)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(baz)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Object-isSealed"><a href="#Object-isSealed" class="headerlink" title="Object.isSealed()"></a>Object.isSealed()</h3><p><code>**Object.isSealed()**</code> 方法判断一个对象是否被密封。</p><ul><li>语法 <ul><li><p>Object.isSealed(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>要被检查的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>表示给定对象是否被密封的一个<code>[Boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)</code> 。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 新建的对象默认不是密封的.</span><br><span class="hljs-keyword">var</span> empty = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(empty); <span class="hljs-comment">// === false</span><br><br><span class="hljs-comment">// 如果你把一个空对象变的不可扩展，则它同时也会变成个密封对象.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(empty);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(empty); <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// 但如果这个对象不是空对象，则它不会变成密封对象,因为密封对象的所有自身属性必须是不可配置的.</span><br><span class="hljs-keyword">var</span> hasProp = &#123; <span class="hljs-attr">fee</span>: <span class="hljs-string">&quot;fie foe fum&quot;</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(hasProp);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(hasProp); <span class="hljs-comment">// === false</span><br><br><span class="hljs-comment">// 如果把这个属性变的不可配置，则这个属性也就成了密封对象.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(hasProp, <span class="hljs-string">&#x27;fee&#x27;</span>, &#123;<br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br>&#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(hasProp); <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// 最简单的方法来生成一个密封对象，当然是使用Object.seal.</span><br><span class="hljs-keyword">var</span> sealed = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(sealed);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(sealed); <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// 一个密封对象同时也是不可扩展的.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(sealed); <span class="hljs-comment">// === false</span><br><br><span class="hljs-comment">// 一个密封对象也可以是一个冻结对象,但不是必须的.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(sealed); <span class="hljs-comment">// === true ，所有的属性都是不可写的</span><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(&#123; <span class="hljs-attr">p</span>: <span class="hljs-number">3</span> &#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(s2); <span class="hljs-comment">// === false， 属性&quot;p&quot;可写</span><br><br><span class="hljs-keyword">var</span> s3 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(&#123; <span class="hljs-keyword">get</span> <span class="hljs-title function_">p</span>() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125; &#125;);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(s3); <span class="hljs-comment">// === true ，访问器属性不考虑可写不可写,只考虑是否可配置</span><br></code></pre></td></tr></table></figure><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p><code>**Object.keys()**</code> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</p><ul><li>语法 <ul><li><p>Object.keys(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>要返回其枚举自身属性的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个表示给定对象的所有可枚举属性的字符串数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// simple array</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(arr)); <span class="hljs-comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span><br><br><span class="hljs-comment">// array like object</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)); <span class="hljs-comment">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span><br><br><span class="hljs-comment">// array like object with random key ordering</span><br><span class="hljs-keyword">var</span> anObj = &#123; <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(anObj)); <span class="hljs-comment">// console: [&#x27;2&#x27;, &#x27;7&#x27;, &#x27;100&#x27;]</span><br><br><span class="hljs-comment">// getFoo is a property which isn&#x27;t enumerable</span><br><span class="hljs-keyword">var</span> myObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(&#123;&#125;, &#123;<br>  <span class="hljs-attr">getFoo</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>; &#125;<br>  &#125;<br>&#125;);<br>myObj.<span class="hljs-property">foo</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(myObj)); <span class="hljs-comment">// console: [&#x27;foo&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h3><p><code>**Object.preventExtensions()**</code>方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。</p><ul><li>语法 <ul><li><p>Object.preventExtensions(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>将要变得不可扩展的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>已经不可扩展的对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Object.preventExtensions将原对象变的不可扩展,并且返回原对象.</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(obj);<br>obj === obj2;  <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 字面量方式定义的对象默认是可扩展的.</span><br><span class="hljs-keyword">var</span> empty = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(empty) <span class="hljs-comment">//=== true</span><br><br><span class="hljs-comment">// ...但可以改变.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(empty);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(empty) <span class="hljs-comment">//=== false</span><br><br><span class="hljs-comment">// 使用Object.defineProperty方法为一个不可扩展的对象添加新属性会抛出异常.</span><br><span class="hljs-keyword">var</span> nonExtensible = &#123; <span class="hljs-attr">removable</span>: <span class="hljs-literal">true</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(nonExtensible);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(nonExtensible, <span class="hljs-string">&quot;new&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">8675309</span> &#125;); <span class="hljs-comment">// 抛出TypeError异常</span><br><br><span class="hljs-comment">// 在严格模式中,为一个不可扩展对象的新属性赋值会抛出TypeError异常.</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>)<br>&#123;<br>  <span class="hljs-string">&quot;use strict&quot;</span>;<br>  nonExtensible.<span class="hljs-property">newProperty</span> = <span class="hljs-string">&quot;FAIL&quot;</span>; <span class="hljs-comment">// throws a TypeError</span><br>&#125;<br><span class="hljs-title function_">fail</span>();<br></code></pre></td></tr></table></figure><h3 id="Object-prototype-propertyIsEnumerable"><a href="#Object-prototype-propertyIsEnumerable" class="headerlink" title="Object.prototype.propertyIsEnumerable()"></a>Object.prototype.propertyIsEnumerable()</h3><p><code>**propertyIsEnumerable()**</code> 方法返回一个布尔值，表示指定的属性是否可枚举。</p><ul><li>语法 <ul><li><p>obj.propertyIsEnumerable(prop)</p></li><li><p>参数 </p><ul><li><strong>prop</strong> <ul><li>需要测试的属性名。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>用来表示指定的属性名是否可枚举的<code>[布尔值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)</code>。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> object1 = &#123;&#125;;<br><span class="hljs-keyword">const</span> array1 = [];<br>object1.<span class="hljs-property">property1</span> = <span class="hljs-number">42</span>;<br>array1[<span class="hljs-number">0</span>] = <span class="hljs-number">42</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-title function_">propertyIsEnumerable</span>(<span class="hljs-string">&#x27;property1&#x27;</span>));<br><span class="hljs-comment">// expected output: true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">propertyIsEnumerable</span>(<span class="hljs-number">0</span>));<br><span class="hljs-comment">// expected output: true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">propertyIsEnumerable</span>(<span class="hljs-string">&#x27;length&#x27;</span>));<br><span class="hljs-comment">// expected output: false</span><br></code></pre></td></tr></table></figure><h3 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h3><p><code>**Object.seal()**</code>方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</p><ul><li>语法 <ul><li><p>Object.seal(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>将要被密封的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>被密封的对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">prop</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// 可以添加新的属性</span><br><span class="hljs-comment">// 可以更改或删除现有的属性</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;baz&#x27;</span>;<br>obj.<span class="hljs-property">lumpy</span> = <span class="hljs-string">&#x27;woof&#x27;</span>;<br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">prop</span>;<br><br><span class="hljs-keyword">var</span> o = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>(obj);<br><br>o === obj; <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>(obj); <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// 仍然可以修改密封对象的属性值</span><br>obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;quux&#x27;</span>;<br><br><br><span class="hljs-comment">// 但是你不能将属性重新定义成为访问器属性</span><br><span class="hljs-comment">// 反之亦然</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;foo&#x27;</span>, &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;g&#x27;</span>; &#125;<br>&#125;); <span class="hljs-comment">// throws a TypeError</span><br><br><span class="hljs-comment">// 除了属性值以外的任何变化，都会失败.</span><br>obj.<span class="hljs-property">quaxxor</span> = <span class="hljs-string">&#x27;the friendly duck&#x27;</span>;<br><span class="hljs-comment">// 添加属性将会失败</span><br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">foo</span>;<br><span class="hljs-comment">// 删除属性将会失败</span><br><br><span class="hljs-comment">// 在严格模式下，这样的尝试将会抛出错误</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fail</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">foo</span>; <span class="hljs-comment">// throws a TypeError</span><br>  obj.<span class="hljs-property">sparky</span> = <span class="hljs-string">&#x27;arf&#x27;</span>; <span class="hljs-comment">// throws a TypeError</span><br>&#125;<br><span class="hljs-title function_">fail</span>();<br><br><span class="hljs-comment">// 通过Object.defineProperty添加属性将会报错</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;ohai&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">17</span><br>&#125;); <span class="hljs-comment">// throws a TypeError</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;foo&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;eit&#x27;</span><br>&#125;); <span class="hljs-comment">// 通过Object.defineProperty修改属性值</span><br></code></pre></td></tr></table></figure><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p><strong>Object.setPrototypeOf()</strong> 方法设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  <code>[null](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)</code>。</p><ul><li>语法 <ul><li>Object.setPrototypeOf(obj, prototype)</li><li>参数 <ul><li><p><strong>obj</strong> </p><ul><li>要设置其原型的对象。.</li></ul></li><li><p><strong>prototype</strong> </p><ul><li>该对象的新原型(一个对象 或 null).</li></ul></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Mammal</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">isMammal</span> = <span class="hljs-string">&#x27;yes&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MammalSpecies</span>(<span class="hljs-params">sMammalSpecies</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">species</span> = sMammalSpecies;<br>&#125;<br><br><span class="hljs-title class_">MammalSpecies</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mammal</span>();<br><span class="hljs-title class_">MammalSpecies</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">MammalSpecies</span>;<br><br><span class="hljs-keyword">var</span> oCat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MammalSpecies</span>(<span class="hljs-string">&#x27;Felis&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oCat.<span class="hljs-property">isMammal</span>);<br><span class="hljs-comment">// &#x27;yes&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">breathing</span> = <span class="hljs-string">&#x27;yes&#x27;</span>;<br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">appendChain</span>(oCat, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>());<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oCat.<span class="hljs-property">breathing</span>);<br><span class="hljs-comment">// &#x27;yes&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Object-prototype-toLocaleString"><a href="#Object-prototype-toLocaleString" class="headerlink" title="Object.prototype.toLocaleString()"></a>Object.prototype.toLocaleString()</h3><p><code>**toLocaleString()**</code> 方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。</p><ul><li>语法 <ul><li>obj.toLocaleString();</li><li>返回值 <ul><li>表示对象的字符串。</li></ul></li></ul></li></ul><h3 id="Object-prototype-toSource"><a href="#Object-prototype-toSource" class="headerlink" title="Object.prototype.toSource()"></a>Object.prototype.toSource()</h3><p><code>**toSource()**</code>方法返回一个表示对象源代码的字符串。</p><ul><li>语法 <ul><li>Object.toSource(); obj.toSource()</li><li>返回值 <ul><li>一个表示对象的源代码的字符串。</li></ul></li></ul></li></ul><h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h3><p><code>**toString()**</code> 方法返回一个表示该对象的字符串。</p><ul><li>语法 <ul><li>obj.toString()</li><li>返回值 <ul><li>一个表示该对象的字符串。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;Gabby&#x27;</span>);<br><br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">dogToString</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog1.<span class="hljs-title function_">toString</span>());<br><span class="hljs-comment">// expected output: &quot;Gabby&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Object-prototype-valueOf"><a href="#Object-prototype-valueOf" class="headerlink" title="Object.prototype.valueOf()"></a>Object.prototype.valueOf()</h3><p><code>**valueOf()**</code> 方法返回指定对象的原始值。</p><ul><li>语法 <ul><li>object.valueOf()</li><li>返回值 <ul><li>返回值为该对象的原始值。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Array：返回数组对象本身</span><br><span class="hljs-keyword">var</span> array = [<span class="hljs-string">&quot;ABC&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">5</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array.<span class="hljs-title function_">valueOf</span>() === array);   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// Date：当前时间距1970年1月1日午夜的毫秒数</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2013</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18</span>, <span class="hljs-number">23</span>, <span class="hljs-number">11</span>, <span class="hljs-number">59</span>, <span class="hljs-number">230</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">valueOf</span>());   <span class="hljs-comment">// 1376838719230</span><br><br><span class="hljs-comment">// Number：返回数字值</span><br><span class="hljs-keyword">var</span> num =  <span class="hljs-number">15.26540</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">valueOf</span>());   <span class="hljs-comment">// 15.2654</span><br><br><span class="hljs-comment">// 布尔：返回布尔值true或false</span><br><span class="hljs-keyword">var</span> bool = <span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bool.<span class="hljs-title function_">valueOf</span>() === bool);   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// new一个Boolean对象</span><br><span class="hljs-keyword">var</span> newBool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// valueOf()返回的是true，两者的值相等</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newBool.<span class="hljs-title function_">valueOf</span>() == newBool);   <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 但是不全等，两者类型不相等，前者是boolean类型，后者是object类型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newBool.<span class="hljs-title function_">valueOf</span>() === newBool);   <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// Function：返回函数本身</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( foo.<span class="hljs-title function_">valueOf</span>() === foo );   <span class="hljs-comment">// true</span><br><span class="hljs-keyword">var</span> foo2 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;return x + y;&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( foo2.<span class="hljs-title function_">valueOf</span>() );<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ƒ anonymous(x,y</span><br><span class="hljs-comment">) &#123;</span><br><span class="hljs-comment">return x + y;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// Object：返回对象本身</span><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( obj.<span class="hljs-title function_">valueOf</span>() === obj );   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// String：返回字符串值</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;http://www.xyz.com&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( str.<span class="hljs-title function_">valueOf</span>() === str );   <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// new一个字符串对象</span><br><span class="hljs-keyword">var</span> str2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;http://www.xyz.com&quot;</span>);<br><span class="hljs-comment">// 两者的值相等，但不全等，因为类型不同，前者为string类型，后者为object类型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( str2.<span class="hljs-title function_">valueOf</span>() === str2 );   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p><code>**Object.values()**</code>方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用<code>[for...in](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in)</code>循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。</p><ul><li>语法 <ul><li><p>Object.values(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>被返回可枚举属性值的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个包含对象自身的所有可枚举属性值的数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj)); <span class="hljs-comment">// [&#x27;bar&#x27;, 42]</span><br><br><span class="hljs-comment">// array like object</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj)); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><br><span class="hljs-comment">// array like object with random key ordering</span><br><span class="hljs-comment">// when we use numeric keys, the value returned in a numerical order according to the keys</span><br><span class="hljs-keyword">var</span> an_obj = &#123; <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(an_obj)); <span class="hljs-comment">// [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;]</span><br><br><span class="hljs-comment">// getFoo is property which isn&#x27;t enumerable</span><br><span class="hljs-keyword">var</span> my_obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(&#123;&#125;, &#123; <span class="hljs-attr">getFoo</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>; &#125; &#125; &#125;);<br>my_obj.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(my_obj)); <span class="hljs-comment">// [&#x27;bar&#x27;]</span><br><br><span class="hljs-comment">// non-object argument will be coerced to an object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)); <span class="hljs-comment">// [&#x27;f&#x27;, &#x27;o&#x27;, &#x27;o&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript-Array</title>
    <link href="/blog/2022/08/03/JS/Array/"/>
    <url>/blog/2022/08/03/JS/Array/</url>
    
    <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="Array-length"><a href="#Array-length" class="headerlink" title="Array.length"></a>Array.length</h3><p><code>**length**</code> 是<code>Array</code>的实例属性。返回或设置一个数组中的元素个数。该值是一个无符号 32-bit 整数，并且总是大于数组最高项的下标。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> length = numbers.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>  numbers[i] *= <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">// 遍历后的结果 [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Array-prototype-iterator"><a href="#Array-prototype-iterator" class="headerlink" title="Array.prototype@@iterator"></a>Array.prototype<a href="">@@iterator</a></h3><p><code>**@@iterator**</code> 属性和 <code>[Array.prototype.values()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values)</code> 属性的初始值是同一个函数对象。</p><ul><li>语法 <ul><li>arr<a href="">Symbol.iterator</a></li><li>返回值 <ul><li>数组的 <strong>iterator</strong> 方法，默认情况下，与 <code>[values()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values)</code> 返回值相同， <code>arr[Symbol.iterator]</code> 则会返回 <code>[values()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values)</code> 函数。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>];<br><span class="hljs-keyword">var</span> eArr = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br><span class="hljs-comment">// 浏览器必须支持 for...of 循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> letter <span class="hljs-keyword">of</span> eArr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(letter);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get-Array-species"><a href="#get-Array-species" class="headerlink" title="get Array[@@species]"></a>get Array[@@species]</h3><p><code>**Array[@@species]**</code> 访问器属性返回 <code>Array</code> 的构造函数。</p><ul><li>语法 <ul><li>Array[Symbol.species]</li><li>返回值 <ul><li><code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> 的构造函数。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">species</span>]; <span class="hljs-comment">// function Array()</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a>Array.prototype.concat()</h3><p><code>**concat()**</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><ul><li>语法 <ul><li><p>var new_array &#x3D; old_array.concat(value1[, value2[, …[, valueN]]])</p></li><li><p>参数 </p><ul><li>valueN(可选) <ul><li>数组和&#x2F;或值，将被合并到一个新的数组中。如果省略了所有 <code>valueN</code> 参数，则 <code>concat</code> 会返回调用此方法的现存数组的一个浅拷贝。详情请参阅下文描述。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>新的 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> 实例。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">var</span> numeric = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>alpha.<span class="hljs-title function_">concat</span>(numeric);<br><span class="hljs-comment">// result in [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-copyWithin"><a href="#Array-prototype-copyWithin" class="headerlink" title="Array.prototype.copyWithin()"></a>Array.prototype.copyWithin()</h3><p><code>**copyWithin()**</code>方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</p><ul><li>语法 <ul><li>arr.copyWithin(target[, start[, end]]) </li><li>参数 <ul><li><p><strong>target</strong> </p><ul><li>0 为基底的索引，复制序列到该位置。如果是负数，<code>target</code> 将从末尾开始计算。<br>如果 <code>target</code> 大于等于 <code>arr.length</code>，将会不发生拷贝。如果 <code>target</code> 在 <code>start</code> 之后，复制的序列将被修改以符合 <code>arr.length</code>。</li></ul></li><li><p><strong>start</strong> </p><ul><li>0 为基底的索引，开始复制元素的起始位置。如果是负数，<code>start</code> 将从末尾开始计算。</li></ul></li></ul></li></ul></li></ul><p>如果 <code>start</code> 被忽略，<code>copyWithin</code> 将会从0开始复制。 </p><pre><code class="hljs">  -  **end**      -  0 为基底的索引，开始复制元素的结束位置。`copyWithin` 将会拷贝到该位置，但不包括 `end` 这个位置的元素。如果是负数， `end` 将从末尾开始计算。</code></pre><p>如果 <code>end</code> 被忽略，<code>copyWithin</code> 方法将会一直复制至数组结尾（默认为 <code>arr.length</code>）。 </p><ul><li>返回值 <ul><li>改变后的数组。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">copyWithin</span>(-<span class="hljs-number">2</span>)<br><span class="hljs-comment">// [1, 2, 3, 1, 2]</span><br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment">// [4, 5, 3, 4, 5]</span><br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-comment">// [4, 2, 3, 4, 5]</span><br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">copyWithin</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-comment">// [1, 2, 3, 3, 4]</span><br><br>[].<span class="hljs-property">copyWithin</span>.<span class="hljs-title function_">call</span>(&#123;<span class="hljs-attr">length</span>: <span class="hljs-number">5</span>, <span class="hljs-number">3</span>: <span class="hljs-number">1</span>&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// &#123;0: 1, 3: 1, length: 5&#125;</span><br><br><span class="hljs-comment">// ES2015 Typed Arrays are subclasses of Array</span><br><span class="hljs-keyword">var</span> i32a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br><br>i32a.<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// Int32Array [3, 4, 5, 4, 5]</span><br><br><span class="hljs-comment">// On platforms that are not yet ES2015 compliant:</span><br>[].<span class="hljs-property">copyWithin</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-comment">// Int32Array [4, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-entries"><a href="#Array-prototype-entries" class="headerlink" title="Array.prototype.entries()"></a>Array.prototype.entries()</h3><p><code>**entries()**</code> 方法返回一个新的<strong>Array Iterator</strong>对象，该对象包含数组中每个索引的键&#x2F;值对。</p><ul><li>语法 <ul><li>arr.entries()</li><li>返回值 <ul><li>一个新的 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> 迭代器对象。<a href="https://www.ecma-international.org/ecma-262/6.0/#sec-createarrayiterator">Array Iterator</a>是对象，它的原型（<strong>proto</strong>:Array Iterator）上有一个<a href="https://www.ecma-international.org/ecma-262/6.0/#sec-%25arrayiteratorprototype%25.next">next</a>方法，可用用于遍历迭代器取得原数组的[key,value]。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、 Array Iterator</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> iterator = arr.<span class="hljs-title function_">entries</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator);<br><br><span class="hljs-comment">/*Array Iterator &#123;&#125;</span><br><span class="hljs-comment">         __proto__:Array Iterator</span><br><span class="hljs-comment">         next:ƒ next()</span><br><span class="hljs-comment">         Symbol(Symbol.toStringTag):&quot;Array Iterator&quot;</span><br><span class="hljs-comment">         __proto__:Object</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 2、iterator.next()</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> iterator = arr.<span class="hljs-title function_">entries</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());<br><br><span class="hljs-comment">/*&#123;value: Array(2), done: false&#125;</span><br><span class="hljs-comment">          done:false</span><br><span class="hljs-comment">          value:(2) [0, &quot;a&quot;]</span><br><span class="hljs-comment">           __proto__: Object</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// iterator.next()返回一个对象，对于有元素的数组，</span><br><span class="hljs-comment">// 是next&#123; value: Array(2), done: false &#125;；</span><br><span class="hljs-comment">// next.done 用于指示迭代器是否完成：在每次迭代时进行更新而且都是false，</span><br><span class="hljs-comment">// 直到迭代器结束done才是true。</span><br><span class="hljs-comment">// next.value是一个[&quot;key&quot;,&quot;value&quot;]的数组，是返回的迭代器中的元素值。</span><br><br><span class="hljs-comment">// 3、iterator.next方法运行</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> iter = arr.<span class="hljs-title function_">entries</span>();<br><span class="hljs-keyword">var</span> a = [];<br><br><span class="hljs-comment">// for(var i=0; i&lt; arr.length; i++)&#123;   // 实际使用的是这个</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt; arr.<span class="hljs-property">length</span>+<span class="hljs-number">1</span>; i++)&#123;    <span class="hljs-comment">// 注意，是length+1，比数组的长度大</span><br>    <span class="hljs-keyword">var</span> tem = iter.<span class="hljs-title function_">next</span>();             <span class="hljs-comment">// 每次迭代时更新next</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tem.<span class="hljs-property">done</span>);             <span class="hljs-comment">// 这里可以看到更新后的done都是false</span><br>    <span class="hljs-keyword">if</span>(tem.<span class="hljs-property">done</span> !== <span class="hljs-literal">true</span>)&#123;             <span class="hljs-comment">// 遍历迭代器结束done才是true</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tem.<span class="hljs-property">value</span>);<br>        a[i]=tem.<span class="hljs-property">value</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);                         <span class="hljs-comment">// 遍历完毕，输出next.value的数组</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every()"></a>Array.prototype.every()</h3><p><code>**every()**</code>** **方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><ul><li>语法 <ul><li><p>arr.every(callback(element[, index[, array]])[, thisArg])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>用来测试每个元素的函数，它可以接收三个参数： <ul><li><p><strong>element</strong> </p><ul><li>用于测试的当前值。</li></ul></li><li><p><strong>index</strong>(可选) </p><ul><li>用于测试的当前值的索引。</li></ul></li><li><p><strong>array</strong>(可选) </p><ul><li>调用 <code>every</code> 的当前数组。</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>执行 <code>callback</code> 时使用的 <code>this</code> 值。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>如果回调函数的每一次返回都为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthy</a> 值，返回 <code>**true**</code> ，否则返回 <code>**false**</code>。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isBigEnough</span>(<span class="hljs-params">element, index, array</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt;= <span class="hljs-number">10</span>;<br>&#125;<br>[<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>].<span class="hljs-title function_">every</span>(isBigEnough);   <span class="hljs-comment">// false</span><br>[<span class="hljs-number">12</span>, <span class="hljs-number">54</span>, <span class="hljs-number">18</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>].<span class="hljs-title function_">every</span>(isBigEnough); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-fill"><a href="#Array-prototype-fill" class="headerlink" title="Array.prototype.fill()"></a>Array.prototype.fill()</h3><p><code>**fill()**</code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p><ul><li>语法 <ul><li><p>arr.fill(value[, start[, end]])</p></li><li><p>参数 </p><ul><li><p><strong>value</strong> </p><ul><li>用来填充数组元素的值。</li></ul></li><li><p><strong>start</strong> </p><ul><li>起始索引，默认值为0。</li></ul></li><li><p><strong>end</strong> </p><ul><li>终止索引，默认值为 <code>this.length</code>。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>修改后的数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>);               <span class="hljs-comment">// [4, 4, 4]</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);            <span class="hljs-comment">// [1, 4, 4]</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);         <span class="hljs-comment">// [1, 4, 3]</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);         <span class="hljs-comment">// [1, 2, 3]</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);         <span class="hljs-comment">// [1, 2, 3]</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>);       <span class="hljs-comment">// [4, 2, 3]</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>);     <span class="hljs-comment">// [1, 2, 3]</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);         <span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">4</span>);                <span class="hljs-comment">// [4, 4, 4]</span><br>[].<span class="hljs-property">fill</span>.<span class="hljs-title function_">call</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">3</span> &#125;, <span class="hljs-number">4</span>);  <span class="hljs-comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span><br><br><span class="hljs-comment">// Objects by reference.</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">fill</span>(&#123;&#125;) <span class="hljs-comment">// [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="hljs-comment">// 需要注意如果fill的参数为引用类型，会导致都执行都一个引用类型</span><br><span class="hljs-comment">// 如 arr[0] === arr[1] 为true</span><br>arr[<span class="hljs-number">0</span>].<span class="hljs-property">hi</span> = <span class="hljs-string">&quot;hi&quot;</span>; <span class="hljs-comment">// [&#123; hi: &quot;hi&quot; &#125;, &#123; hi: &quot;hi&quot; &#125;, &#123; hi: &quot;hi&quot; &#125;]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h3><p><code>**filter()**</code> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><ul><li>语法 <ul><li><p>var newArray &#x3D; arr.filter(callback(element[, index[, array]])[, thisArg])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>用来测试数组的每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数： <ul><li><p><strong>element</strong> </p><ul><li>数组中当前正在处理的元素。</li></ul></li><li><p><strong>index</strong>(可选) </p><ul><li>正在处理的元素在数组中的索引。</li></ul></li><li><p><strong>array</strong>(可选) </p><ul><li>调用了 <code>filter</code> 的数组本身。</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>执行 <code>callback</code> 时使用的 <code>this</code> 值。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isBigEnough</span>(<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt;= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">var</span> filtered = [<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>].<span class="hljs-title function_">filter</span>(isBigEnough);<br><span class="hljs-comment">// filtered is [12, 130, 44]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find()"></a>Array.prototype.find()</h3><p><code>**find()**</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code>。</p><ul><li>语法 <ul><li><p>arr.find(callback[, thisArg])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>在数组每一项上执行的函数，接收 3 个参数： <ul><li><p><strong>element</strong> </p><ul><li>当前遍历到的元素。</li></ul></li><li><p><strong>index</strong>(可选) </p><ul><li>当前遍历到的索引。</li></ul></li><li><p><strong>array</strong>(可选) </p><ul><li>数组本身。</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>执行回调时用作<code>this</code> 的对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>数组中第一个满足所提供测试函数的元素的值，否则返回 <code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code>。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> inventory = [<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;apples&#x27;</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;bananas&#x27;</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cherries&#x27;</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">5</span>&#125;<br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">findCherries</span>(<span class="hljs-params">fruit</span>) &#123;<br>    <span class="hljs-keyword">return</span> fruit.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;cherries&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inventory.<span class="hljs-title function_">find</span>(findCherries)); <span class="hljs-comment">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-findIndex"><a href="#Array-prototype-findIndex" class="headerlink" title="Array.prototype.findIndex()"></a>Array.prototype.findIndex()</h3><p><code>**findIndex()**</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p><ul><li>语法 <ul><li><p>arr.findIndex(callback[, thisArg])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>针对数组中的每个元素, 都会执行该回调函数, 执行时会自动传入下面三个参数: <ul><li><p><strong>element</strong> </p><ul><li>当前元素。</li></ul></li><li><p><strong>index</strong> </p><ul><li>当前元素的索引。</li></ul></li><li><p><strong>array</strong> </p><ul><li>调用<code>findIndex</code>的数组。</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>可选。执行<code>callback</code>时作为<code>this</code>对象的值.</li></ul></li></ul></li><li><p>返回值 </p><ul><li>数组中通过提供测试函数的第一个元素的<strong>索引</strong>。否则，返回-1</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPrime</span>(<span class="hljs-params">element, index, array</span>) &#123;<br>  <span class="hljs-keyword">var</span> start = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">while</span> (start &lt;= <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(element)) &#123;<br>    <span class="hljs-keyword">if</span> (element % start++ &lt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>].<span class="hljs-title function_">findIndex</span>(isPrime)); <span class="hljs-comment">// -1, not found</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>].<span class="hljs-title function_">findIndex</span>(isPrime)); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h3><p><code>**flat()**</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><ul><li>语法 <ul><li><p>var newArray &#x3D; arr.flat([depth])</p></li><li><p>参数 </p><ul><li><strong>depth</strong> <ul><li>可选，指定要提取嵌套数组的结构深度，默认值为 1。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个包含将数组与子数组中所有元素的新数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]];<br>arr1.<span class="hljs-title function_">flat</span>();<br><span class="hljs-comment">// [1, 2, 3, 4]</span><br><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]];<br>arr2.<span class="hljs-title function_">flat</span>();<br><span class="hljs-comment">// [1, 2, 3, 4, [5, 6]]</span><br><br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]];<br>arr3.<span class="hljs-title function_">flat</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span><br><br><span class="hljs-comment">//使用 Infinity，可展开任意深度的嵌套数组</span><br><span class="hljs-keyword">var</span> arr4 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]]]]];<br>arr4.<span class="hljs-title function_">flat</span>(<span class="hljs-title class_">Infinity</span>);<br><span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-flatMap"><a href="#Array-prototype-flatMap" class="headerlink" title="Array.prototype.flatMap()"></a>Array.prototype.flatMap()</h3><p><code>**flatMap()**</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">map</a> 连着深度值为1的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat</a> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些。</p><ul><li>语法 <ul><li><p>var new_array &#x3D; arr.flatMap(function callback(currentValue[, index[, array]]) {<br>&#x2F;&#x2F; return element for new_array<br>}[, thisArg])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>可以生成一个新数组中的元素的函数，可以传入三个参数： <ul><li><p><strong>currentValue</strong> </p><ul><li>当前正在数组中处理的元素</li></ul></li><li><p><strong>index</strong> </p><ul><li>可选的。数组中正在处理的当前元素的索引。</li></ul></li><li><p><strong>array</strong> </p><ul><li>可选的。被调用的 <code>map</code> 数组</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>可选的。执行 <code>callback</code> 函数时 使用的<code>this</code> 值。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 <code>depth</code> 值为1。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br>arr1.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> [x * <span class="hljs-number">2</span>]);<br><span class="hljs-comment">// [[2], [4], [6], [8]]</span><br><br>arr1.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> [x * <span class="hljs-number">2</span>]);<br><span class="hljs-comment">// [2, 4, 6, 8]</span><br><br><span class="hljs-comment">// only one level is flattened</span><br>arr1.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> [[x * <span class="hljs-number">2</span>]]);<br><span class="hljs-comment">// [[2], [4], [6], [8]]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h3><p><code>**forEach()**</code> 方法对数组的每个元素执行一次给定的函数。</p><ul><li>arr.forEach(callback(currentValue [, index [, array]])[, thisArg]) <ul><li><p>arr</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>为数组中每个元素执行的函数，该函数接收一至三个参数： <ul><li><p><strong>currentValue</strong> </p><ul><li>数组中正在处理的当前元素。</li></ul></li><li><p><strong>index</strong> </p><ul><li>数组中正在处理的当前元素的索引。</li></ul></li><li><p><strong>array</strong> </p><ul><li><code>forEach()</code> 方法正在操作的数组。</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>可选参数。当执行回调函数 <code>callback</code> 时，用作 <code>this</code> 的值。</li></ul></li></ul></li><li><p>返回值 </p><ul><li><code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code>。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arraySparse = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> numCallbackRuns = <span class="hljs-number">0</span>;<br><br>arraySparse.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(element);<br>  numCallbackRuns++;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;numCallbackRuns: &quot;</span>, numCallbackRuns);<br><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 7</span><br><span class="hljs-comment">// numCallbackRuns: 3</span><br></code></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p><code>**Array.from()**</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><ul><li>语法 <ul><li><p>Array.from(arrayLike[, mapFn[, thisArg]])</p></li><li><p>参数 </p><ul><li><p><strong>arrayLike</strong> </p><ul><li>想要转换成数组的伪数组对象或可迭代对象。</li></ul></li><li><p><strong>mapFn</strong> </p><ul><li>可选，如果指定了该参数，新数组中的每个元素会执行该回调函数。</li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>可选，可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个新的<code>[数组](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code>实例。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-comment">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span><br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-comment">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span><br><br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>]]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(map);<br><span class="hljs-comment">// [[1, 2], [2, 4], [4, 8]]</span><br><br><span class="hljs-keyword">const</span> mapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>], [<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(mapper.<span class="hljs-title function_">values</span>());<br><span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;];</span><br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(mapper.<span class="hljs-title function_">keys</span>());<br><span class="hljs-comment">// [&#x27;1&#x27;, &#x27;2&#x27;];</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h3><p><code>**includes()**</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><ul><li>语法 <ul><li><p>arr.includes(valueToFind[, fromIndex])</p></li><li><p>参数 </p><ul><li><p><strong>valueToFind</strong> </p><ul><li>需要查找的元素值。</li></ul></li><li><p><strong>fromIndex</strong> </p><ul><li>可选，从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 （即使从末尾开始往前跳 <code>fromIndex</code> 的绝对值个索引，然后往后搜寻）。默认为 0。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>A <code>[Boolean](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean)</code> which is <code>true</code> if the value <code>valueToFind</code> is found within the array (or the part of the array indicated by the index <code>fromIndex</code>, if specified). Values of zero are all considered to be equal regardless of sign (that is, -0 is considered to be equal to both 0 and +0), but <code>false</code> is not considered to be the same as 0.</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-number">4</span>);     <span class="hljs-comment">// false</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">// false</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-title class_">NaN</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-title class_">NaN</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf()"></a>Array.prototype.indexOf()</h3><p><code>**indexOf()**</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p><ul><li>语法 <ul><li><p>arr.indexOf(searchElement[, fromIndex])</p></li><li><p>参数 </p><ul><li><p><strong>searchElement</strong> </p><ul><li>要查找的元素</li></ul></li><li><p><strong>fromIndex</strong> </p><ul><li>可选，开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.</li></ul></li></ul></li><li><p>返回值 </p><ul><li>首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>];<br>array.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>);     <span class="hljs-comment">// 0</span><br>array.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">7</span>);     <span class="hljs-comment">// -1</span><br>array.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">9</span>, <span class="hljs-number">2</span>);  <span class="hljs-comment">// 2</span><br>array.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// -1</span><br>array.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><p><strong>Array.isArray()</strong> 用于确定传递的值是否是一个 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code>。</p><ul><li>语法 <ul><li><p>Array.isArray(obj)</p></li><li><p>参数 </p><ul><li><strong>obj</strong> <ul><li>需要检测的值。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>如果值是 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code>，则为true; 否则为false。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 下面的函数调用都返回 true</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>([]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>([<span class="hljs-number">1</span>]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>());<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>))<br><span class="hljs-comment">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// 下面的函数调用都返回 false</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>();<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(&#123;&#125;);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-literal">undefined</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-number">17</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-string">&#x27;Array&#x27;</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">32</span>))<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(&#123; <span class="hljs-attr">__proto__</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> &#125;);<br></code></pre></td></tr></table></figure><h3 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h3><p><code>**join()**</code> 方法将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN_docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</p><ul><li>语法 <ul><li><p>arr.join([separator])</p></li><li><p>参数 </p><ul><li><strong>separator</strong> <ul><li>可选，指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果缺省该值，数组元素用逗号（<code>,</code>）分隔。如果<code>separator</code>是空字符串(<code>&quot;&quot;</code>)，则所有元素之间都没有任何字符。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个所有数组元素连接的字符串。如果 <code>arr.length</code> 为0，则返回空字符串。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;Wind&#x27;</span>, <span class="hljs-string">&#x27;Rain&#x27;</span>, <span class="hljs-string">&#x27;Fire&#x27;</span>];<br><span class="hljs-keyword">var</span> myVar1 = a.<span class="hljs-title function_">join</span>();      <span class="hljs-comment">// myVar1的值变为&quot;Wind,Rain,Fire&quot;</span><br><span class="hljs-keyword">var</span> myVar2 = a.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;, &#x27;</span>);  <span class="hljs-comment">// myVar2的值变为&quot;Wind, Rain, Fire&quot;</span><br><span class="hljs-keyword">var</span> myVar3 = a.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; + &#x27;</span>); <span class="hljs-comment">// myVar3的值变为&quot;Wind + Rain + Fire&quot;</span><br><span class="hljs-keyword">var</span> myVar4 = a.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);    <span class="hljs-comment">// myVar4的值变为&quot;WindRainFire&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-keys"><a href="#Array-prototype-keys" class="headerlink" title="Array.prototype.keys()"></a>Array.prototype.keys()</h3><p><code>**keys()**</code>方法返回一个包含数组中每个索引键的<code>**Array Iterator**</code>对象。</p><ul><li>语法 <ul><li>arr.keys()</li><li>返回值 <ul><li>一个新的 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> 迭代器对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, , <span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> sparseKeys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(arr);<br><span class="hljs-keyword">var</span> denseKeys = [...arr.<span class="hljs-title function_">keys</span>()];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sparseKeys); <span class="hljs-comment">// [&#x27;0&#x27;, &#x27;2&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(denseKeys);  <span class="hljs-comment">// [0, 1, 2]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-lastIndexOf"><a href="#Array-prototype-lastIndexOf" class="headerlink" title="Array.prototype.lastIndexOf()"></a>Array.prototype.lastIndexOf()</h3><p><code>**lastIndexOf()**</code> 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</p><ul><li>语法 <ul><li><p>arr.lastIndexOf(searchElement[, fromIndex])</p></li><li><p>参数 </p><ul><li><p><strong>searchElement</strong> </p><ul><li>被查找的元素。</li></ul></li><li><p><strong>fromIndex</strong> </p><ul><li>可选，从此位置开始逆向查找。默认为数组的长度减 1(<code>arr.length - 1</code>)，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>数组中该元素最后一次出现的索引，如未找到返回-1。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">var</span> index = array.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// index is 3</span><br>index = array.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">7</span>);<br><span class="hljs-comment">// index is -1</span><br>index = array.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// index is 3</span><br>index = array.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// index is 0</span><br>index = array.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">2</span>);<br><span class="hljs-comment">// index is 0</span><br>index = array.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>);<br><span class="hljs-comment">// index is 3</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h3><p><code>**map()**</code> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p><ul><li>语法 <ul><li><p>var new_array &#x3D; arr.map(function callback(currentValue[, index[, array]]) {<br>&#x2F;&#x2F; Return element for new_array<br>}[, thisArg])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>生成新数组元素的函数，使用三个参数： <ul><li><p><strong>currentValue</strong> </p><ul><li><code>callback</code> 数组中正在处理的当前元素。</li></ul></li><li><p><strong>index</strong> </p><ul><li><code>callback</code> 数组中正在处理的当前元素。</li></ul></li><li><p><strong>array</strong> </p><ul><li><code>map</code> 方法调用的数组。</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>执行 <code>callback</code> 函数时值被用作<code>this</code>。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>一个由原数组每个元素执行回调函数的结果组成的新数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> roots = numbers.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">sqrt</span>);<br><span class="hljs-comment">// roots的值为[1, 2, 3], numbers的值仍为[1, 4, 9]</span><br></code></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p><code>**Array.of()**</code> 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p><ul><li>语法 <ul><li><p>Array.of(element0[, element1[, …[, elementN]]])</p></li><li><p>参数 </p><ul><li><strong>elementN</strong> <ul><li>任意个参数，将按顺序成为返回数组中的元素。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>新的 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> 实例。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>);         <span class="hljs-comment">// [1]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);   <span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// [undefined]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop()"></a>Array.prototype.pop()</h3><p><code>**pop()**</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><ul><li>语法 <ul><li>arr.pop()</li><li>返回值 <ul><li>从数组中删除的元素(当数组为空时返回<code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code>)。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myFish = [<span class="hljs-string">&quot;angel&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>, <span class="hljs-string">&quot;mandarin&quot;</span>, <span class="hljs-string">&quot;surgeon&quot;</span>];<br><br><span class="hljs-keyword">let</span> popped = myFish.<span class="hljs-title function_">pop</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myFish);<br><span class="hljs-comment">// [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(popped);<br><span class="hljs-comment">// surgeon</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h3><p><code>**push()**</code> 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p><ul><li>语法 <ul><li><p>arr.push(element1, …, elementN)</p></li><li><p>参数 </p><ul><li><strong>elementN</strong> <ul><li>被添加到数组末尾的元素。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>当调用该方法时，新的 <code>[length](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/length)</code> 属性值将被返回。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sports = [<span class="hljs-string">&quot;soccer&quot;</span>, <span class="hljs-string">&quot;baseball&quot;</span>];<br><span class="hljs-keyword">var</span> total = sports.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;football&quot;</span>, <span class="hljs-string">&quot;swimming&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sports);<br><span class="hljs-comment">// [&quot;soccer&quot;, &quot;baseball&quot;, &quot;football&quot;, &quot;swimming&quot;]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total);<br><span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h3><p><code>**reduce()**</code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p><ul><li>语法 <ul><li><p>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>执行数组中每个值 (如果没有提供 <code>initialValue则第一个值除外</code>)的函数，包含四个参数： <ul><li><p><strong>accumulator</strong> </p><ul><li>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或<code>initialValue</code>（见于下方）。</li></ul></li><li><p><strong>currentValue</strong> </p><ul><li>数组中正在处理的元素。</li></ul></li><li><p><strong>index</strong> </p><ul><li>数组中正在处理的当前元素的索引。 如果提供了<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</li></ul></li><li><p><strong>array</strong> </p><ul><li>调用<code>reduce()</code>的数组</li></ul></li></ul></li></ul></li><li><p><strong>initialValue</strong> </p><ul><li>作为第一次调用 <code>callback</code>函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>函数累计处理的结果</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">accumulator, currentValue</span>) =&gt; accumulator + currentValue;<br><br><span class="hljs-comment">// 1 + 2 + 3 + 4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">reduce</span>(reducer));<br><span class="hljs-comment">// expected output: 10</span><br><br><span class="hljs-comment">// 5 + 1 + 2 + 3 + 4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">reduce</span>(reducer, <span class="hljs-number">5</span>));<br><span class="hljs-comment">// expected output: 15</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-reduceRight"><a href="#Array-prototype-reduceRight" class="headerlink" title="Array.prototype.reduceRight()"></a>Array.prototype.reduceRight()</h3><p><code>**reduceRight()**</code> 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p><ul><li>语法 <ul><li>arr.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue]) </li><li>参数 <ul><li><p><strong>callback</strong> </p><ul><li>一个回调函数，用于操作数组中的每个元素，它可接受四个参数： <ul><li><p><strong>accumulator</strong> </p><ul><li>累加器：上一次调用回调函数时，回调函数返回的值。首次调用回调函数时，如果 <code>initialValue</code> 存在，累加器即为 <code>initialValue</code>，否则须为数组中的最后一个元素（详见下方 <code>initialValue</code> 处相关说明）。</li></ul></li><li><p><strong>currentValue</strong> </p><ul><li>当前元素：当前被处理的元素。</li></ul></li><li><p><strong>index</strong> </p><ul><li>数组中当前被处理的元素的索引。</li></ul></li><li><p><strong>array</strong> </p><ul><li>调用 <code>reduceRight()</code> 的数组。</li></ul></li></ul></li></ul></li><li><p><strong>initialValue</strong> </p><ul><li><code>initialValue</code>可选</li></ul></li></ul></li></ul></li></ul><p>首次调用 <code>callback</code> 函数时，累加器 <code>accumulator</code> 的值。如果未提供该初始值，则将使用数组中的最后一个元素，并跳过该元素。如果不给出初始值，则需保证数组不为空。<br>否则，在空数组上调用 <code>reduce</code> 或 <code>reduceRight</code> 且未提供初始值（例如 <code>[].reduce( (acc, cur, idx, arr) =&gt; &#123;&#125; )</code> ）的话，会导致类型错误 <code>TypeError: reduce of empty array with no initial value</code>。 </p><ul><li>返回值 <ul><li>执行之后的返回值。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sum = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">reduceRight</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;);<br><span class="hljs-comment">// sum is 6</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h3><p><code>**reverse()**</code> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。</p><ul><li>语法 <ul><li>arr.reverse()</li><li>返回值 <ul><li>颠倒后的数组。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1, 2, 3]</span><br><br>a.<span class="hljs-title function_">reverse</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [3, 2, 1]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-shift"><a href="#Array-prototype-shift" class="headerlink" title="Array.prototype.shift()"></a>Array.prototype.shift()</h3><p><code>**shift()**</code> 方法从数组中删除<strong>第一个</strong>元素，并返回该元素的值。此方法更改数组的长度。</p><ul><li>语法 <ul><li>arr.shift()</li><li>返回值 <ul><li>从数组中删除的元素; 如果数组为空则返回<code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code> 。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myFish = [<span class="hljs-string">&#x27;angel&#x27;</span>, <span class="hljs-string">&#x27;clown&#x27;</span>, <span class="hljs-string">&#x27;mandarin&#x27;</span>, <span class="hljs-string">&#x27;surgeon&#x27;</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用 shift 之前: &#x27;</span> + myFish);<br><span class="hljs-comment">// &quot;调用 shift 之前: angel,clown,mandarin,surgeon&quot;</span><br><br><span class="hljs-keyword">var</span> shifted = myFish.<span class="hljs-title function_">shift</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用 shift 之后: &#x27;</span> + myFish);<br><span class="hljs-comment">// &quot;调用 shift 之后: clown,mandarin,surgeon&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;被删除的元素: &#x27;</span> + shifted);<br><span class="hljs-comment">// &quot;被删除的元素: angel&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a>Array.prototype.slice()</h3><p><code>**slice()**</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p><ul><li>语法 <ul><li>arr.slice([begin[, end]]) </li><li>参数 <ul><li><p><strong>begin</strong> </p><ul><li>提取起始处的索引（从 <code>0</code> 开始），从该索引开始提取原数组元素。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，<code>slice(-2)</code> 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 <code>begin</code>，则 <code>slice</code> 从索引 <code>0</code> 开始。<br>如果 <code>begin</code> 超出原数组的索引范围，则会返回空数组。</li></ul></li><li><p><strong>end</strong> </p><ul><li>提取终止处的索引（从 <code>0</code> 开始），在该索引处结束提取原数组元素。<code>slice</code> 会提取原数组中索引从 <code>begin</code> 到 <code>end</code> 的所有元素（包含 <code>begin</code>，但不包含 <code>end</code>）。</li></ul></li></ul></li></ul></li></ul><p><code>slice(1,4)</code> 会提取原数组中从第二个元素开始一直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 <code>slice(-2,-1)</code> 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 <code>end</code> 被省略，则 <code>slice</code> 会一直提取到原数组末尾。<br>如果 <code>end</code> 大于数组的长度，<code>slice</code> 也会一直提取到原数组末尾。 </p><ul><li>返回值 <ul><li>一个含有被提取元素的新数组。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> animals = [<span class="hljs-string">&#x27;ant&#x27;</span>, <span class="hljs-string">&#x27;bison&#x27;</span>, <span class="hljs-string">&#x27;camel&#x27;</span>, <span class="hljs-string">&#x27;duck&#x27;</span>, <span class="hljs-string">&#x27;elephant&#x27;</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animals.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>));<br><span class="hljs-comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animals.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<br><span class="hljs-comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animals.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br><span class="hljs-comment">// expected output: Array [&quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animals.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>));<br><span class="hljs-comment">// expected output: Array [&quot;duck&quot;, &quot;elephant&quot;]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animals.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>));<br><span class="hljs-comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h3><p><code>**some()**</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p><ul><li>语法 <ul><li><p>arr.some(callback(element[, index[, array]])[, thisArg])</p></li><li><p>参数 </p><ul><li><p><strong>callback</strong> </p><ul><li>用来测试每个元素的函数，接受三个参数： <ul><li><p><strong>element</strong> </p><ul><li>数组中正在处理的元素。</li></ul></li><li><p><strong>index</strong> </p><ul><li>可选的。数组中正在处理的元素的索引值。</li></ul></li><li><p><strong>array</strong> </p><ul><li>可选的。<code>some()</code>被调用的数组。</li></ul></li></ul></li></ul></li><li><p><strong>thisArg</strong> </p><ul><li>可选的。执行 <code>callback</code> 时使用的 <code>this</code> 值。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>这是返回值</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isBiggerThan10</span>(<span class="hljs-params">element, index, array</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span>;<br>&#125;<br><br>[<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>].<span class="hljs-title function_">some</span>(isBiggerThan10);  <span class="hljs-comment">// false</span><br>[<span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>].<span class="hljs-title function_">some</span>(isBiggerThan10); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort()"></a>Array.prototype.sort()</h3><p><code>**sort()**</code> 方法用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</p><ul><li>语法 <ul><li><p>arr.sort([compareFunction])</p></li><li><p>参数 </p><ul><li><strong>compareFunction</strong> <ul><li>可选，用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。 <ul><li><p><strong>firstEl</strong> </p><ul><li>第一个用于比较的元素。</li></ul></li><li><p><strong>secondEl</strong> </p><ul><li>第二个用于比较的元素。</li></ul></li></ul></li></ul></li></ul></li><li><p>返回值 </p><ul><li>排序后的数组。请注意，数组已原地排序，并且不进行复制。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> months = [<span class="hljs-string">&#x27;March&#x27;</span>, <span class="hljs-string">&#x27;Jan&#x27;</span>, <span class="hljs-string">&#x27;Feb&#x27;</span>, <span class="hljs-string">&#x27;Dec&#x27;</span>];<br>months.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(months);<br><span class="hljs-comment">// expected output: Array [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]</span><br><br><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">21</span>, <span class="hljs-number">100000</span>];<br>array1.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1);<br><span class="hljs-comment">// expected output: Array [1, 100000, 21, 30, 4]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h3><p><code>**splice()**</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</p><ul><li>语法 <ul><li>array.splice(start[, deleteCount[, item1[, item2[, …]]]]) </li><li>参数 <ul><li><p><strong>start</strong> </p><ul><li>指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数，这意味着-n是倒数第n个元素并且等价于<code>array.length-n</code>）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。</li></ul></li><li><p><strong>deleteCount</strong> </p><ul><li>可选，整数，表示要移除的数组元素的个数。</li></ul></li></ul></li></ul></li></ul><p>如果 <code>deleteCount</code> 大于 <code>start</code> 之后的元素的总数，则从 <code>start</code> 后面的元素都将被删除（含第 <code>start</code> 位）。<br>如果 <code>deleteCount</code> 被省略了，或者它的值大于等于<code>array.length - start</code>(也就是说，如果它大于或者等于<code>start</code>之后的所有元素的数量)，那么<code>start</code>之后数组的所有元素都会被删除。<br>如果 <code>deleteCount</code> 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。 </p><pre><code class="hljs">  -  **item1, item2, ...**      - 要添加进数组的元素,从`start` 位置开始。如果不指定，则 `splice()` 将只删除数组元素。</code></pre><ul><li>返回值 <ul><li>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> months = [<span class="hljs-string">&#x27;Jan&#x27;</span>, <span class="hljs-string">&#x27;March&#x27;</span>, <span class="hljs-string">&#x27;April&#x27;</span>, <span class="hljs-string">&#x27;June&#x27;</span>];<br>months.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Feb&#x27;</span>);<br><span class="hljs-comment">// inserts at index 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(months);<br><span class="hljs-comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span><br><br>months.<span class="hljs-title function_">splice</span>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;May&#x27;</span>);<br><span class="hljs-comment">// replaces 1 element at index 4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(months);<br><span class="hljs-comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-toLocaleString"><a href="#Array-prototype-toLocaleString" class="headerlink" title="Array.prototype.toLocaleString()"></a>Array.prototype.toLocaleString()</h3><p><code>**toLocaleString()**</code> 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 <code>toLocaleString</code> 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开。</p><ul><li>语法 <ul><li><p>arr.toLocaleString([locales[,options]]);</p></li><li><p>参数 </p><ul><li><p><strong>locales</strong> </p><ul><li>带有BCP 47语言标记的字符串或字符串数组，关于<code>locales</code>参数的形式与解释，请看<code>[Intl](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl)</code>页面。</li></ul></li><li><p><strong>options</strong> </p><ul><li>一个可配置属性的对象，对于数字 <code>[Number.prototype.toLocaleString()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString)</code>，对于日期<code>[Date.prototype.toLocaleString()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)</code>.</li></ul></li></ul></li><li><p>返回值 </p><ul><li>表示数组元素的字符串。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;21 Dec 1997 14:12:00 UTC&#x27;</span>)];<br><span class="hljs-keyword">const</span> localeString = array1.<span class="hljs-title function_">toLocaleString</span>(<span class="hljs-string">&#x27;en&#x27;</span>, &#123; <span class="hljs-attr">timeZone</span>: <span class="hljs-string">&#x27;UTC&#x27;</span> &#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(localeString);<br><span class="hljs-comment">// expected output: &quot;1,a,12/21/1997, 2:12:00 PM&quot;,</span><br><span class="hljs-comment">// This assumes &quot;en&quot; locale and UTC timezone - your results may vary</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString()"></a>Array.prototype.toString()</h3><p><code>**toString()**</code> 返回一个字符串，表示指定的数组及其元素。</p><ul><li>语法 <ul><li>arr.toString()</li><li>返回值 <ul><li>一个表示指定的数组及其元素的字符串。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;1a&#x27;</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">toString</span>());<br><span class="hljs-comment">// expected output: &quot;1,2,a,1a&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-unshift"><a href="#Array-prototype-unshift" class="headerlink" title="Array.prototype.unshift()"></a>Array.prototype.unshift()</h3><p><code>**unshift()**</code> 方法将一个或多个元素添加到数组的<strong>开头</strong>，并返回该数组的<strong>新长度(该</strong>方法修改原有数组**)**。</p><ul><li>语法 <ul><li><p>arr.unshift(element1, …, elementN)</p></li><li><p>参数 </p><ul><li><strong>elementN</strong> <ul><li>要添加到数组开头的元素或多个元素。</li></ul></li></ul></li><li><p>返回值 </p><ul><li>当一个对象调用该方法时，返回其 <code>[length](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/length)</code> 属性值。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// result of the call is 3, which is the new array length</span><br><span class="hljs-comment">// arr is [0, 1, 2]</span><br><br>arr.<span class="hljs-title function_">unshift</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// the new array length is 5</span><br><span class="hljs-comment">// arr is [-2, -1, 0, 1, 2]</span><br><br>arr.<span class="hljs-title function_">unshift</span>([-<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>]); <span class="hljs-comment">// the new array length is 6</span><br><span class="hljs-comment">// arr is [[-4, -3], -2, -1, 0, 1, 2]</span><br><br>arr.<span class="hljs-title function_">unshift</span>([-<span class="hljs-number">7</span>, -<span class="hljs-number">6</span>], [-<span class="hljs-number">5</span>]); <span class="hljs-comment">// the new array length is 8</span><br><span class="hljs-comment">// arr is [ [-7, -6], [-5], [-4, -3], -2, -1, 0, 1, 2 ]</span><br></code></pre></td></tr></table></figure><h3 id="Array-prototype-values"><a href="#Array-prototype-values" class="headerlink" title="Array.prototype.values()"></a>Array.prototype.values()</h3><p><code>**values()**</code> 方法返回一个新的 <code>**Array Iterator**</code> 对象，该对象包含数组每个索引的值</p><ul><li>语法 <ul><li>arr.values()</li><li>返回值 <ul><li>一个新的 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> 迭代对象。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-keyword">let</span> eArr = arr.<span class="hljs-title function_">values</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> letter <span class="hljs-keyword">of</span> eArr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(letter);<br>&#125; <span class="hljs-comment">//&quot;w&quot; &quot;y &quot;k&quot; &quot;o&quot; &quot;p&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript-String</title>
    <link href="/blog/2022/08/03/JS/String/"/>
    <url>/blog/2022/08/03/JS/String/</url>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p><code>**length**</code> 属性表示一个字符串的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str1 = <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">const</span> str2 = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1); <span class="hljs-comment">// 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="String-prototype-split"><a href="#String-prototype-split" class="headerlink" title="String.prototype.split()"></a>String.prototype.split()</h3><p><code>**split()**</code> 方法使用指定的分隔符字符串将一个<code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code>对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</p><ul><li>语法 <ul><li><p>str.split([separator[, limit]])</p></li><li><p>参数 </p><ul><li>separator：指定表示每个拆分应发生的点的字符串。<code>separator</code> 可以是一个字符串或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">正则表达式</a>。 如果纯文本分隔符包含多个字符，则必须找到整个字符串来表示分割点。如果在str中省略或不出现分隔符，则返回的数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将str原字符串中每个字符的数组形式返回。</li><li>limit：一个整数，限定返回的分割片段数量。当提供此参数时，split 方法会在指定分隔符的每次出现时分割该字符串，但在限制条目已放入数组时停止。如果在达到指定限制之前达到字符串的末尾，它可能仍然包含少于限制的条目。新数组中不返回剩下的文本。</li></ul></li><li><p>返回值 </p><ul><li>返回源字符串以分隔符出现位置分隔而成的一个 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">splitString</span>(<span class="hljs-params">stringToSplit, separator</span>) &#123;<br>  <span class="hljs-keyword">var</span> arrayOfStrings = stringToSplit.<span class="hljs-title function_">split</span>(separator);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The original string is: &quot;&#x27;</span> + stringToSplit + <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The separator is: &quot;&#x27;</span> + separator + <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The array has &quot;</span> + arrayOfStrings.<span class="hljs-property">length</span> + <span class="hljs-string">&quot; elements: &quot;</span>);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; arrayOfStrings.<span class="hljs-property">length</span>; i++)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrayOfStrings[i] + <span class="hljs-string">&quot; / &quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> tempestString = <span class="hljs-string">&quot;Oh brave new world that has such people in it.&quot;</span>;<br><span class="hljs-keyword">var</span> monthString = <span class="hljs-string">&quot;Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec&quot;</span>;<br><br><span class="hljs-keyword">var</span> space = <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">var</span> comma = <span class="hljs-string">&quot;,&quot;</span>;<br><br><span class="hljs-title function_">splitString</span>(tempestString, space);<br><span class="hljs-title function_">splitString</span>(tempestString);<br><span class="hljs-title function_">splitString</span>(monthString, comma);<br><br><span class="hljs-comment">// The original string is: &quot;Oh brave new world that has such people in it.&quot;</span><br><span class="hljs-comment">// The separator is: &quot; &quot;</span><br><span class="hljs-comment">// The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it. /</span><br><br><span class="hljs-comment">// The original string is: &quot;Oh brave new world that has such people in it.&quot;</span><br><span class="hljs-comment">// The separator is: &quot;undefined&quot;</span><br><span class="hljs-comment">// The array has 1 elements: Oh brave new world that has such people in it. /</span><br><br><span class="hljs-comment">// The original string is: &quot;Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec&quot;</span><br><span class="hljs-comment">// The separator is: &quot;,&quot;</span><br><span class="hljs-comment">// The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /</span><br></code></pre></td></tr></table></figure><h3 id="String-prototype-slice"><a href="#String-prototype-slice" class="headerlink" title="String.prototype.slice()"></a>String.prototype.slice()</h3><p><code>**slice()**</code> 方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</p><ul><li>语法 <ul><li>str.slice(beginIndex[, endIndex])</li><li>参数 <ul><li>beginIndex：从该索引（以 0 为基数）处开始提取原字符串中的字符。如果值为负数，会被当做 <code>strLength + beginIndex</code> 看待，这里的<code>strLength</code> 是字符串的长度（例如， 如果 <code>beginIndex</code> 是 -3 则看作是：<code>strLength - 3</code>）</li><li>endIndex：可选。在该索引（以 0 为基数）处结束提取字符串。如果省略该参数，<code>slice()</code> 会一直提取到字符串末尾。如果该参数为负数，则被看作是 strLength + endIndex，这里的 strLength 就是字符串的长度(例如，如果 endIndex 是 -3，则是, strLength - 3)。</li></ul></li><li>返回值 <ul><li>返回一个从原字符串中提取出来的新字符串</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;The morning is upon us.&#x27;</span>, <span class="hljs-comment">// str1 的长度 length 是 23。</span><br>    str2 = str1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>),<br>    str3 = str1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">4</span>, -<span class="hljs-number">2</span>),<br>    str4 = str1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">12</span>),<br>    str5 = str1.<span class="hljs-title function_">slice</span>(<span class="hljs-number">30</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str2); <span class="hljs-comment">// 输出：he morn</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str3); <span class="hljs-comment">// 输出：morning is upon u</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str4); <span class="hljs-comment">// 输出：is upon us.</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str5); <span class="hljs-comment">// 输出：&quot;&quot;</span><br><br><span class="hljs-comment">// --------------------------------------------</span><br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;The morning is upon us.&#x27;</span>;<br>str.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">3</span>);     <span class="hljs-comment">// 返回 &#x27;us.&#x27;</span><br>str.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 返回 &#x27;us&#x27;</span><br>str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);  <span class="hljs-comment">// 返回 &#x27;The morning is upon us&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="String-prototype-substring"><a href="#String-prototype-substring" class="headerlink" title="String.prototype.substring()"></a>String.prototype.substring()</h3><p><code>**substring()**</code>方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。</p><ul><li>语法 <ul><li>str.substring(indexStart[, indexEnd])</li><li>参数 <ul><li>indexStart：需要截取的第一个字符的索引，该索引位置的字符作为返回的字符串的首字母。</li><li>indexEnd：可选。一个 0 到字符串长度之间的整数，以该数字为索引的字符不包含在截取的字符串内。</li></ul></li><li>返回值 <ul><li>包含给定字符串的指定部分的新字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> anyString = <span class="hljs-string">&quot;Mozilla&quot;</span>;<br><br><span class="hljs-comment">// 输出 &quot;Moz&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">3</span>,-<span class="hljs-number">3</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">3</span>,<span class="hljs-title class_">NaN</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-title class_">NaN</span>,<span class="hljs-number">3</span>));<br><br><span class="hljs-comment">// 输出 &quot;lla&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">4</span>,<span class="hljs-number">7</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">7</span>,<span class="hljs-number">4</span>));<br><br><span class="hljs-comment">// 输出 &quot;&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>));<br><br><span class="hljs-comment">// 输出 &quot;Mozill&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>));<br><br><span class="hljs-comment">// 输出 &quot;Mozilla&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-includes"><a href="#String-prototype-includes" class="headerlink" title="String.prototype.includes()"></a>String.prototype.includes()</h3><p><code>**includes()**</code> 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p><ul><li>语法 <ul><li>str.includes(searchString[, position])</li><li>参数 <ul><li>searchString：要在此字符串中搜索的字符串。</li><li>position(可选)：从当前字符串的哪个索引位置开始搜寻子字符串，默认值为 <code>0</code>。</li></ul></li><li>返回值 <ul><li>如果当前字符串包含被搜寻的字符串，就返回 <code>**true**</code>；否则返回 <code>**false**</code>。</li></ul></li><li>注意 <ul><li><code>includes()</code> 方法是区分大小写的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;To be, or not to be, that is the question.&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;To be&#x27;</span>));       <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;question&#x27;</span>));    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;nonexistent&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;To be&#x27;</span>, <span class="hljs-number">1</span>));    <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;TO BE&#x27;</span>));       <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-indexOf"><a href="#String-prototype-indexOf" class="headerlink" title="String.prototype.indexOf()"></a>String.prototype.indexOf()</h3><p><code>**indexOf()**</code> 方法返回调用它的 <code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> 对象中第一次出现的指定值的索引，从 <code>fromIndex</code> 处进行搜索。如果未找到该值，则返回 -1。</p><ul><li>语法 <ul><li>str.indexOf(searchValue [, fromIndex])</li><li>参数 <ul><li>searchValue：要被查找的字符串值。</li><li>fromIndex(可选)：数字表示开始查找的位置。可以是任意整数，默认值为 <code>0</code>。</li></ul></li><li>返回值 <ul><li>查找的字符串 <code>searchValue</code> 的第一次出现的索引，如果没有找到，则返回 <code>-1</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Blue&quot;</span>)       <span class="hljs-comment">// 返回 0</span><br><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Blute&quot;</span>)      <span class="hljs-comment">// 返回 -1</span><br><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Whale&quot;</span>, <span class="hljs-number">0</span>)   <span class="hljs-comment">// 返回 5</span><br><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Whale&quot;</span>, <span class="hljs-number">5</span>)   <span class="hljs-comment">// 返回 5</span><br><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;&quot;</span>, -<span class="hljs-number">1</span>)       <span class="hljs-comment">// 返回 0</span><br><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">9</span>)        <span class="hljs-comment">// 返回 9</span><br><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">10</span>)       <span class="hljs-comment">// 返回 10</span><br><span class="hljs-string">&quot;Blue Whale&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">11</span>)       <span class="hljs-comment">// 返回 10</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-lastIndexOf"><a href="#String-prototype-lastIndexOf" class="headerlink" title="String.prototype.lastIndexOf()"></a>String.prototype.lastIndexOf()</h3><p><code>**lastIndexOf()**</code> 方法返回调用<code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> 对象的指定值最后一次出现的索引，在一个字符串中的指定位置 <code>fromIndex</code>处从后向前搜索。如果没找到这个特定值则返回-1 。</p><ul><li>语法 <ul><li>str.lastIndexOf(searchValue[, fromIndex])</li><li>参数 <ul><li>searchValue：一个字符串，表示被查找的值。如果<code>searchValue</code>是空字符串，则返回<code>fromIndex</code>。</li><li>fromIndex(可选)：待匹配字符串searchValue的开头一位字符从 str的第fromIndex位开始向左回向查找。<code>fromIndex</code>默认值是 <code>+Infinity</code>。如果 <code>fromIndex &gt;= str.length</code> ，则会搜索整个字符串。如果 <code>fromIndex &lt; 0</code> ，则等同于 <code>fromIndex == 0</code>。</li></ul></li><li>返回值 <ul><li>返回指定值最后一次出现的索引(该索引仍是以从左至右0开始记数的)，如果没找到则返回-1。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> anyString = <span class="hljs-string">&quot;Brave new world&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The index of the first w from the beginning is &quot;</span> + anyString.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;w&quot;</span>)); <span class="hljs-comment">// Displays 8</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The index of the first w from the end is &quot;</span> + anyString.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;w&quot;</span>)); <span class="hljs-comment">// Displays 10</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The index of &#x27;new&#x27; from the beginning is &quot;</span> + anyString.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;new&quot;</span>)); <span class="hljs-comment">// Displays 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The index of &#x27;new&#x27; from the end is &quot;</span> + anyString.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;new&quot;</span>)); <span class="hljs-comment">// Displays 6</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-trim"><a href="#String-prototype-trim" class="headerlink" title="String.prototype.trim()"></a>String.prototype.trim()</h3><p><code>**trim()**</code> 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR等）。</p><ul><li>语法 <ul><li>str.trim()</li><li>返回值 <ul><li>一个代表调用字符串两端去掉空白的新字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> orig = <span class="hljs-string">&#x27;   foo  &#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(orig.<span class="hljs-title function_">trim</span>()); <span class="hljs-comment">// &#x27;foo&#x27;</span><br><br><span class="hljs-comment">// 另一个 .trim() 例子，只从一边删除</span><br><br><span class="hljs-keyword">var</span> orig = <span class="hljs-string">&#x27;foo    &#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(orig.<span class="hljs-title function_">trim</span>()); <span class="hljs-comment">// &#x27;foo&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-trimRight"><a href="#String-prototype-trimRight" class="headerlink" title="String.prototype.trimRight()"></a>String.prototype.trimRight()</h3><p><code>**trimEnd()**</code> 方法从一个字符串的末端移除空白字符。trimRight() 是这个方法的别名。</p><ul><li>语法 <ul><li>str.trimEnd();</li><li>str.trimRight();</li><li>返回值 <ul><li>一个新字符串，表示从调用字串的末（右）端除去空白。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;   foo  &quot;</span>;<br><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-property">length</span>); <span class="hljs-comment">// 8</span><br><br>str = str.<span class="hljs-title function_">trimRight</span>();  <span class="hljs-comment">// 或写成str = str.trimEnd();</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>); <span class="hljs-comment">// 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);       <span class="hljs-comment">// &#x27;   foo&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-trimStart"><a href="#String-prototype-trimStart" class="headerlink" title="String.prototype.trimStart()"></a>String.prototype.trimStart()</h3><p><code>**trimStart()**</code> 方法从字符串的开头删除空格。<code>trimLeft()</code> 是此方法的别名。</p><ul><li>语法 <ul><li>str.trimStart();</li><li>str.trimLeft();</li><li>返回值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;   foo  &quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>); <span class="hljs-comment">// 8</span><br><br>str = str.<span class="hljs-title function_">trimStart</span>()    <span class="hljs-comment">// 等同于 str = str.trimLeft();</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>); <span class="hljs-comment">// 5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);        <span class="hljs-comment">// &quot;foo  &quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="String-prototype-toString"><a href="#String-prototype-toString" class="headerlink" title="String.prototype.toString()"></a>String.prototype.toString()</h3><p><code>**toString()**</code> 方法返回指定对象的字符串形式。</p><ul><li>语法 <ul><li>str.toString()</li><li>返回值 <ul><li>一个表示调用对象的字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello world&quot;</span>);<br><br>conosle.<span class="hljs-title function_">log</span>(x.<span class="hljs-title function_">toString</span>())      <span class="hljs-comment">// 输出 &quot;Hello world&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h3><p><code>**replace()**</code> 方法返回一个由替换值（<code>replacement</code>）替换部分或所有的模式（<code>pattern</code>）匹配项后的新字符串。模式可以是一个字符串或者一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">正则表达式</a>，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。<strong>如果</strong><code>**pattern**</code><strong>是字符串，则仅替换第一个匹配项。</strong></p><ul><li>语法 <ul><li>str.replace(regexp|substr, newSubStr|function) </li><li>参数 <ul><li><code>regexp</code>(pattern)<br>一个<code>[RegExp](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)</code> 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。 </li><li><code>substr</code>(pattern)<br>一个将被 <code>newSubStr</code> 替换的 <code>[字符串](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code>。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。 </li><li><code>newSubStr</code> (replacement)<br>用于替换掉第一个参数在原字符串中的匹配部分的<code>[字符串](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code>。该字符串中可以内插一些特殊的变量名。参考下面的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">使用字符串作为参数</a>。 </li><li><code>function</code> (replacement)<br>一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。参考下面的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">指定一个函数作为参数</a>。</li></ul></li><li>返回值 <ul><li>一个部分或全部匹配由替代模式所取代的新的字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;Twas the night before Xmas...&#x27;</span>;<br><span class="hljs-keyword">var</span> newstr = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/xmas/i</span>, <span class="hljs-string">&#x27;Christmas&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr);  <span class="hljs-comment">// Twas the night before Christmas...</span><br><br><span class="hljs-comment">// ------------------------------------------------------</span><br><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/apples/gi</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Apples are round, and apples are juicy.&quot;</span>;<br><span class="hljs-keyword">var</span> newstr = str.<span class="hljs-title function_">replace</span>(re, <span class="hljs-string">&quot;oranges&quot;</span>);<br><br><span class="hljs-comment">// oranges are round, and oranges are juicy.</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr);<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll()"></a>String.prototype.replaceAll()</h3><p><code>**replaceAll()**</code> 方法返回一个新字符串，新字符串所有满足 <code>pattern</code> 的部分都已被<code>replacement</code> 替换。<code>pattern</code>可以是一个字符串或一个 <code>[RegExp](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)</code>， <code>replacement</code>可以是一个字符串或一个在每次匹配被调用的函数。</p><ul><li>语法 <ul><li>const newStr &#x3D; str.replaceAll(regexp|substr, newSubstr|function) </li><li>参数 <ul><li><code>regexp</code> (pattern)<br>A <code>[RegExp](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)</code> object or literal with the global flag. The matches are replaced with <code>newSubstr</code> or the value returned by the specified <code>function</code>. A RegExp without the global (“g”) flag will throw a <code>TypeError</code>: “replaceAll must be called with a global RegExp”. </li><li><code>substr</code><br>A <code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> that is to be replaced by <code>newSubstr</code>. It is treated as a literal string and is <em>not</em> interpreted as a regular expression. </li><li><code>newSubstr</code> (replacement)<br>The <code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> that replaces the substring specified by the specified <code>regexp</code> or <code>substr</code> parameter. A number of special replacement patterns are supported; see the “<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll#specifying_a_string_as_a_parameter">Specifying a string as a parameter</a>“ section below. </li><li><code>function</code> (replacement)<br>A function to be invoked to create the new substring to be used to replace the matches to the given <code>regexp</code> or <code>substr</code>. The arguments supplied to this function are described in the “<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll#specifying_a_function_as_a_parameter">Specifying a function as a parameter</a>“ section below.</li></ul></li><li>返回值 <ul><li>A new string, with all matches of a pattern replaced by a replacement.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;aabbcc&#x27;</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-comment">// &#x27;aa..cc&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-search"><a href="#String-prototype-search" class="headerlink" title="String.prototype.search()"></a>String.prototype.search()</h3><p><code>**search()**</code> 方法执行正则表达式和 <code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> 对象之间的一个搜索匹配。</p><ul><li>语法 <ul><li>str.search(regexp) </li><li>参数 <ul><li>regexp：一个<code>[正则表达式（regular expression）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)</code>对象<br>如果传入一个非正则表达式对象 <code>regexp</code>，则会使用 <code>new RegExp(regexp)</code> 隐式地将其转换为正则表达式对象。</li></ul></li><li>返回值 <ul><li>如果匹配成功，则 <code>search()</code> 返回正则表达式在字符串中首次匹配项的索引;否则，返回 <code>-1</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hey JudE&quot;</span>;<br><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/[A-Z]/g</span>;<br><span class="hljs-keyword">var</span> re2 = <span class="hljs-regexp">/[.]/g</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">search</span>(re)); <span class="hljs-comment">// returns 4, which is the index of the first capital letter &quot;J&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">search</span>(re2)); <span class="hljs-comment">// returns -1 cannot find &#x27;.&#x27; dot punctuation</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-padEnd"><a href="#String-prototype-padEnd" class="headerlink" title="String.prototype.padEnd()"></a>String.prototype.padEnd()</h3><p><code>**padEnd()**</code> 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</p><ul><li>语法 <ul><li>str.padEnd(targetLength [, padString])</li><li>参数 <ul><li>targetLength：当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li><li>padString(可选)：填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 “ “（U+0020）。</li></ul></li><li>返回值 <ul><li>在原字符串末尾填充指定的填充字符串直到目标长度所形成的新字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">10</span>);          <span class="hljs-comment">// &quot;abc       &quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;foo&quot;</span>);   <span class="hljs-comment">// &quot;abcfoofoof&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">// &quot;abc123&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">1</span>);           <span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-padStart"><a href="#String-prototype-padStart" class="headerlink" title="String.prototype.padStart()"></a>String.prototype.padStart()</h3><p><code>**padStart()**</code> 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p><ul><li>语法 <ul><li>str.padStart(targetLength [, padString])</li><li>参数 <ul><li>targetLength：当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li><li>padString(可选)：填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 “ “（U+0020）。</li></ul></li><li>返回值 <ul><li>在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>);         <span class="hljs-comment">// &quot;       abc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;foo&quot;</span>);  <span class="hljs-comment">// &quot;foofoofabc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;123465&quot;</span>); <span class="hljs-comment">// &quot;123abc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);     <span class="hljs-comment">// &quot;00000abc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">1</span>);          <span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-match"><a href="#String-prototype-match" class="headerlink" title="String.prototype.match()"></a>String.prototype.match()</h3><p><code>**match()**</code> 方法检索返回一个字符串匹配正则表达式的结果。</p><ul><li>语法 <ul><li>str.match(regexp)</li><li>参数 <ul><li>regexp：一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">正则表达式</a>对象。如果传入一个非正则表达式对象，则会隐式地使用 <code>new RegExp(obj)</code> 将其转换为一个 <code>[RegExp](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp)</code> 。如果你没有给出任何参数并直接使用match() 方法 ，你将会得到一 个包含空字符串的 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code> ：[“”] 。</li></ul></li><li>返回值 <ul><li>如果使用g标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。</li><li>如果未使用g标志，则仅返回第一个完整匹配及其相关的捕获组（<code>Array</code>）。 在这种情况下，返回的项目将具有如下所述的其他属性。</li></ul></li><li>附加属性 <ul><li><code>groups</code>: 一个捕获组数组 或 <code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code>（如果没有定义命名捕获组）。</li><li><code>index</code>: 匹配的结果的开始位置</li><li><code>input</code>: 搜索的字符串.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;For more information, see Chapter 3.4.5.1&#x27;</span>;<br><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/see (chapter \d+(\.\d)*)/i</span>;<br><span class="hljs-keyword">var</span> found = str.<span class="hljs-title function_">match</span>(re);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(found);<br><br><span class="hljs-comment">// logs [ &#x27;see Chapter 3.4.5.1&#x27;,</span><br><span class="hljs-comment">//        &#x27;Chapter 3.4.5.1&#x27;,</span><br><span class="hljs-comment">//        &#x27;.1&#x27;,</span><br><span class="hljs-comment">//        index: 22,</span><br><span class="hljs-comment">//        input: &#x27;For more information, see Chapter 3.4.5.1&#x27; ]</span><br><br><span class="hljs-comment">// &#x27;see Chapter 3.4.5.1&#x27; 是整个匹配。</span><br><span class="hljs-comment">// &#x27;Chapter 3.4.5.1&#x27; 被&#x27;(chapter \d+(\.\d)*)&#x27;捕获。</span><br><span class="hljs-comment">// &#x27;.1&#x27; 是被&#x27;(\.\d)&#x27;捕获的最后一个值。</span><br><span class="hljs-comment">// &#x27;index&#x27; 属性(22) 是整个匹配从零开始的索引。</span><br><span class="hljs-comment">// &#x27;input&#x27; 属性是被解析的原始字符串。</span><br><br><span class="hljs-comment">// ------------------------------------------------------</span><br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>;<br><span class="hljs-keyword">var</span> regexp = <span class="hljs-regexp">/[A-E]/gi</span>;<br><span class="hljs-keyword">var</span> matches_array = str.<span class="hljs-title function_">match</span>(regexp);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(matches_array);<br><span class="hljs-comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll()"></a>String.prototype.matchAll()</h3><p><code>**matchAll()**</code> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p><ul><li>语法 <ul><li>str.matchAll(regexp)</li><li>参数 <ul><li>regexp：正则表达式对象。如果所传参数不是一个正则表达式对象，则会隐式地使用 <code>new RegExp(obj)</code> 将其转换为一个 <code>[RegExp](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp)</code> 。<code>RegExp</code>必须是设置了全局模式<code>g</code>的形式，否则会抛出异常<code>TypeError</code>。</li></ul></li><li>返回值 <ul><li>一个迭代器（不可重用，结果耗尽需要再次调用方法，获取一个新的迭代器）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> regexp = <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;foo[a-z]*&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>);<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;table football, foosball&#x27;</span>;<br><span class="hljs-keyword">let</span> match;<br><br><span class="hljs-keyword">while</span> ((match = regexp.<span class="hljs-title function_">exec</span>(str)) !== <span class="hljs-literal">null</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Found <span class="hljs-subst">$&#123;match[<span class="hljs-number">0</span>]&#125;</span> start=<span class="hljs-subst">$&#123;match.index&#125;</span> end=<span class="hljs-subst">$&#123;regexp.lastIndex&#125;</span>.`</span>);<br>  <span class="hljs-comment">// expected output: &quot;Found football start=6 end=14.&quot;</span><br>  <span class="hljs-comment">// expected output: &quot;Found foosball start=16 end=24.&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-toLocaleLowerCase"><a href="#String-prototype-toLocaleLowerCase" class="headerlink" title="String.prototype.toLocaleLowerCase()"></a>String.prototype.toLocaleLowerCase()</h3><p><code>**toLocaleLowerCase()**</code>方法根据任何指定区域语言环境设置的大小写映射，返回调用字符串被转换为小写的格式。</p><ul><li>语法 <ul><li>str.toLocaleLowerCase()</li><li>str.toLocaleLowerCase(locale)</li><li>str.toLocaleLowerCase([locale, locale, …])</li><li>参数 <ul><li>locale(参数)：参数 <code>locale</code> 指明要转换成小写格式的特定语言区域。 如果以一个数组 <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code>形式给出多个locales,  最合适的地区将被选出来应用（参见<a href="https://tc39.github.io/ecma402/#sec-bestavailablelocale">best available locale</a>）。默认的locale是主机环境的当前区域(locale)设置。</li></ul></li><li>返回值 <ul><li>根据任何特定于语言环境的案例映射规则将被调用字串转换成小写格式的一个新字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;ALPHABET&#x27;</span>.<span class="hljs-title function_">toLocaleLowerCase</span>(); <span class="hljs-comment">// &#x27;alphabet&#x27;</span><br><br><span class="hljs-string">&#x27;\u0130&#x27;</span>.<span class="hljs-title function_">toLocaleLowerCase</span>(<span class="hljs-string">&#x27;tr&#x27;</span>) === <span class="hljs-string">&#x27;i&#x27;</span>;    <span class="hljs-comment">// true</span><br><span class="hljs-string">&#x27;\u0130&#x27;</span>.<span class="hljs-title function_">toLocaleLowerCase</span>(<span class="hljs-string">&#x27;en-US&#x27;</span>) === <span class="hljs-string">&#x27;i&#x27;</span>; <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> locales = [<span class="hljs-string">&#x27;tr&#x27;</span>, <span class="hljs-string">&#x27;TR&#x27;</span>, <span class="hljs-string">&#x27;tr-TR&#x27;</span>, <span class="hljs-string">&#x27;tr-u-co-search&#x27;</span>, <span class="hljs-string">&#x27;tr-x-turkish&#x27;</span>];<br><span class="hljs-string">&#x27;\u0130&#x27;</span>.<span class="hljs-title function_">toLocaleLowerCase</span>(locales) === <span class="hljs-string">&#x27;i&#x27;</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-toLocaleUpperCase"><a href="#String-prototype-toLocaleUpperCase" class="headerlink" title="String.prototype.toLocaleUpperCase()"></a>String.prototype.toLocaleUpperCase()</h3><p><code>**toLocaleUpperCase()**</code> 方法根据本地主机语言环境把字符串转换为大写格式，并返回转换后的字符串。</p><ul><li>语法 <ul><li>str.toLocaleUpperCase()</li><li>str.toLocaleUpperCase(locale)</li><li>str.toLocaleUpperCase([locale, locale, …])</li><li>参数 <ul><li>locale(参数)：The <code>locale</code> parameter indicates the locale to be used to convert to upper case according to any locale-specific case mappings. If multiple locales are given in an <code>[Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)</code>, the <a href="https://tc39.github.io/ecma402/#sec-bestavailablelocale">best available locale</a> is used. The default locale is the host environment’s current locale.</li></ul></li><li>返回值 <ul><li>A new string representing the calling string converted to upper case, according to any locale-specific case mappings.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;alphabet&#x27;</span>.<span class="hljs-title function_">toLocaleUpperCase</span>(); <span class="hljs-comment">// &#x27;ALPHABET&#x27;</span><br><br><span class="hljs-string">&#x27;Gesäß&#x27;</span>.<span class="hljs-title function_">toLocaleUpperCase</span>(); <span class="hljs-comment">// &#x27;GESÄSS&#x27;</span><br><br><span class="hljs-string">&#x27;i\u0307&#x27;</span>.<span class="hljs-title function_">toLocaleUpperCase</span>(<span class="hljs-string">&#x27;lt-LT&#x27;</span>); <span class="hljs-comment">// &#x27;I&#x27;</span><br><br><span class="hljs-keyword">let</span> locales = [<span class="hljs-string">&#x27;lt&#x27;</span>, <span class="hljs-string">&#x27;LT&#x27;</span>, <span class="hljs-string">&#x27;lt-LT&#x27;</span>, <span class="hljs-string">&#x27;lt-u-co-phonebk&#x27;</span>, <span class="hljs-string">&#x27;lt-x-lietuva&#x27;</span>];<br><span class="hljs-string">&#x27;i\u0307&#x27;</span>.<span class="hljs-title function_">toLocaleUpperCase</span>(locales); <span class="hljs-comment">// &#x27;I&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-toLowerCase"><a href="#String-prototype-toLowerCase" class="headerlink" title="String.prototype.toLowerCase()"></a>String.prototype.toLowerCase()</h3><p><code>**toLowerCase()**</code> 会将调用该方法的字符串值转为小写形式，并返回。</p><ul><li>语法 <ul><li>str.toLowerCase()</li><li>返回值 <ul><li>一个新的字符串，表示转换为小写的调用字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;中文简体 zh-CN || zh-Hans&#x27;</span>.<span class="hljs-title function_">toLowerCase</span>());<br><span class="hljs-comment">// 中文简体 zh-cn || zh-hans</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;ALPHABET&quot;</span>.<span class="hljs-title function_">toLowerCase</span>() );<br><span class="hljs-comment">// &quot;alphabet&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-toUpperCase"><a href="#String-prototype-toUpperCase" class="headerlink" title="String.prototype.toUpperCase()"></a>String.prototype.toUpperCase()</h3><p><code>**toUpperCase()**</code> 方法将调用该方法的字符串转为大写形式并返回（如果调用该方法的值不是字符串类型会被强制转换）。</p><ul><li>语法 <ul><li>str.toUpperCase()</li><li>返回值 <ul><li>一个新的字符串，表示转换为大写的调用字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;alphabet&#x27;</span>.<span class="hljs-title function_">toUpperCase</span>()); <span class="hljs-comment">// &#x27;ALPHABET&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-valueOf"><a href="#String-prototype-valueOf" class="headerlink" title="String.prototype.valueOf()"></a>String.prototype.valueOf()</h3><p><code>**valueOf()**</code> 方法返回 <code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> <strong>对象的原始值</strong></p><ul><li>语法 <ul><li>str.valueOf()</li><li>返回值 <ul><li>A string representing the primitive value of a given <code>[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)</code> object.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;Hello world&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x.<span class="hljs-title function_">valueOf</span>()); <span class="hljs-comment">// Displays &#x27;Hello world&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-repeat"><a href="#String-prototype-repeat" class="headerlink" title="String.prototype.repeat()"></a>String.prototype.repeat()</h3><p><code>**repeat()**</code> 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</p><ul><li>语法 <ul><li>str.repeat(count)</li><li>参数 <ul><li>count：介于 <code>0</code> 和 <code>[+Infinity](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY)</code> 之间的整数。表示在新构造的字符串中重复了多少遍原字符串。</li></ul></li><li>返回值 <ul><li>包含指定字符串的指定数量副本的新字符串。</li></ul></li><li>Exceptions <ul><li><code>[RangeError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count)</code>: 重复次数不能为负数。</li><li><code>[RangeError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large)</code>: 重复次数必须小于 infinity，且长度不会大于最长的字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_">repeat</span>(-<span class="hljs-number">1</span>)     <span class="hljs-comment">// RangeError: repeat count must be positive and less than inifinity</span><br><span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">0</span>)      <span class="hljs-comment">// &quot;&quot;</span><br><span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">1</span>)      <span class="hljs-comment">// &quot;abc&quot;</span><br><span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2</span>)      <span class="hljs-comment">// &quot;abcabc&quot;</span><br><span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3.5</span>)    <span class="hljs-comment">// &quot;abcabcabc&quot; 参数count将会被自动转换成整数.</span><br><span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)    <span class="hljs-comment">// RangeError: repeat count must be positive and less than inifinity</span><br><br>(&#123;toString : <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&quot;abc&quot;</span>, repeat : <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">repeat</span>&#125;).<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//&quot;abcabc&quot;,repeat是一个通用方法,也就是它的调用者可以不是一个字符串对象.</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-iterator"><a href="#String-prototype-iterator" class="headerlink" title="String.prototype@@iterator"></a>String.prototype<a href="">@@iterator</a></h3><p><code>**[@@iterator]()**</code> 方法返回一个新的Iterator对象，它遍历字符串的代码点，返回每一个代码点的字符串值。</p><h3 id="string-Symbol-iterator"><a href="#string-Symbol-iterator" class="headerlink" title="string[Symbol.iterator]"></a>string[Symbol.iterator]</h3><p>返回一个新的Iterator对象。</p><ul><li><p>使用<a href="">@@iterator</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;ABCDE&#x27;</span>;<br><span class="hljs-keyword">const</span> strIter = str[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strIter.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// A</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strIter.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// B</span><br></code></pre></td></tr></table></figure></li><li><p>通过 for..of 使用<a href="">@@iterator</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;ABCDE&#x27;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> s <span class="hljs-keyword">of</span> str) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br>&#125;<br><span class="hljs-comment">// A</span><br><span class="hljs-comment">// B</span><br><span class="hljs-comment">// C</span><br><span class="hljs-comment">// D</span><br><span class="hljs-comment">// E</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="String-prototype-charAt"><a href="#String-prototype-charAt" class="headerlink" title="String.prototype.charAt()"></a>String.prototype.charAt()</h3><p><code>**charAt()**</code> 方法从一个字符串中返回指定的字符。</p><ul><li>语法 <ul><li>str.charAt(index)</li><li>参数 <ul><li>index： 一个介于0 和字符串长度减1之间的整数。 (0~length-1)  如果没有提供索引，charAt() 将使用0。</li></ul></li><li>返回值 <ul><li>返回指定位置的字符，如果index超出字符串长度，则返回一个空字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;Hello world&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第0位是：&#x27;</span> + str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// H</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第1位是：&#x27;</span> + str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// e</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第2位是：&#x27;</span> + str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// l</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第20位是：&#x27;</span> + str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">20</span>)); <span class="hljs-comment">// &#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-charCodeAt"><a href="#String-prototype-charCodeAt" class="headerlink" title="String.prototype.charCodeAt()"></a>String.prototype.charCodeAt()</h3><p><code>**charCodeAt()**</code> 方法返回 <code>0</code> 到 <code>65535</code> 之间的整数，表示给定索引处的 UTF-16 代码单元</p><ul><li>语法 <ul><li>str.charCodeAt(index)</li><li>参数 <ul><li>index：一个大于等于 <code>0</code>，小于字符串长度的整数。如果不是一个数值，则默认为 <code>0</code>。</li></ul></li><li>返回值 <ul><li>指定 <code>index</code> 处字符的 UTF-16 代码单元值的一个数字；如果 <code>index</code> 超出范围，<code>charCodeAt()</code> 返回 <code>[NaN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;ABC&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 65</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 66</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 67</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">3</span>)); <span class="hljs-comment">// NAN</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-codePointAt"><a href="#String-prototype-codePointAt" class="headerlink" title="String.prototype.codePointAt()"></a>String.prototype.codePointAt()</h3><p><code>**codePointAt()**</code> 方法返回 一个 Unicode 编码点值的非负整数。</p><ul><li>语法 <ul><li>str.codePointAt(pos)</li><li>参数 <ul><li>pos：这个字符串中需要转码的元素的位置。</li></ul></li><li>返回值 <ul><li>返回值是在字符串中的给定索引的编码单元体现的数字，如果在索引处没找到元素则返回 <code>[undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)</code> 。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ABC&#x27;</span>.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 66</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;\uD800\uDC00&#x27;</span>.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 56320</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ABC&#x27;</span>.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">100</span>)); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-concat"><a href="#String-prototype-concat" class="headerlink" title="String.prototype.concat()"></a>String.prototype.concat()</h3><p><code>**concat()**</code> 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</p><ul><li>语法 <ul><li>str.concat(str2, [, …strN])</li><li>参数 <ul><li>str2, [, …strN]：需要连接到 <code>str</code> 的字符串。</li></ul></li><li>返回值 <ul><li>一个新的字符串，包含参数所提供的连接字符串。</li></ul></li><li>注意 <ul><li>强烈建议使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators">赋值操作符</a>（<code>+</code>, <code>+=</code>）代替 <code>concat</code> 方法。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;Hello &#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>)); <span class="hljs-comment">// Hello world!</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-startsWith"><a href="#String-prototype-startsWith" class="headerlink" title="String.prototype.startsWith()"></a>String.prototype.startsWith()</h3><p><code>**startsWith()**</code> 方法用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 <code>true</code> 或 <code>false</code>。</p><ul><li>语法 <ul><li>str.startsWith(searchString[, position])</li><li>参数 <ul><li>searchString：要搜索的子字符串。</li><li>position(可选)：在 <code>str</code> 中搜索 <code>searchString</code> 的开始位置，默认值为 0。</li></ul></li><li>返回值 <ul><li>如果在字符串的开头找到了给定的字符则返回<code>**true**</code>；否则返回<code>**false**</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;To be, or not to be, that is the question.&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;To be&quot;</span>));         <span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;not to be&quot;</span>));     <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;not to be&quot;</span>, <span class="hljs-number">10</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-endsWith"><a href="#String-prototype-endsWith" class="headerlink" title="String.prototype.endsWith()"></a>String.prototype.endsWith()</h3><p><code>**endsWith()**</code>方法用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 <code>true</code> 或 <code>false</code>。</p><ul><li>语法 <ul><li>str.endsWith(searchString[, length])</li><li>参数 <ul><li>searchString：要搜索的子字符串。</li><li>length(可选)：作为 <code>str</code> 的长度。默认值为 <code>str.length</code>。</li></ul></li><li>返回值 <ul><li>如果传入的子字符串在搜索字符串的末尾则返回<code>**true**</code>；否则将返回 <code>**false**</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;To be, or not to be, that is the question.&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;question.&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;to be&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;to be&#x27;</span>, <span class="hljs-number">19</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h3><p><code>**String.fromCharCode()**</code> 静态方法返回由指定的 UTF-16 代码单元序列创建的字符串。</p><ul><li>语法 <ul><li>String.fromCharCode(num1[, …[, numN]])</li><li>参数 <ul><li>num1, …, numN：一系列 UTF-16 代码单元的数字。范围介于 <code>0</code> 到 <code>65535</code>（<code>0xFFFF</code>）之间。大于 <code>0xFFFF</code> 的数字将被截断。不进行有效性检查。</li></ul></li><li>返回值 <ul><li>一个长度为 <code>N</code> 的字符串，由 <code>N</code> 个指定的 UTF-16 代码单元组成。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>);   <span class="hljs-comment">// 返回 &quot;ABC&quot;</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">0x2014</span>);       <span class="hljs-comment">// 返回 &quot;—&quot;</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">0x12014</span>);      <span class="hljs-comment">// 也是返回 &quot;—&quot;; 数字 1 被剔除并忽略</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">8212</span>);         <span class="hljs-comment">// 也是返回 &quot;—&quot;; 8212 是 0x2014 的十进制表示</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h3><p><code>**String.fromCodePoint()**</code>** 静态方法返回使用指定的代码点序列创建的字符串。**</p><ul><li>语法 <ul><li>String.fromCodePoint(num1[, …[, numN]])</li><li>参数 <ul><li>num1, …, numN：一串 Unicode 编码位置，即“代码点”。</li></ul></li><li>返回值 <ul><li>使用指定的 Unicode 编码位置创建的字符串。</li></ul></li><li>异常 <ul><li>RangeError：如果传入无效的 Unicode 编码，将会抛出一个<code>[RangeError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError)</code> (例如： “RangeError: NaN is not a valid code point”)。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">42</span>);       <span class="hljs-comment">// &quot;*&quot;</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">65</span>, <span class="hljs-number">90</span>);   <span class="hljs-comment">// &quot;AZ&quot;</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">0x404</span>);    <span class="hljs-comment">// &quot;\u0404&quot;</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">0x2F804</span>);  <span class="hljs-comment">// &quot;\uD87E\uDC04&quot;</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">194564</span>);   <span class="hljs-comment">// &quot;\uD87E\uDC04&quot;</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">0x1D306</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x1D307</span>) <span class="hljs-comment">// &quot;\uD834\uDF06a\uD834\uDF07&quot;</span><br><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-string">&#x27;_&#x27;</span>);      <span class="hljs-comment">// RangeError</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-title class_">Infinity</span>); <span class="hljs-comment">// RangeError</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(-<span class="hljs-number">1</span>);       <span class="hljs-comment">// RangeError</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">3.14</span>);     <span class="hljs-comment">// RangeError</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">3e-2</span>);     <span class="hljs-comment">// RangeError</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-title class_">NaN</span>);      <span class="hljs-comment">// RangeError</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-prototype-localeCompare"><a href="#String-prototype-localeCompare" class="headerlink" title="String.prototype.localeCompare()"></a>String.prototype.localeCompare()</h3><p><code>**localeCompare()**</code> 方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。</p><ul><li>语法 <ul><li>referenceStr.localeCompare(compareString[, locales[, options]])</li><li>参数 <ul><li><p>compareString：用来比较的字符串</p></li><li><p>locales(可选)：用来表示一种或多种语言或区域的一个符合 <a href="https://tools.ietf.org/html/rfc5646">BCP 47</a> 标准的字符串或一个字符串数组。 </p><ul><li>co：为了某些地域多样的排序规则。可能的值包括： <code>&quot;big5han&quot;</code>, <code>&quot;dict&quot;</code>, <code>&quot;direct&quot;</code>, <code>&quot;ducet&quot;</code>, <code>&quot;gb2312&quot;</code>, <code>&quot;phonebk&quot;</code>, <code>&quot;phonetic&quot;</code>, <code>&quot;pinyin&quot;</code>, <code>&quot;reformed&quot;</code>, <code>&quot;searchjl&quot;</code>, <code>&quot;stroke&quot;</code>, <code>&quot;trad&quot;</code>, <code>&quot;unihan&quot;</code>。 <code>&quot;standard&quot;</code> 和<code>&quot;search&quot;</code> 这两个值是被忽略的; 它们被 <code>options</code> 的属性 <code>usage</code> 代替(往下看)。</li><li>kn：指定数值排序是否应该被使用， 像是这样 “1” &lt; “2” &lt; “10”。 可能的值是 <code>&quot;true&quot;</code> 和 <code>&quot;false&quot;</code>。 这个选项能被通过<code>options</code> 属性设置或通过 Unicode 扩展。 假如两个都被设置了， 则 <code>options</code> 优先。（_”<em>language</em>-_region*-u-kn-true|false”）*</li><li>kf：指定是否优先对大写字母或小写字母排序。 可能的值有 <code>&quot;upper&quot;</code>, <code>&quot;lower&quot;</code>, 或 <code>&quot;false&quot;</code> (use the locale’s default)。这个选项能被通过<code>options</code> 属性设置或通过 Unicode 扩展。假如两个都被设置了， 则 <code>options</code> 优先。_（”<em>language</em>-_region*-u-kf-upper|lower|false”）*</li></ul></li><li><p>options(可选)：支持下列的一些或全部属性的一个对象: </p><ul><li>localeMatcher：地域匹配算法的使用. 可能的值是 <code>&quot;lookup&quot;</code> 和 <code>&quot;best fit&quot;</code>; 默认的值是 <code>&quot;best fit&quot;</code>。更多相关的资料, 请参考 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation">Intl page</a>.</li><li>usage：指定比较的目标是排序或者是搜索. 可能的值是 <code>&quot;sort&quot;</code> 和 <code>&quot;search&quot;</code>; 默认是 <code>&quot;sort&quot;</code>.</li><li>sensitivity：指定排序程序的敏感度（Which differences in the strings should lead to non-zero result values.）</li><li>ignorePunctuation：指定是否忽略标点. 可能的值是 <code>true</code> and <code>false</code>; 默认为 <code>false</code>.</li><li>numeric：是否指定使用数字排序, 像这样 “1” &lt; “2” &lt; “10”. 可能的值是 <code>true</code> 和 <code>false</code>; 默认为 <code>false</code>. 这个选项能被通过<code>options</code> 属性设置或通过 Unicode 扩展。假如两个都被设置了， 则 <code>options</code> 优先。 实现不用必须支持这个属性.</li><li>caseFirst：指定大小写有限排序. 可能的值有 <code>&quot;upper&quot;</code>, <code>&quot;lower&quot;</code>, or <code>&quot;false&quot;</code> (use the locale’s default); 默认为 <code>&quot;false&quot;</code>. 这个选项能被通过<code>options</code> 属性设置或通过 Unicode 扩展。假如两个都被设置了， 则 <code>options</code> 优先。 实现不用必须支持这个属性.</li></ul></li></ul></li><li>返回值 <ul><li>如果引用字符存在于比较字符之前则为<strong>负数</strong>; 如果引用字符存在于比较字符之后则为<strong>正数</strong>; 相等的时候返回 <strong>0</strong> .</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// The letter &quot;a&quot; is before &quot;c&quot; yielding a negative value</span><br><span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_">localeCompare</span>(<span class="hljs-string">&#x27;c&#x27;</span>);<br><span class="hljs-comment">// -2 or -1 (or some other negative value)</span><br><br><span class="hljs-comment">// Alphabetically the word &quot;check&quot; comes after &quot;against&quot; yielding a positive value</span><br><span class="hljs-string">&#x27;check&#x27;</span>.<span class="hljs-title function_">localeCompare</span>(<span class="hljs-string">&#x27;against&#x27;</span>);<br><span class="hljs-comment">// 2 or 1 (or some other positive value)</span><br><br><span class="hljs-comment">// &quot;a&quot; and &quot;a&quot; are equivalent yielding a neutral value of zero</span><br><span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_">localeCompare</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="String-prototype-normalize"><a href="#String-prototype-normalize" class="headerlink" title="String.prototype.normalize()"></a>String.prototype.normalize()</h3><p><code>**normalize()**</code> 方法会按照指定的一种 Unicode 正规形式将当前字符串正规化。（如果该值不是字符串，则首先将其转换为一个字符串）。</p><ul><li>语法 <ul><li>str.normalize([form])</li><li>参数 <ul><li>form(可选)：四种 Unicode 正规形式（Unicode Normalization Form）<code>&quot;NFC&quot;</code>、<code>&quot;NFD&quot;</code>、<code>&quot;NFKC&quot;</code>，或 <code>&quot;NFKD&quot;</code> 其中的一个, 默认值为 <code>&quot;NFC&quot;</code>。</li></ul></li><li>返回值 <ul><li>含有给定字符串的 Unicode 规范化形式的字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Initial string</span><br><br><span class="hljs-comment">// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE</span><br><span class="hljs-comment">// U+0323: COMBINING DOT BELOW</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;\u1E9B\u0323&quot;</span>;<br><br><br><span class="hljs-comment">// Canonically-composed form (NFC)</span><br><br><span class="hljs-comment">// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE</span><br><span class="hljs-comment">// U+0323: COMBINING DOT BELOW</span><br>str.<span class="hljs-title function_">normalize</span>(<span class="hljs-string">&quot;NFC&quot;</span>); <span class="hljs-comment">// &quot;\u1E9B\u0323&quot;</span><br>str.<span class="hljs-title function_">normalize</span>(); <span class="hljs-comment">// same as above</span><br><br><br><span class="hljs-comment">// Canonically-decomposed form (NFD)</span><br><br><span class="hljs-comment">// U+017F: LATIN SMALL LETTER LONG S</span><br><span class="hljs-comment">// U+0323: COMBINING DOT BELOW</span><br><span class="hljs-comment">// U+0307: COMBINING DOT ABOVE</span><br>str.<span class="hljs-title function_">normalize</span>(<span class="hljs-string">&quot;NFD&quot;</span>); <span class="hljs-comment">// &quot;\u017F\u0323\u0307&quot;</span><br><br><br><span class="hljs-comment">// Compatibly-composed (NFKC)</span><br><br><span class="hljs-comment">// U+1E69: LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE</span><br>str.<span class="hljs-title function_">normalize</span>(<span class="hljs-string">&quot;NFKC&quot;</span>); <span class="hljs-comment">// &quot;\u1E69&quot;</span><br><br><br><span class="hljs-comment">// Compatibly-decomposed (NFKD)</span><br><br><span class="hljs-comment">// U+0073: LATIN SMALL LETTER S</span><br><span class="hljs-comment">// U+0323: COMBINING DOT BELOW</span><br><span class="hljs-comment">// U+0307: COMBINING DOT ABOVE</span><br>str.<span class="hljs-title function_">normalize</span>(<span class="hljs-string">&quot;NFKD&quot;</span>); <span class="hljs-comment">// &quot;\u0073\u0323\u0307&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h3><p><strong>String.raw()</strong> 是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals">模板字符串</a>的标签函数，它的作用类似于 Python 中的字符串前缀 <code>r</code> 和 C# 中的字符串前缀 <code>@</code>（还是有点区别的，详见隔壁 Chromium 那边的<a href="https://bugs.chromium.org/p/v8/issues/detail?id=5016">这个 issue</a>），是用来获取一个模板字符串的原始字符串的，比如说，占位符（例如 <code>$&#123;foo&#125;</code>）会被处理为它所代表的其他字符串，而转义字符（例如 <code>\n</code>）不会。</p><ul><li>语法 <ul><li>String.raw(callSite, …substitutions)</li><li>String.raw<code>templateString</code></li><li>参数 <ul><li>callSite：一个模板字符串的“调用点对象”。类似<code>&#123; raw: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;] &#125;</code>。</li><li>…substitutions：任意个可选的参数，表示任意个内插表达式对应的值。</li><li>templateString：模板字符串，可包含占位符（<code>$&#123;...&#125;</code>）。</li></ul></li><li>返回值 <ul><li>给定模板字符串的原始字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property">raw</span><span class="hljs-string">`Hi\n<span class="hljs-subst">$&#123;<span class="hljs-number">2</span>+<span class="hljs-number">3</span>&#125;</span>!`</span>;<br><span class="hljs-comment">// &#x27;Hi\n5!&#x27;，Hi 后面的字符不是换行符，\ 和 n 是两个不同的字符</span><br><br><span class="hljs-title class_">String</span>.<span class="hljs-property">raw</span> <span class="hljs-string">`Hi\u000A!`</span>;<br><span class="hljs-comment">// &quot;Hi\u000A!&quot;，同上，这里得到的会是 \、u、0、0、0、A 6个字符，</span><br><span class="hljs-comment">// 任何类型的转义形式都会失效，保留原样输出，不信你试试.length</span><br><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;Bob&quot;</span>;<br><span class="hljs-title class_">String</span>.<span class="hljs-property">raw</span> <span class="hljs-string">`Hi\n<span class="hljs-subst">$&#123;name&#125;</span>!`</span>;<br><span class="hljs-comment">// &quot;Hi\nBob!&quot;，内插表达式还可以正常运行</span><br><br><br><span class="hljs-comment">// 正常情况下，你也许不需要将 String.raw() 当作函数调用。</span><br><span class="hljs-comment">// 但是为了模拟 `t$&#123;0&#125;e$&#123;1&#125;s$&#123;2&#125;t` 你可以这样做:</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">raw</span>(&#123; <span class="hljs-attr">raw</span>: <span class="hljs-string">&#x27;test&#x27;</span> &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// &#x27;t0e1s2t&#x27;</span><br><span class="hljs-comment">// 注意这个测试, 传入一个 string, 和一个类似数组的对象</span><br><span class="hljs-comment">// 下面这个函数和 `foo$&#123;2 + 3&#125;bar$&#123;&#x27;Java&#x27; + &#x27;Script&#x27;&#125;baz` 是相等的.</span><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">raw</span>(&#123;<br>  <span class="hljs-attr">raw</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>]<br>&#125;, <span class="hljs-number">2</span> + <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Java&#x27;</span> + <span class="hljs-string">&#x27;Script&#x27;</span>); <span class="hljs-comment">// &#x27;foo5barJavaScriptbaz&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx配置</title>
    <link href="/blog/2022/08/03/knowledge/nginx/"/>
    <url>/blog/2022/08/03/knowledge/nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><ul><li>配置到站点里面</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span><br>  &#123;<br>      <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>      <span class="hljs-attribute">server_name</span> web.hanmingda.top;<br><br>      <span class="hljs-attribute">index</span> index.html index.htm index.php;<br>      <span class="hljs-attribute">root</span>  /www/wwwroot/web.hanmingda.top;<br>      <span class="hljs-comment">#error_page   404   /404.html;</span><br><br>      <span class="hljs-section">location</span> /api &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8899;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">5</span>;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> localhost <span class="hljs-number">127.0.0.1</span>;<br>    <span class="hljs-section">location</span> / &#123;<br>      <span class="hljs-comment"># 允许跨域请求的“域”</span><br>      <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$http_origin</span>;<br>      <span class="hljs-comment"># 允许客户端提交Cookie</span><br>      <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br>      <span class="hljs-comment"># 允许客户端的请求方法</span><br>      <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS, DELETE, PUT&#x27;</span>;<br>      <span class="hljs-comment"># 允许客户端提交的的请求头</span><br>      <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="hljs-string">&#x27;Origin, x-requested-with, Content-Type, Accept, Authorization&#x27;</span>;<br>      <span class="hljs-comment"># 允许客户端访问的响应头</span><br>      <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Expose-Headers&#x27;</span> <span class="hljs-string">&#x27;Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma&#x27;</span>;<br>      <span class="hljs-comment"># 处理预检请求</span><br>      <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>        <span class="hljs-comment"># 预检请求缓存时间</span><br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="hljs-number">1728000</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Type&#x27;</span> <span class="hljs-string">&#x27;text/plain; charset=utf-8&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Length&#x27;</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;<br>      &#125;<br>      <br>      <span class="hljs-comment"># SpringBoot 应用访问路径</span><br>      <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<br>      <br>      <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>      <br>      <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">600</span>;<br>      <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">600</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
